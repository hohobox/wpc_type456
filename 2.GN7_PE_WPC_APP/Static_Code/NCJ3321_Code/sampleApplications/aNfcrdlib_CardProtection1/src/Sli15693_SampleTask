/*******************************************************************************
 * (c) NXP B.V. 2018 - 2023
 * All rights reserved.
 *
 * Disclaimer
 * 1. The NXP Software/Source Code is provided to Licensee "AS IS" without any warranties of any kind.
 * NXP makes no warranties to Licensee and shall not indemnify Licensee or hold it harmless for any
 * reason related to the NXP Software/Source Code or otherwise be liable to the NXP customer. The NXP
 * customer acknowledges and agrees that the NXP Software/Source Code is provided AS-IS and accepts
 * all risks of utilizing the NXP Software under the conditions set forth according to this disclaimer.
 *
 * 2. NXP EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT OF
 * INTELLECTUAL PROPERTY RIGHTS. NXP SHALL HAVE NO LIABILITY TO THE NXP CUS-TOMER, OR ITS
 * SUBSIDIARIES, AFFILIATES, OR ANY OTHER THIRD PARTY FOR ANY DAMAGES, INCLUDING WITHOUT LIMITATION,
 * DAMAGES RESULTING OR ALLEGDED TO HAVE RESULTED FROM ANY DEFECT, ER-ROR OR OMMISSION IN THE NXP
 * SOFTWARE/SOURCE CODE, THIRD PARTY APPLICATION SOFTWARE AND/OR DOCUMENTATION, OR AS A RESULT OF ANY
 * INFRINGEMENT OF ANY INTELLECTUAL PROPERTY RIGHT OF ANY THIRD PARTY. IN NO EVENT SHALL NXP BE LIABLE
 * FOR ANY INCIDENTAL, INDIRECT, SPE-CIAL, EXEMPLARY, PUNITIVE, OR CONSEQUENTIAL DAMAGES (INCLUDING
 * LOST PROFITS) SUFFERED BY NXP CUSTOMER OR ITS SUBSIDIARIES, AFFILIATES, OR ANY OTHER THIRD PARTY
 * ARISING OUT OF OR RE-LATED TO THE NXP SOFTWARE/SOURCE CODE EVEN IF NXP HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 *
 * 3. NXP reserves the right to make changes to the NXP Software/Source code any time, also without
 * informing customer.
 *
 * 4. Licensee agrees to indemnify and hold harmless NXP and its affiliated companies from and against
 * any claims, suits, losses, damages, liabilities, costs and expenses (including reasonable
 * attorney's fees) resulting from Licensee's and/or Licensee customer's/licensee's use of the NXP
 * Software/Source Code.
 *******************************************************************************/

#include <phApp_Init.h>
#include <Nfcrdlib_Detect_Card.h>

#ifdef NXPBUILD__PHPAL_SLI15693_SW

typedef enum
{
    ANFC_SLI15693_SELECT,
    ANFC_SLI15693_GET_INFORMATION,
    ANFC_ICODE_GET_RANDOMNUMBER,
    ANFC_SLI15693_STAYQUIET,
    ANFC_SLI15693_FINISH
} ANFC_SLI15693_StateType_t;

static VAR(ANFC_SLI15693_StateType_t, ANFCRL_VAR) ANFC_SLI15693_State = ANFC_SLI15693_SELECT;
static P2VAR(uint8, AUTOMATIC, ANFCRL_APPL_DATA) pRxbuffer = NULL;
static VAR(uint16, ANFCRL_VAR) bDataLength, wAppTagType = 0x00U;
static VAR(uint8, ANFCRL_VAR) appCmdBuff[1] = {0x00U};

static FUNC(phStatus_t, ANFCRL_CODE) phApp_Sli15693_GetSystemInformation(
    P2VAR(void, AUTOMATIC, ANFCRL_APPL_DATA) pPalSli15693DataParams,
    P2VAR(uint8*, AUTOMATIC, ANFCRL_APPL_DATA) ppSystemInfo,
    P2VAR(uint16, AUTOMATIC, ANFCRL_APPL_DATA) pSystemInfoLen);
static FUNC(phStatus_t, ANFCRL_CODE) phApp_Sli15693_GetRandomNumber(
    P2VAR(void, AUTOMATIC, ANFCRL_APPL_DATA) pPalSli15693DataParams,
    P2VAR(uint8*, AUTOMATIC, ANFCRL_APPL_DATA) ppRnd,
    P2VAR(uint16, AUTOMATIC, ANFCRL_APPL_DATA) pRndLen);

#ifdef   DEBUG
static P2CONST(char, AUTOMATIC, ANFCRL_APPL_CONST) GetIcodeTagTypeName(uint16 tagType)
{
    switch(tagType)
    {
        case 0x0001U:
            return "ICODE SLI";
        case 0x0002U:
            return "ICODE SLI-S";
        case 0x0003U:
            return "ICODE SLI-L";
        case 0x5001U:
            return "ICODE SLIX";
        case 0x5002U:
            return "ICODE SLIX-S";
        case 0x5003U:
            return "ICODE SLIX-L";
        case 0x0801U:
            return "ICODE SLI-X2";
        case 0x1801U:
            return "ICODE DNA";
        case 0x5801U:
            return "ICODE NTAG5-I2C";
        default:
            return "UNKNOWN";
    }
}
#endif

FUNC(phStatus_t, ANFCRL_CODE) Sli15693_SampleTask(
    P2VAR(phApp_Sw_DataParams_t, AUTOMATIC, ANFCRL_APPL_DATA) pDataParams)
{
    VAR(phStatus_t, ANFCRL_VAR) status = 0U;
    VAR(uint8, ANFCRL_VAR) aUID[PHPAL_SLI15693_UID_LENGTH] ={ 0x00U };
    VAR(uint8, ANFCRL_VAR) bUidLen = 0U;

    P2VAR(phpalSli15693_Sw_DataParams_t, AUTOMATIC, ANFCRL_APPL_DATA) pPal15693Data =
    pDataParams->pPal15693Params;
    switch (ANFC_SLI15693_State)
    {
        case ANFC_SLI15693_SELECT:
            status = phpalSli15693_Select(pPal15693Data);
            if (PH_STATUS_INPROCESS == status)
            {
                break;
            }
            else
            {
                /* Do Nothing */
            }
            wAppTagType = 0xFFFF;
            PH_CHECK_SUCCESS_FCT(status,
                    phpalSli15693_GetSerialNo(pPal15693Data, aUID, &bUidLen));

            wAppTagType = (uint16) (((uint16) aUID[PHPAL_SLI15693_UID_LENGTH - 4U] << 8U)
                        | (aUID[PHPAL_SLI15693_UID_LENGTH - 3U]));

            DEBUG_PRINTF("Tag Type:%s\r\n", GetIcodeTagTypeName(wAppTagType));
            ANFC_SLI15693_State = ANFC_SLI15693_GET_INFORMATION;
            return PH_STATUS_INPROCESS;
        case ANFC_SLI15693_GET_INFORMATION:
            status = phApp_Sli15693_GetSystemInformation(pPal15693Data, &pRxbuffer, &bDataLength);
            if (PH_STATUS_INPROCESS == status)
            {
                break;
            }
            else
            {
                /* Do Nothing */
            }
            if (PH_ERR_SUCCESS == status)
            {
                DEBUG_PRINTF("System info:");
                phApp_Print_Buff(pRxbuffer, (uint8) bDataLength);
                DEBUG_PRINTF("\r\n");
            }
            else
            {
                DEBUG_PRINTF("Get System info status: %X\r\n", status);
            }
            ANFC_SLI15693_State = ANFC_ICODE_GET_RANDOMNUMBER;
            return PH_STATUS_INPROCESS;
        case ANFC_ICODE_GET_RANDOMNUMBER:
            status = phApp_Sli15693_GetRandomNumber(pPal15693Data, &pRxbuffer, &bDataLength);
            if (PH_STATUS_INPROCESS == status)
            {
                break;
            }
            else
            {
                /* Do Nothing */
            }
            DEBUG_PRINTF("GetRandomNumber, status=%X\r\n", status);
            if (PH_ERR_SUCCESS == status)
            {
                phApp_Print_Buff(pRxbuffer, (uint8) bDataLength);
                DEBUG_PRINTF("\r\n");
                ANFC_SLI15693_State = ANFC_SLI15693_STAYQUIET;
            }
            else
            {
                ANFC_SLI15693_State = ANFC_SLI15693_STAYQUIET;
            }
            return PH_STATUS_INPROCESS;
        case ANFC_SLI15693_STAYQUIET:
            status = phpalSli15693_StayQuiet(pPal15693Data);
            if (PH_STATUS_INPROCESS == status)
            {
                break;
            }
            else
            {
                /* Do Nothing */
            }
            ANFC_SLI15693_State = ANFC_SLI15693_FINISH;
            DEBUG_PRINTF("StayQuiet, status=%X\r\n", status);
            return PH_STATUS_INPROCESS;
        case ANFC_SLI15693_FINISH:
            DEBUG_PRINTF("Finish\r\n");
            ANFC_SLI15693_State = ANFC_SLI15693_SELECT;
            return PH_ERR_SUCCESS;
        default:
            break;
    }
    return status;
}

static FUNC(phStatus_t, ANFCRL_CODE) phApp_Sli15693_GetSystemInformation(
    P2VAR(void, AUTOMATIC, ANFCRL_APPL_DATA) pPalSli15693DataParams,
    P2VAR(uint8*, AUTOMATIC, ANFCRL_APPL_DATA) ppSystemInfo,
    P2VAR(uint16, AUTOMATIC, ANFCRL_APPL_DATA) pSystemInfoLen)
{
    VAR(phStatus_t, ANFCRL_VAR) wStatus = 0U;
    VAR(uint16, ANFCRL_VAR) wCurFlag = 0U;

    /* Frame GetSystemInformation command information. */
    appCmdBuff[0] = PHPAL_SLI15693_SW_CMD_GET_SYSTEM_INFORMATION;

    wStatus = phhalHw_Exchange_GetStatus();
    if ((PH_ERR_IO_TIMEOUT == wStatus) || (PH_ERR_SUCCESS == wStatus))
    {
        /* Clear Option bit */
        /* Retrieve the flags byte */
        PH_CHECK_SUCCESS_FCT(wStatus,
        phpalSli15693_GetConfig( pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wCurFlag));

        wCurFlag = wCurFlag & (uint8) ~(uint8) PHPAL_SLI15693_FLAG_OPTION;

        /* Update the Option bit in the Flag's byte. */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
                pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wCurFlag));

        /* Set short timeout. */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_TIMEOUT_US, PHPAL_SLI15693_TIMEOUT_SHORT_US));
    }
    else
    {
        /* Do Nothing */
    }
    /* Exchange the command information to PAL layer. */
    wStatus = phpalSli15693_Exchange(pPalSli15693DataParams,
            PH_EXCHANGE_DEFAULT, appCmdBuff, 1U, ppSystemInfo, pSystemInfoLen);

    if (PH_STATUS_INPROCESS == wStatus)
    {
        return PH_STATUS_INPROCESS;
    }
    else
    {
        /* Do Nothing */
    }
    return wStatus;
}

static FUNC(phStatus_t, ANFCRL_CODE) phApp_Sli15693_GetRandomNumber(
    P2VAR(void, AUTOMATIC, ANFCRL_APPL_DATA) pPalSli15693DataParams,
    P2VAR(uint8*, AUTOMATIC, ANFCRL_APPL_DATA) ppRnd,
    P2VAR(uint16, AUTOMATIC, ANFCRL_APPL_DATA) pRndLen)
{
    VAR(phStatus_t, ANFCRL_VAR) wStatus = 0U;
    VAR(uint16, ANFCRL_VAR) wCurFlag = 0U;

    appCmdBuff[0] = PHPAL_SLI15693_SW_CMD_GET_RANDOM_NUMBER;
    wStatus = phhalHw_Exchange_GetStatus();
    if ((PH_ERR_IO_TIMEOUT == wStatus) || (PH_ERR_SUCCESS == wStatus))
    {
        /* Clear Option bit */
        /* Retrieve the flags byte */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_FLAGS, &wCurFlag));

        wCurFlag = wCurFlag & (uint8) ~(uint8) PHPAL_SLI15693_FLAG_OPTION;

        /* Update the Option bit in the Flag's byte. */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_FLAGS, wCurFlag));

        /* Set long timeout */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_TIMEOUT_US,PHPAL_SLI15693_TIMEOUT_LONG_US));
    }
    /* Exchange the command information to PAL layer. */
    wStatus = phpalSli15693_Exchange(pPalSli15693DataParams,
    PH_EXCHANGE_DEFAULT, appCmdBuff, 1U, ppRnd, pRndLen);

    if (PH_STATUS_INPROCESS == wStatus)
    {
        return PH_STATUS_INPROCESS;
    }

    return wStatus;
}

#endif /*NXPBUILD__PHPAL_SLI15693_SW*/
