/** \brief AUTOSAR SPI Driver
 **
 ** This file contains public type definitions in Spi module.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef SPI_TYPES_H_INCLUDED
#define SPI_TYPES_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Std_Types.h>         /* AUTOSAR standard types */
#include "Spi_Der_Types.h"
/*==================[macros]================================================*/

/*!< Channel uses external buffers. */
#define SPI_CHANNEL_TYPE_EB 0U
/*!< Channel uses internal buffers. */
#define SPI_CHANNEL_TYPE_IB 1U
/*!< Data shift edge is leading. */
#define SPI_DATA_SHIFT_EDGE_LEADING 0U
/*!< Data shift edge is trailing. */
#define SPI_DATA_SHIFT_EDGE_TRAILING 1U
/*!< Transmission starts with the Least Significant Bit first. */
#define SPI_TRANSFER_START_LSB 0U
/*!< Transmission starts with the Most Significant Bit first. */
#define SPI_TRANSFER_START_MSB 1U

/* Chip select identifiers per SCB instance. */
/** Chip select identifiers per SCB instance (bit 0). */
#define SPI_SELECT0 0U
/** Chip select identifiers per SCB instance (bit 1). */
#define SPI_SELECT1 1U
/** Chip select identifiers per SCB instance (bit 2). */
#define SPI_SELECT2 2U
/** Chip select identifiers per SCB instance (bit 3). */
#define SPI_SELECT3 3U

/* Chip select handled via GPIO by SPI driver. */
#define SPI_CS_VIA_GPIO 0U
/* Chip select handled automatically by peripheral HW engine. */
#define SPI_CS_VIA_PERIPHERAL_ENGINE 1U


/* OVS value range . */
/** OVS value minimum. */
#define SPI_OVS_VALUE_MIN   (0x03U)
/** OVS value maximum. */
#define SPI_OVS_VALUE_MAX   (0x0FU)

/* --- List of DEM status codes ------------------------------------------- */

/** \brief type for Spi DEM status */
/* Spi internal DEM status passed */
#define SPI_DEM_EVENT_STATUS_PASSED (0x00U)
/* Spi internal DEM status failed */
#define SPI_DEM_EVENT_STATUS_FAILED (0x01U)  


/* --- List of API codes ------------------------------------------- */

/* API service IDs */
/** Value of API function Init. */
#define SPI_API_INIT 0x00U
/** Value of API function Deinit. */
#define SPI_API_DEINIT 0x01U
/** Value of API function WriteIB. */
#define SPI_API_WRITEIB 0x02U
/** Value of API function AsyncTransmit. */
#define SPI_API_ASYNCTRANSMIT 0x03U
/** Value of API function ReadIB. */
#define SPI_API_READIB 0x04U
/** Value of API function SetupEB. */
#define SPI_API_SETUPEB 0x05U
/** Value of API function GetStatus. */
#define SPI_API_GETSTATUS 0x06U
/** Value of API function GetJobResult. */
#define SPI_API_GETJOBRESULT 0x07U
/** Value of API function GetSequenceResult. */
#define SPI_API_GETSEQUENCERESULT 0x08U
/** Value of API function GetVersionInfo. */
#define SPI_API_GETVERSIONINFO 0x09U
/** Value of API function SyncTransmit. */
#define SPI_API_SYNCTRANSMIT 0x0AU
/** Value of API function GetHWUnitStatus. */
#define SPI_API_GETHWUNITSTATUS 0x0BU
/** Value of API function Cancel. */
#define SPI_API_CANCEL 0x0CU
/** Value of API function SetAsyncMode. */
#define SPI_API_SETASYNCMODE 0x0DU
/** Value of API function MainFunctionHandling. */
#define SPI_API_MAINFUNCTION_HANDLING 0x10U
/** Value of API function Spi_GetBufferStatus. */
#define SPI_API_GETBUFFERSTATUS 0x41U
/** Value of API functions each interrupt and main function handling. */
#define SPI_API_HANDLER 0x42U
/** Value of API function Spi_Terminate. */
#define SPI_API_TERMINATE 0x43U
/** Value of API function Spi_ChangeOvsSetting. */
#define SPI_API_CHANGEOVSSETTING 0x44U

/* DET error codes [SPI004] */
/** \brief DET error value: function called with invalid Channel parameter */
#define SPI_E_PARAM_CHANNEL       0x0AU
/** \brief DET error value: function called with invalid Job parameter */
#define SPI_E_PARAM_JOB           0x0BU
/** \brief DET error value: function called with invalid Sequence parameter */
#define SPI_E_PARAM_SEQ           0x0CU
/** \brief DET error value: Length parameter exceeds maximum value */
#define SPI_E_PARAM_LENGTH        0x0DU
/** \brief DET error value: function called with invalid HWUnit parameter */
#define SPI_E_PARAM_UNIT          0x0EU
/** \brief DET error value: function called with a Null Pointer */
#define SPI_E_PARAM_POINTER       0x10U
/** \brief DET error value: function called in state SPI_UNINIT */
#define SPI_E_UNINIT              0x1AU
/** \brief DET error value: sequence has shared job in transmit queue */
#define SPI_E_SEQ_PENDING         0x2AU
/** \brief DET error value: sequence has shared job in transmit queue */
#define SPI_E_SEQ_IN_PROCESS      0x3AU
/** \brief DET error value: Spi_Init called although already initialized*/
#define SPI_E_ALREADY_INITIALIZED 0x4AU

/** \brief DET error value: invalid hardware for this transmit method
 **
 ** - generated during transmission if Spi_SyncTransmit was called with a
 **   sequence containing a job for a non-synchronous hardware
 **
 ** - generated during transmission if Spi_AsyncTransmit was called with a
 **   sequence containing a job for a synchronous hardware
 **
 ** in both cases, the invalid sequence is not transmitted
 ** */
#define SPI_E_INVALID_HW          0x52U

/* Error code for error callout in case of hardware errors during 
   transmission. */
#define SPI_E_HW_ERROR            0x53U

/* --- API IDs required for error callout --- */
/* Functions called from ISR context. */
#define SPI_API_ISR 0x40U

/* Error code for error callout in case of bad parameter at calling 
   Spi_SetAsyncMode */
#define SPI_E_PARAM_BAD_MODE      0x54U

/* Error code for error callout in case of transmit a job with the specified 
   channel */
#define SPI_E_BUSY                0x55U

/** \brief DET error value: function called with invalid ohter parameter */
#define SPI_E_PARAM_OTHER         0x56U

/** \brief DET error value: function called with incorrect config pointer */
#define SPI_E_PARAM_CONFIG        0x57U

/** \brief level delivered of Spi Handler driver module */
/** Level delivered of Spi handler driver module.
 Level 0: Simple Synchronous. */
#define SPI_LEVEL_DELIVERED_0 0U
/** Level delivered of Spi handler driver module.
 Level 1: Basic Asynchronous. */
#define SPI_LEVEL_DELIVERED_1 1U
/** Level delivered of Spi handler driver module.
 Level 2: Enhanced (Synchronous/Asynchronous). */
#define SPI_LEVEL_DELIVERED_2 2U

/** Defines of HW error detection */
#define SPI_FAILED 0x02U

/** Defines return value of not OK */
#define SPI_NOT_OK 0x00U

/** Defines return value of OK */
#define SPI_OK 0x01U

/** Defines of FALSE */
#define SPI_FALSE 0U

/** True definition for use in Spi module */
#define SPI_TRUE 1U

/** Definition of asynchronous transmission */
#define SPI_HWUNIT_ASYNC ((Spi_HWUnitSyncType) 0U)

/** Definition of synchronous transmission */
#define SPI_HWUNIT_SYNC ((Spi_HWUnitSyncType) 1U)

/*==================[type definitions]======================================*/
/** \brief typedef  Spi_DataBufferType
 **
 ** Type of application data buffer elements.
 */
typedef uint8 Spi_DataBufferType;

/** \brief typedef  Spi_NumberOfDataType
 **
 ** Type for defining the number of data elements of the type 
 ** Spi_DataBufferType to sendand / or receive by Channel
 */
typedef uint16 Spi_NumberOfDataType;

/** \brief typedef  Spi_HWUnitType
 **
 ** Specifies the identification (ID) for a SPI Hardware microcontroller 
 ** peripheral(unit).
 */
typedef uint8 Spi_HWUnitType;

/** \brief typedef  Spi_ExtDeviceType
 **
 ** Specifies the identification (ID) for a SPI external device.
 */
typedef uint8 Spi_ExtDeviceType;

/** \brief typedef  Spi_ChannelType
 **
 ** ID or Index of channel
 */
typedef uint8 Spi_ChannelType;

/** \brief typedef  Spi_JobType
 **
 ** This type is used to store a job ID.
 */
typedef uint16 Spi_JobType;

/** \brief typedef  Spi_SequenceType
 **
 ** This type is used to store a sequence ID.
 */
typedef uint8 Spi_SequenceType;

/** \brief typedef  Spi_ErrorType
 **
 ** Type of error code id.
 */
typedef uint8 Spi_ErrorType;

/** \brief typedef  Spi_ReturnType
 **
 ** Defines type of result.
 */
typedef uint8 Spi_ReturnType;

/** \brief typedef  Spi_OvsValueType
 **
 ** Defines type of serial interface bit period oversampling factor.
 */
typedef uint8 Spi_OvsValueType;

/** \brief enum Spi_StatusType
 **
 ** This type defines a range of specific status for SPI Handler/Driver.
 */
typedef enum spi_statustype_enum
{
  SPI_UNINIT,
  SPI_IDLE,
  SPI_BUSY
} Spi_StatusType;

/** \brief enum Spi_JobResultType
 **
 ** This type defines a range of specific Jobs status for SPI Handler/Driver.
 */
typedef enum spi_jobresulttype_enum
{
  SPI_JOB_OK,
  SPI_JOB_PENDING,
  SPI_JOB_FAILED,
  SPI_JOB_QUEUED
} Spi_JobResultType;

/** \brief enum Spi_SeqResultType
 **
 ** This type defines a range of specific Sequences status for SPI 
 ** HandlerDriver.
 */
typedef enum spi_seqresulttype_enum
{
  SPI_SEQ_OK,
  SPI_SEQ_PENDING,
  SPI_SEQ_FAILED,
  SPI_SEQ_CANCELED
} Spi_SeqResultType;

/** \brief enum Spi_AsyncModeType
 **
 ** Specifies the asynchronous mechanism mode for SPI busses handled 
 ** asynchronously in LEVEL 2.
 */
typedef enum spi_asyncmodetype_enum
{
  SPI_POLLING_MODE,
  SPI_INTERRUPT_MODE
} Spi_AsyncModeType;


/** \brief Internal type used instead of Spi_Leveltype (for lib code)
 **
 ** must be able to hold values STD_HIGH and STD_LOW
 ** */
typedef uint8 Spi_LevelType;

/** \brief typedef  Spi_DioChannelType
 **
 ** Internal type used instead of Dio_ChannelType
 */
typedef uint16 Spi_DioChannelType;

/** \brief typedef  Spi_HWUnitSyncType
 **
 ** This type is used to specify which channel is used for asynchronous or
 ** synchronous transmission.
 */
typedef uint8 Spi_HWUnitSyncType;

/** \brief typedef  Spi_SequenceIndexType
 **
 ** Sequence index in "transmit queue" array.
 */
typedef uint8 Spi_SequenceIndexType;

/** \brief typedef  Spi_JobIndexType
 **
 ** Index in "Channel Linking" array.
 */
typedef uint16 Spi_JobIndexType;

/** \brief typedef  Spi_ChannelIndexType
 **
 ** Index in "Channel Linking" array.
 */
typedef uint8 Spi_ChannelIndexType;

/** \brief typedef  Spi_DmaDescAssignIndexType
 **
 ** Index in "Dma Descriptor Linking" array. 
 */
typedef uint32 Spi_DmaDescAssignIndexType;

/** \brief Spi_VoidFunctionType
 **
 ** This type defines a function pointer to a void function with no parameters.
 */  
typedef P2FUNC(void, TYPEDEF, Spi_VoidFunctionType) (void);

/** \brief enum Spi_JobWidthType
 **
 ** Specifies the Job type indicating the channel data width 
 ** constituting the job.
 */
typedef enum spi_jobwidthtype_enum
{
  SPI_SINGLE_WIDTH,
  SPI_MULTI_WIDTH
} Spi_JobWidthType;


/** \brief struct Spi_ChannelConfigType
 **
 ** Specifies the configuration for a Channel.
 */
typedef struct spi_channelconfigtype_struct
{
  /* RX buffer pointer data for re-initialize. */
  P2VAR(Spi_DataBufferType, TYPEDEF, TYPEDEF) DefaultRxBufferPtr;
  /* TX buffer pointer data for re-initialize. */
  P2VAR(Spi_DataBufferType, TYPEDEF, TYPEDEF) DefaultTxBufferPtr;
  /* The default data to be transmitted when the pointer passed to 
     Spi_WriteIB (for internal buffer) or to Spi_SetupEB (for external 
     buffer) is NULL. */
  CONST(uint32, TYPEDEF) DefaultData;
  /* Maximum size (in number of elements) of data buffers. */
  CONST(Spi_NumberOfDataType, TYPEDEF) BufferSize;
  /* Range: SPI_CHANNEL_TYPE_EB, SPI_CHANNEL_TYPE_IB
   Depends on the parameter SPI_CHANNEL_BUFFERS_ALLOWED. */
  CONST(uint8, TYPEDEF) ChannelType;
  /* Range: SPI_TRANSFER_START_LSB, SPI_TRANSFER_START_MSB
   This parameter defined the first starting bit for transmission. */
  CONST(uint8, TYPEDEF) TransferStart;
  /* Range: see properties file
   Width of a transmitted data unit. */
  CONST(uint8, TYPEDEF) DataWidth;
  /* Bit mask defining the data width of a transmitted data unit (see HW 
     manual). */
  CONST(uint8, TYPEDEF) DataWidthBitMask;
  /* Required alignment check */
  CONST(boolean, TYPEDEF) AlignedBuffer;
  /* Channel Id */
  CONST(Spi_ChannelType, TYPEDEF) ChannelId;
  /* Dimensionless array containing all pointers to DMA Descriptors register for RX */
  P2VAR(CONSTP2VAR(volatile Spi_DmaDescriptorRegsType, TYPEDEF, TYPEDEF), TYPEDEF, SPI_VAR_NO_INIT) 
    DmaRxDescriptorRegsPtr;
  /* Dimensionless array containing all pointers to DMA Descriptors register for TX*/
  P2VAR(CONSTP2VAR(volatile Spi_DmaDescriptorRegsType, TYPEDEF, TYPEDEF), TYPEDEF, SPI_VAR_NO_INIT) 
    DmaTxDescriptorRegsPtr;
  /* Number of assigned channels in all job*/
  CONST(Spi_DmaDescAssignIndexType, TYPEDEF) DmaDescriptorCount;
} Spi_ChannelConfigType;

/** \brief struct Spi_ExternalDeviceConfigType
 **
 ** Specifies the configuration for an External Device.
 */
typedef struct spi_externaldeviceconfigtype_struct
{
  /* DIO channel used for identifying the chip select (CS) allocated to 
     this job. */
  CONST(Spi_DioChannelType, TYPEDEF) CsIdentifier;
  /* Enables the chip select handling functions. */
  CONST(boolean, TYPEDEF) EnableCs;
  /* Active polarity of the chip select. */
  CONST(Spi_LevelType, TYPEDEF) CsPolarity;
  /* OVS register setting for this job. */
  CONST(uint8, TYPEDEF) OVSSetting;
  /* Defines the SPI shift clock idle level. */
  CONST(Spi_LevelType, TYPEDEF) ShiftClockIdleLevel;
  /* Range: SPI_DATA_SHIFT_EDGE_LEADING, SPI_DATA_SHIFT_EDGE_TRAILING
   Defines the data shift edge. */
  CONST(uint8, TYPEDEF) DataShiftEdge;
  /* Setup delay timing. */
  CONST(uint8, TYPEDEF) SetupDelay;
  /* Hold delay timing. */
  CONST(uint8, TYPEDEF) HoldDelay;
  /* Hardware unit. */
  CONST(Spi_HWUnitType, TYPEDEF) HwUnit;
  /* Using fifo or not. */
  CONST(boolean, TYPEDEF) UseFifo;
  /* Using DMA or not. */
  CONST(boolean, TYPEDEF) UseDma;
  /* Range: SPI_CS_VIA_GPIO, SPI_CS_VIA_PERIPHERAL_ENGINE
     Defines how the chip select handling is done.
     NOTE: Functionality dependent on SpiEnableCs. */
  CONST(uint8, TYPEDEF) CsSelection;
  /* Indicates force overwrite control registers. */
  CONST(boolean, TYPEDEF) FroceOverwrite;
  /* Pointer to active OVS value */
  CONSTP2VAR(Spi_OvsValueType, TYPEDEF, TYPEDEF) ActiveOvsPtr;
} Spi_ExternalDeviceConfigType;

/** \brief struct Spi_JobConfigType
 **
 ** Specifies the configuration for a Job.
 */
typedef struct spi_jobconfigtype_struct
{
  /* Pointer to an un-dimensioned array containing a list of channels,
     sorted in order of transmission. */
  CONSTP2CONST(Spi_ChannelType, TYPEDEF, TYPEDEF) ChannelListPtr;
  /* Job end notification. */
#ifdef STACK_ANALYSIS_ENABLE
  CONST(Spi_VoidFunctionType, TYPEDEF) JobEndNotification;
#else
  P2FUNC(void, TYPEDEF, JobEndNotification) (void);
#endif
  /* Pointer to external device */
  CONSTP2CONST(Spi_ExternalDeviceConfigType, TYPEDEF, TYPEDEF) ExternalDevicePtr;

  /* Job Id */
  CONST(Spi_JobType, TYPEDEF) JobId;
  /* Priority of this job. */
  CONST(uint8, TYPEDEF) JobPriority;
  /* Number of channels in this job. */
  CONST(Spi_ChannelType, TYPEDEF) ChannelCount;
  /* Asynchronous or synchronous transmission. */
  CONST(Spi_HWUnitSyncType, TYPEDEF) HwUnitSync;
  /* Multi data width job or Single data width job */
  CONST(Spi_JobWidthType, TYPEDEF) WidthType;
  /* Pointer to DMA Rx descriptor array under the job */
  CONSTP2VAR(volatile Spi_DmaDescriptorRegsType, TYPEDEF, SPI_VAR_NO_INIT) DmaRxDescriptorRegsPtr;
  /* Pointer to DMA Tx descriptor array under the job */
  CONSTP2VAR(volatile Spi_DmaDescriptorRegsType, TYPEDEF, SPI_VAR_NO_INIT) DmaTxDescriptorRegsPtr;
} Spi_JobConfigType;

/** \brief struct Spi_SequenceConfigType
 **
 ** Specifies the configuration for a sequence of jobs.
 */
typedef struct spi_sequenceconfigtype_struct
{
  /* Dimensionless array containing all jobs of the sequence. */
  P2CONST(Spi_JobType, TYPEDEF, TYPEDEF) JobListPtr;
  /* This parameter is a reference to a notification function. */
  CONST(Spi_VoidFunctionType, TYPEDEF) SeqEndNotification;
  /* List of sequences that share the HW unit. */
  P2CONST(Spi_SequenceType, TYPEDEF, TYPEDEF) SharedHwUnitSeqListPtr;
  /* Number of jobs in this sequence. */
  CONST(Spi_JobType, TYPEDEF) JobCount;
  /* Number of sequences that share the HW unit. */
  CONST(Spi_SequenceIndexType, TYPEDEF) SharedHwUnitSeqCount;
  /* This parameter allows or not this sequence to be suspended by 
     another one.
     NOTE: Parameter SPI_INTERRUPTIBLE_SEQ_ALLOWED must be configured as 
     ON. */
  CONST(boolean, TYPEDEF) InterruptibleSequence;
  /* Sequence Id */
  CONST(Spi_SequenceType, TYPEDEF) SequenceId;
} Spi_SequenceConfigType;

/** \brief Structure holding information about hardware status
 **
 ** hardware status information used at "driver" layer
 **/
typedef struct spi_driverhwinfotype_struct
{
  /*! Index of currently transmitted job. */
  VAR(Spi_JobType, TYPEDEF) Job;
  /*! currently transmitted sequence. */
  VAR(Spi_SequenceType, TYPEDEF) Sequence;
} Spi_DriverHwInfoType;

/** \brief struct Spi_SequenceInfoType
 **
 ** This type of the external data structure shall contain the modifiable
 ** information of a sequence.
 */
typedef struct spi_sequenceinfotype_struct
{
  /*! Last result of this sequence. */
  VAR(Spi_SeqResultType, TYPEDEF) Result;
  /*! Index of currently transmitted job in job list. */
  VAR(Spi_JobIndexType, TYPEDEF) CurJobIndex;
} Spi_SequenceInfoType;

/** \brief struct Spi_JobInfoType
 **
 ** This type of the external data structure shall contain the modifiable
 ** information of a job.
 */
typedef struct spi_jobinfotype_struct
{
  /*! Last result of this job. */
  VAR(Spi_JobResultType, TYPEDEF) Result;
  /*! Determines whether job is queued or not. */
  VAR(boolean, TYPEDEF) CurIsQueued;
  /*! Index of currently RX transmitted channel in channel list */
  VAR(Spi_ChannelIndexType, TYPEDEF) CurRxChannelIndex;
  /*! Index of currently TX transmitted channel in channel list */
  VAR(Spi_ChannelIndexType, TYPEDEF) CurTxChannelIndex;
} Spi_JobInfoType;

/** \brief struct Spi_ChannelInfoType
 **
 ** This type of the external data structure shall contain the modifiable
 ** information of a channel.
 */
typedef struct spi_channelinfotype_struct
{
  /*! RX buffer pointer. */
  P2VAR(Spi_DataBufferType, TYPEDEF, TYPEDEF) RxBufferPtr;
  /*! TX buffer pointer. */
  P2VAR(Spi_DataBufferType, TYPEDEF, TYPEDEF) TxBufferPtr;
  /*! Size of data buffers in data elements. */
  VAR(Spi_NumberOfDataType, TYPEDEF) BufferSize;
  /* Position in tx buffer. */
  VAR(Spi_NumberOfDataType, TYPEDEF) BufferPosStoredForSend;
  /* Position in tx buffer. */
  VAR(Spi_NumberOfDataType, TYPEDEF) BufferPosReceived;
} Spi_ChannelInfoType;

/** the type of the external data structure shall contain the modifiable 
  information of a HW unit */
typedef struct spi_hwinfotype_struct
{
  /* Status of HW unit */
  VAR(Spi_StatusType, TYPEDEF) Status;
  /* Position in tx buffer. This value is read by Spi_GetBufferStatus resp. 
    Spi_Internal_GetBufferStatus. */
  VAR(Spi_NumberOfDataType, TYPEDEF) BufferPosReceived;
  /* Transmission status of HW unit. */
  VAR(uint8, TYPEDEF) RxStatus;
  /* Transmission status of HW unit. */
  VAR(uint8, TYPEDEF) TxStatus;
  /* Pointer to Current external devuce */
  P2CONST(Spi_ExternalDeviceConfigType, TYPEDEF, TYPEDEF) ExtDevicePtr;
} Spi_HwInfoType;

/** \brief struct Spi_InfoType
 **
 ** This type of the external data structure shall contain the pointer 
 ** to each information indexes. 
 **/
typedef struct spi_infotype_struct
{
  /*! Pointer to hardware status information used at "driver" layer. */
  P2VAR(Spi_DriverHwInfoType, TYPEDEF, TYPEDEF) DriverHwInfoListPtr;
  /*! Pointer to information of all sequences. */
  P2VAR(Spi_SequenceInfoType, TYPEDEF, TYPEDEF) SequenceInfoListPtr;
  /*! Pointer to information of all jobs. */
  P2VAR(Spi_JobInfoType, TYPEDEF, TYPEDEF) JobInfoListPtr;
  /*! Pointer to information of all channels. */
  P2VAR(Spi_ChannelInfoType, TYPEDEF, TYPEDEF) ChannelInfoListPtr;
  /*! Pointer to information of all HW units. */
  P2VAR(Spi_HwInfoType, TYPEDEF, TYPEDEF) HwInfoListPtr;
} Spi_InfoType;
 
 
/** \brief struct Spi_ConfigType
 **
 ** This type of the external data structure shall contain the initialization
 ** datafor the SPI Handler/Driver.
 */
typedef struct spi_configtype_struct
{
  /* Configuration set ID */
  CONST(uint32, TYPEDEF) ConfigId;
 
  /* timeout value to transmit or receive synchronously */
  CONST(uint32, TYPEDEF) SynctransmitTimeout;
  /* timeout value to become active */
  CONST(uint32, TYPEDEF) CsActiveTimeout;
  /* timeout value to become inactive */
  CONST(uint32, TYPEDEF) CsInactiveTimeout;
 
  /* Dimensionless array containing all configured jobs. */
  P2CONST(Spi_JobConfigType, TYPEDEF, TYPEDEF) JobConfigListPtr;
  /* Dimensionless array containing all configured sequences. */
  P2CONST(Spi_SequenceConfigType, TYPEDEF, TYPEDEF) SequencesConfigListPtr;
  /* Dimensionless array containing all configured channels. */
  P2CONST(Spi_ChannelConfigType, TYPEDEF, TYPEDEF) ChannelConfigListPtr;
  /* Dimensionless array containing all configured external devices. */
  P2CONST(Spi_ExternalDeviceConfigType, TYPEDEF, TYPEDEF) ExternalDevicesPtr;

  /* Dimensionless array containing all pointers to SCBs register */ 
  P2VAR(CONSTP2VAR(volatile Spi_SCBRegsType, TYPEDEF, TYPEDEF), TYPEDEF, TYPEDEF) ScbRegsPtr;
  /* Dimensionless array containing all pointers to DMA Channels register 
    for RX */ 
  P2VAR(CONSTP2VAR(volatile Spi_DmaChannelRegsType, TYPEDEF, TYPEDEF), TYPEDEF, TYPEDEF) DmaRxChannelRegsPtr;
  /* Dimensionless array containing all pointers to DMA Channels register 
    for TX*/ 
  P2VAR(CONSTP2VAR(volatile Spi_DmaChannelRegsType, TYPEDEF, TYPEDEF), TYPEDEF, TYPEDEF) DmaTxChannelRegsPtr;
 
  /* Dimensionless array containing all transmission queue */
  P2VAR(Spi_SequenceType, TYPEDEF, TYPEDEF) TransmitQueuePtr;
   
  /* Number of configured jobs. */
  CONST(Spi_JobIndexType, TYPEDEF) JobCount;
  /* Number of configured sequences. */
  CONST(Spi_SequenceIndexType, TYPEDEF) SequenceCount;
  /* Number of configured channels. */
  CONST(Spi_ChannelIndexType, TYPEDEF) ChannelCount;
  /* Number of configured external devices. */
  CONST(uint8, TYPEDEF) ExternalDeviceCount;
  /* Number of configured SCB units. */
  CONST(uint8, TYPEDEF) HwUnitCount;
} Spi_ConfigType;
 

/*==================[external function declarations]========================*/

#endif /*!defined(SPI_TYPES_H_INCLUDED)*/

/*==================[end of file]===========================================*/
