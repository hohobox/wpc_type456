/** \brief AUTOSAR SPI Driver
 **
 ** This file declares the Spi Job functions.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef SPI_JOB_H_INCLUDED
#define SPI_JOB_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Spi_Internal_Types.h>

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define SPI_START_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/** \brief Spi_Job_HandlerChannelFinished
 **
 ** Check all channels in the job are finished 
 ** and handles the completion of the job transmission.
 **
 ** \return  SPI_OK:     Finished the specified Job transmission.
 **          SPI_NOT_OK: Not finished the specified Job transmission.
 **
 ** \param [in]  Job              Id of Job.
 ** \param [in]  EventStatus      Event status (passed or failed).
 ** \param [out] NextChannelPtr   Pointer to Next transmit Channel.
 **
 */
extern FUNC( Spi_ReturnType, SPI_CODE ) Spi_Job_HandlerChannelFinished
(
  VAR( Spi_JobType, AUTOMATIC ) Job,
  VAR( uint8, AUTOMATIC ) EventStatus,
  P2VAR( Spi_ChannelType, AUTOMATIC, AUTOMATIC ) NextChannelPtr
);

/** \brief Spi_Job_HandlerChannelFinishedDma
 **
 ** Handles the completion of the job transmission.
 **
 ** \return  SPI_OK:     Finished the specified Job transmission.
 **
 ** \param [in]  Job              Id of Job.
 ** \param [in]  EventStatus      Event status (passed or failed).
 **
 */
extern FUNC( Spi_ReturnType, SPI_CODE ) Spi_Job_HandlerChannelFinishedDma
(
  VAR( Spi_JobType, AUTOMATIC ) Job,
  VAR( uint8, AUTOMATIC ) EventStatus
);

/** \brief Spi_Job_TransmitFirstChannel
 **
 ** Starts the first Channel that belong to the specified job.
 **
 ** \return None.
 ** \param [in] Job   Id of Job.
 **
 */
extern FUNC( void, SPI_CODE ) Spi_Job_TransmitFirstChannel
(
  VAR( Spi_JobType, AUTOMATIC ) Job
);

/** \brief Spi_Job_TransmitNextChannel
 **
 ** Starts the next Channel that belong to the specified job.
 **
 ** \return None.
 ** \param [in] Job   Id of Job.
 ** \param [in] NextChannelId   Id of next transmit Channel.
 **
 */
extern FUNC( void, SPI_CODE ) Spi_Job_TransmitNextChannel
(
  VAR( Spi_JobType, AUTOMATIC ) Job,
  VAR( Spi_ChannelType, AUTOMATIC ) NextChannelId
);

/** \brief Spi_Job_TransmitAllChannels
 **
 ** Starts the all Channels that belong to the specified Job.
 **
 ** \return None.
 ** \param [in] Job   Id of Job.
 ** \param [inout] EventStatusPtr   Pointer to event status.
 **
 */
extern FUNC( void, SPI_CODE ) Spi_Job_TransmitAllChannels
(
  VAR( Spi_JobType, AUTOMATIC ) Job,
  P2VAR( uint8, AUTOMATIC, AUTOMATIC ) EventStatusPtr
);

/** \brief Spi_Job_GetIsQueued
 **
 ** Returns whether job is queued or not.
 **
 ** \return Determines whether job is queued or not.
 ** \param [in] Job   Id of Job.
 **
 */
extern FUNC( boolean, SPI_CODE ) Spi_Job_GetIsQueued
(
  VAR( Spi_JobType, AUTOMATIC ) Job
);

/** \brief Spi_Job_SetIsQueued
 **
 ** Sets the job is queued.
 **
 ** \return None.
 ** \param [in] Job   Id of Job.
 ** \param [in] IsQueue   Determines whether job is queued or not.
 **
 */
extern FUNC( void, SPI_CODE ) Spi_Job_SetIsQueued
(
  VAR( Spi_JobType, AUTOMATIC ) Job,
  VAR( boolean, TYPEDEF ) IsQueue
);

/** \brief Spi_Job_GetJobResult
 **
 ** Returns the Job result.
 **
 ** \return Result of Job.
 ** \param [in] Job   Id of Job.
 **
 */
extern FUNC( Spi_JobResultType, SPI_CODE ) Spi_Job_GetJobResult
(
  VAR( Spi_JobType, AUTOMATIC ) Job
);

/** \brief Spi_Job_InitAllJobs
 **
 ** Initializes the all Jobs.
 **
 ** \return None.
 **
 */
extern FUNC( void, SPI_CODE ) Spi_Job_InitAllJobs(void);

/** \brief Spi_Job_CheckAsyncJobStatus
 **
 ** Checks the status of the asynchronous jobs.
 **
 ** \return SPI_OK: All asynchronous jobs are IDLE.
 **         SPI_NOT_OK: Any of asynchronous job is busy.
 **
 */
extern FUNC( Spi_ReturnType, SPI_CODE ) Spi_Job_CheckAsyncJobStatus(void);

/** \brief Spi_Job_GetCurrentChannel
 **
 ** Returns the current channel in job.
 **
 ** \return Id of current channel.
 ** \param [in] Job     Id of Job.
 ** \param [in] Factor  Tx or Rx of transmission.
 **
 */
extern FUNC( Spi_ChannelType, SPI_CODE ) Spi_Job_GetCurrentChannel
(
  VAR( Spi_JobType, AUTOMATIC ) Job,
  VAR (Spi_HwFactorType, AUTOMATIC ) Factor
);

/** \brief Spi_Job_SetChannelIndex
 **
 ** Sets the channel index number in job.
 **
 ** \return None.
 ** \param [in] Job   Id of Job.
 ** \param [in] ChannelIndex   Index of channel in the relevant job.
 ** \param [in] Factor  Tx or Rx of transmission.
 **
 */
extern FUNC( void, SPI_CODE ) Spi_Job_SetChannelIndex
(
  VAR( Spi_JobType, AUTOMATIC ) Job,
  VAR( Spi_ChannelIndexType, AUTOMATIC ) ChannelIndex,
  VAR (Spi_HwFactorType, AUTOMATIC ) Factor
);

/** \brief Spi_Job_GetChannelIndex
 **
 ** Returns the channel index number in job.
 **
 ** \return Index of channel in the relevant job.
 ** \param [in] Job   Id of Job.
 ** \param [in] Factor  Tx or Rx of transmission.
 **
 */
extern FUNC( Spi_ChannelIndexType, SPI_CODE) Spi_Job_GetChannelIndex
(
  VAR( Spi_JobType, AUTOMATIC ) Job, 
  VAR (Spi_HwFactorType, AUTOMATIC ) Factor
);

#define SPI_STOP_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/*==================[external function declarations]========================*/


/*==================[internal data]=========================================*/

#endif /*!defined(SPI_JOB_H_INCLUDED)*/

/*==================[end of file]===========================================*/
