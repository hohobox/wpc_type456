/** \brief AUTOSAR SPI Driver
 **
 ** This file declares the common functions.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef SPI_COMMON_H_INCLUDED
#define SPI_COMMON_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Std_Types.h>
#include <Spi.h>
#include <Spi_Internal_Types.h>
#include <Spi_Common_Der.h>

/*==================[macros]================================================*/


/*==================[type definitions]======================================*/



/*==================[external function declarations]========================*/

#define SPI_START_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/** \brief Spi_Com_DetReportError
 **
 ** Wrapper function to call error call out and DET according to configuration.
 **
 ** \return None.
 ** \param [in] ApiId   Id of Api.
 ** \param [in] ErrorId   Id of error code.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_DetReportError
(
  VAR(uint8, AUTOMATIC) ApiId,
  VAR(uint8, AUTOMATIC) ErrorId
);

/** \brief Spi_Com_DemReportEvent
 **
 ** Wrapper function to call error call out and DEM according to configuration.
 **
 ** \return None.
 ** \param [in] ApiId   Id of Api.
 ** \param [in] EventId   Id of event code.
 ** \param [in] EventStatus   Status of event.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_DemReportEvent
(
  VAR(uint8, AUTOMATIC) ApiId,
  VAR(uint8, AUTOMATIC) EventId,
  VAR(uint8, AUTOMATIC) EventStatus
);

/** \brief Spi_Com_SchMEnterCriticalSection
 **
 ** Starts a critical section.
 ** Wrapper to SchM module.
 **
 ** \return None.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_SchMEnterCriticalSection(void);

/** \brief Spi_Com_SchMExitCriticalSection
 **
 ** Ends a critical section that was previously started with
 ** Spi_EnterCriticalSection.
 ** Wrapper to SchM module.
 **
 ** \return None.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_SchMExitCriticalSection(void);

/** \brief Spi_Com_WriteDioChannel
 **
 ** Wrapper to function Dio_WriteChannel.
 **
 ** \return None.
 ** \param [in] DioChannelId   Channel id of Dio.
 ** \param [in] Level   Pin level of Dio.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_WriteDioChannel
(
  VAR(Spi_DioChannelType, AUTOMATIC) DioChannelId,
  VAR(Spi_LevelType, AUTOMATIC) Level
);

/** \brief Spi_Com_MemCopy
 **
 ** Copies 'Size' bytes from 'SourcePtr' to 'DestinationPtr'.
 **
 ** \return None.
 ** \param [out] DestinationPtr   Pointer to destination address.
 ** \param [in] SourcePtr   Pointer to source address.
 ** \param [in] Size   Data size in bytes.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_MemCopy
(
  P2VAR(uint8, AUTOMATIC, AUTOMATIC) DestinationPtr,
  P2CONST(uint8, AUTOMATIC, AUTOMATIC) SourcePtr,
  VAR(uint16, AUTOMATIC) Size
);

/** \brief Spi_Com_MemSet
 **
 ** Fills the buffer (DestinationPtr, Size) by the block defined by Pattern 
 ** and PatternSize.
 **
 ** \return None.
 ** \param [out] DestinationPtr   Pointer to destination address.
 ** \param [in] Size   Number of bytes to be written.
 ** \param [in] PatternPtr   Pointer to data pattern to be written.
 ** \param [in] PatternSize   Size of pattern data in bytes.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_MemSet
(
  P2VAR(uint8, AUTOMATIC, AUTOMATIC) DestinationPtr,
  VAR(uint16, AUTOMATIC) Size,
  P2CONST(uint8, AUTOMATIC, AUTOMATIC) PatternPtr,
  VAR(uint8, AUTOMATIC) PatternSize
);

/** \brief Spi_Com_GetTransmitQueue
 **
 ** Returns the start address of the transmission queue.
 **
 ** \return Pointer to start address of the transmission queue.
 **
 */
extern FUNC_P2VAR(Spi_SequenceType, AUTOMATIC, SPI_CODE) Spi_Com_GetTransmitQueue(void);

/** \brief Spi_Com_GetLevelDelivered
 **
 ** Returns the level delivered.
 **
 ** \return Level delivered.
 **
 */
extern FUNC(uint8, SPI_CODE) Spi_Com_GetLevelDelivered(void);

/** \brief Spi_Com_GetMaxNrOfHwUnits
 **
 ** Returns the maximum number of HW unit.
 **
 ** \return Maximum number of HW unit.
 **
 */
extern FUNC(Spi_HWUnitType, SPI_CODE) Spi_Com_GetMaxNrOfHwUnits(void);

/** \brief Spi_Com_SetCurrentSequence
 **
 ** Sets a sequence id of the currently running.
 **
 ** \return None.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [in] Sequence   Id of Sequence.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Com_SetCurrentSequence
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_SequenceType, AUTOMATIC) Sequence
);

/** \brief Spi_Com_GetDerivateFIFOSize
 **
 ** Returns the maximum FIFO size in byte.
 **
 ** \return Maximum FIFO size in byte.
 **
 */
extern FUNC(uint8, SPI_CODE) Spi_Com_GetDerivateFIFOSize(void);

#define SPI_STOP_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/*==================[internal constants]====================================*/


/*==================[internal data]=========================================*/

#endif /*!defined(SPI_COMMON_H_INCLUDED)*/

/*==================[end of file]===========================================*/
