/** \brief AUTOSAR SPI Driver
 **
 ** This file declares the DMA functions for Spi module.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef SPI_DMA_H_INCLUDED
#define SPI_DMA_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Spi_Internal_Types.h>

/*==================[macros]================================================*/
/* \brief SCB FIFO ID */
#define SPI_DMA_SCB_FIFO_ID_RX  0U    /* for RX */
#define SPI_DMA_SCB_FIFO_ID_TX  1U    /* for TX */
#define SPI_DMA_SCB_FIFO_ID     2U    /* Number of elements */

/*****************************/
/* Interrupt case of DMA */
/* \brief INTR_CAUSE value */
#define SPI_DMA_INTR_CAUSE_NONE                 ( (uint32) 0x00U )
#define SPI_DMA_INTR_CAUSE_COMPLETION           ( (uint32) 0x01U )
#define SPI_DMA_INTR_CAUSE_SRC_BUS_ERROR        ( (uint32) 0x02U )
#define SPI_DMA_INTR_CAUSE_DST_BUS_ERROR        ( (uint32) 0x03U )
#define SPI_DMA_INTR_CAUSE_SRC_MISAL            ( (uint32) 0x04U )
#define SPI_DMA_INTR_CAUSE_DST_MISAL            ( (uint32) 0x05U )
#define SPI_DMA_INTR_CAUSE_CUR_PTR_NULL         ( (uint32) 0x06U )
#define SPI_DMA_INTR_CAUSE_ACTIVE_CH_DISABLED   ( (uint32) 0x07U )
#define SPI_DMA_INTR_CAUSE_DESCR_BUS_ERROR      ( (uint32) 0x08U )

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define SPI_START_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/** \brief Spi_Dma_CheckFinishedHwUnit
 **
 ** Checks whether the transmission of DMA is finished or not.
 **
 ** \return SPI_OK:     Transmission has been finished.
 **         SPI_NOT_OK: Transmission has not been finished.
 **         SPI_FAILED: Detected an error.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [in] Factor   Specify the factor of the transmission or reception.
 **
 */
extern FUNC(uint8, SPI_CODE) Spi_Dma_CheckFinishedHwUnit
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_HwFactorType, AUTOMATIC) Factor
);

/** \brief Spi_Dma_SetupHwUnit
 **
 ** Sets the DMA unit to start transmission.
 **
 ** \return None.
 ** \param [in] Job      Id of Job.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_SetupHwUnit
(
  VAR(Spi_JobType, AUTOMATIC) Job
);

/** \brief Spi_Dma_StartHwUnit
 **
 ** Starts the DMA transfer.
 **
 ** \return None.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [in] InterruptEnable      Flag of interrupt enable
 **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_StartHwUnit
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(boolean, AUTOMATIC) InterruptEnable
);

/** \brief Spi_Dma_StopHwUnit
 **
 ** Sets the DMA unit to stop transmission.
 **
 ** \return None.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [in] Factor   Specify the factor of the transmission or reception.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_StopHwUnit
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_HwFactorType, AUTOMATIC) Factor
);

/** \brief Spi_Dma_DeInit
 **
 ** De-initializes the DMA channel.
 **
 ** \return None.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [in] Factor   Specify the factor of the transmission or reception.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_DeInit
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_HwFactorType, AUTOMATIC) Factor
);

/** \brief Spi_Dma_DeInitDescriptor
 **
 ** De-initializes the DMA Descriptor.
 **
 ** \return None.
 ** \param [in] Job      Id of Job.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_DeInitDescriptor
(
  VAR(Spi_JobType, AUTOMATIC) Job
);

/** \brief Spi_Dma_Init
 **
 ** Initializes the DMA channel.
 **
 ** \return None.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [in] Factor   Specify the factor of the transmission or reception.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_Init
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_HwFactorType, AUTOMATIC) Factor
);

/** \brief Spi_Dma_InitDescriptor
 **
 ** Initialize descriptor for channel.
 **
 ** \return None.
 ** \param [in] Job Id of Job.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_InitDescriptor
(
  VAR(Spi_JobType, AUTOMATIC) Job
);

/** \brief Spi_Dma_UpdateDescriptor
 **
 ** Update descriptor for channel.
 **
 ** \return None.
 ** \param [in] Channel Channel ID
 ** \param [in] SrcDataBufferPtr Pointer to source data buffer
 ** \param [in] DesDataBufferPtr
 **             Pointer to destination data buffer in RAM
 ** \param [in] Length
 *              Length (in number of data elements) of the data to be  
 **             transmitted from SrcdataBufferPtr and/or received 
 **             from DesDataBufferPtr.
 **               Min.: 1
 **               Max.: Maximum of data specified at configuration
 **                     for this channel **
 */
extern FUNC(void, SPI_CODE) Spi_Dma_UpdateDescriptor
(
  VAR( Spi_ChannelType, AUTOMATIC ) Channel,
  P2CONST( Spi_DataBufferType, AUTOMATIC, AUTOMATIC ) SrcDataBufferPtr,
  P2VAR( Spi_DataBufferType, AUTOMATIC, AUTOMATIC ) DesDataBufferPtr,
  VAR( Spi_NumberOfDataType, AUTOMATIC ) Length
);

#define SPI_STOP_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>


#endif /*!defined(SPI_DMA_H_INCLUDED)*/


/*==================[end of file]===========================================*/
