/** \brief Pwm_Internal.h
 **
 ** This file define interface of internal architecture function of Pwm driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef PWM_INTERNAL_H_INCLUDED
#define PWM_INTERNAL_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Pwm_Types.h>

/*==================[macros]================================================*/
/* \brief PWM period maximum */
#define PWM_PERIOD_MAX                    ((uint32) 0xFFFEUL)

/* Invalid prescaler value */
#define PWM_INVALID_PRESCALER             ((uint8) 0xFFu)
/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define PWM_START_SEC_CODE_ASIL_B
#include <Pwm_MemMap.h>

/** \brief Pwm_CheckConfigPtr
 **
 ** This function checks the pointer of the configuration set.
 **
 ** \param [in]  ConfigPtr  Pointer of data stored configuration set information.
 **
 ** \return If parameter ConfigPtr is a valid config set pointer, 
 **         return PWM_TRUE, else return PWM_FALSE. 
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckConfigPtr
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigPtr
);

/** \brief Pwm_InitDelayTimer
 **
 ** Set all one-time settings for a delay timer.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_InitDelayTimer
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_DeInitDelayTimer
 **
 ** De-initialize delay timer.
 **
 ** \param [in] DelayPtr      Pointer to the delay timer configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_DeInitDelayTimer
(
  P2CONST(Pwm_DelayConfigType, AUTOMATIC, PWM_APPL_CONST) DelayPtr
);

/** \brief Pwm_InterruptHandler
 **
 ** Handles channel interrupt. This function is called only within the ISR.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 ** \param [in] ResourceIndex    Hardware resource index.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_InterruptHandler
(
  CONST(uint32, AUTOMATIC) BaseAddress,
  VAR(uint16, AUTOMATIC) ResourceIndex
);

/** \brief Pwm_EnterCriticalSection
 **
 ** This function enters exclusive area (call SchM module).
  */
extern FUNC(void, PWM_CODE) Pwm_EnterCriticalSection(void);

/** \brief Pwm_ExitCriticalSection
 **
 ** This function exits exclusive area (call SchM module).
 */
extern FUNC(void, PWM_CODE) Pwm_ExitCriticalSection(void);

/** \brief Pwm_DeInitInternal
 **
 ** Internal implementation of PWM driver deinitialization. 
 ** Stops and deactivates all channels, and reset all common variables.
 **
 ** \param [in] ConfigPtr  Pointer to configuration set.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_DeInitInternal
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigPtr
);

/** \brief Pwm_DisableNotificationInternal
 **
 ** Internal implementation: disabling of the PWM signal edge notification.
 **
 ** \param [in] ChannelPtr  Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_DisableNotificationInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_EnableNotificationInternal
 **
 ** Enabling of the PWM signal edge notification according to Notification parameter.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] Notification    Type of notification:
 **                             PWM_RISING_EDGE,
 **                             PWM_FALLING_EDGE or
 **                             PWM_BOTH_EDGES
 **
 */
extern FUNC(void, PWM_CODE) Pwm_EnableNotificationInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_EdgeNotificationType, AUTOMATIC) Notification
);

/** \brief Pwm_DisableTriggerInternal
 **
 ** Internal implementation: disabling of the output trigger.
 **
 ** \param [in] ChannelPtr  Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_DisableTriggerInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_EnableTriggerInternal
 **
 ** Internal implementation: enabling of output trigger.
 **
 ** \param [in] ChannelPtr   Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_EnableTriggerInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_GetOutputStateInternal
 **
 ** Read the internal state of the PWM output.
 **
 ** \param [in] ChannelPtr  Pointer to the channel configuration.
 **
 ** \return    Output state types
 **            PWM_HIGH: The PWM output state is high.
 **            PWM_LOW:  The PWM output state is low.
 **
 */
extern FUNC(Pwm_OutputStateType, PWM_CODE) Pwm_GetOutputStateInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_InitInternal
 **
 ** PWM driver initialization.
 **
 ** \param [in] ConfigPtr           Pointer to configuration set.
 ** \param [in] EnableTrigger       Whether enable output trigger at init
 **                                 (PWM_TRUE = Yes, PWM_FALSE = No).
 **
 */
extern FUNC(void, PWM_CODE) Pwm_InitInternal
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigPtr,
  VAR(boolean, AUTOMATIC) EnableTrigger
);

/** \brief Pwm_SetOutputToIdleInternal
 **
 ** Sets the PWM output to the configured Idle state.
 **
 ** \param [in] ChannelPtr  Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetOutputToIdleInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_SetOutputStatusInternal
 **
 ** Sets the PWM output to the specified state.
 **
 ** \param [in] ChannelPtr  Pointer to the channel configuration.
 ** \param [in] State       Output state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetOutputStatusInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_OutputStateType, AUTOMATIC) State
);

/** \brief Pwm_SetChannelOutputBufferInternal
 **
 ** Sets the PWM line and complementary output to the specified state.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] LineState       PWM line output state.
 ** \param [in] LineCompState   PWM line complementary output state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetChannelOutputBufferInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_OutputLineStateType, AUTOMATIC) LineState,
  VAR(Pwm_OutputLineStateType, AUTOMATIC) LineCompState
);

/** \brief Pwm_UpdateDutyChannelOutputBufferInternal
 **
 ** Updates channel counter for duty and channel outputbuffer.
 **
 ** \param [in] ChannelPtr  Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_UpdateDutyChannelOutputBufferInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_SetDutyCycleInternal
 **
 ** Sets the PWM channel to a new duty cycle.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] DutyCycle       Duty cycle to be set.
 ** \param [in] EndPeriodFlag   Enable/disable the update of the period at
 **                             the end of the current period.
 ** \param [in] AutoReloadFlag  Enable/disable the reload of the channel
 **                             when the channel is in waiting update state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetDutyCycleInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(uint16, AUTOMATIC) DutyCycle,
  VAR(boolean, AUTOMATIC) EndPeriodFlag,
  VAR(boolean, AUTOMATIC) AutoReloadFlag
);

/** \brief Pwm_SetDutyCycleBufferInternal
 **
 ** Sets new duty cycle value to the buffer register of PWM channel.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] DutyCycle       Duty cycle to be set to the buffer register.
 */
extern FUNC(void, PWM_CODE) Pwm_SetDutyCycleBufferInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(uint16, AUTOMATIC) DutyCycle
);

/** \brief Pwm_SetPeriodAndDutyInternal
 **
 ** Sets the PWM channel to a new period and duty cycle.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] PeriodTicks     Period ticks of the PWM signal: 
 **                             Minimum=0x0000, Maximum=0xFFFE.
 ** \param [in] DutyCycle       Duty cycle to be set.
 ** \param [in] EndPeriodFlag   Enable/disable the update of the period
 **                             at the end of the current period.
 ** \param [in] AutoReloadFlag  Enable/disable the reload of the channel
 **                             when the channel is in waiting update state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetPeriodAndDutyInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_PeriodType, AUTOMATIC) PeriodTicks,
  VAR(uint16, AUTOMATIC) DutyCycle,
  VAR(boolean, AUTOMATIC) EndPeriodFlag,
  VAR(boolean, AUTOMATIC) AutoReloadFlag
);

/** \brief Pwm_GetDriverStatus
 **
 ** Provides current driver status.
 **
 ** \return Driver status.
 */
extern FUNC(Pwm_DriverStatusType, PWM_CODE) Pwm_GetDriverStatus(void);

/** \brief Pwm_SetDriverStatus
 ** 
 ** Sets current driver status.
 **
 ** \param [in] DrvStatus   Sets current driver status.
 */
extern FUNC(void, PWM_CODE) Pwm_SetDriverStatus
(
  VAR(Pwm_DriverStatusType, AUTOMATIC) DrvStatus
);

/** \brief Pwm_InterruptHandlerInternal
 **
 ** Generic interrupt handler that is called from specific interrupt handlers.
 **
 ** \param [in] ChannelPtr   Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_InterruptHandlerInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_StartGroupTriggerInternal
 **
 ** Start all PWM channels in specified channel group.
 **
 ** \param [in] ConfigDataPtr       Pointer to configuration set.
 ** \param [in] ChannelGroupNumber  Numeric identifier of channel group.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_StartGroupTriggerInternal
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigDataPtr,
  VAR(Pwm_ChannelGroupType, AUTOMATIC) ChannelGroupNumber
);

/** \brief Pwm_StopGroupTriggerInternal
 **
 ** Stop all PWM channels in specified channel group.
 **
 ** \param [in] ConfigDataPtr       Pointer to configuration set.
 ** \param [in] ChannelGroupNumber  Numeric identifier of channel group.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_StopGroupTriggerInternal
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigDataPtr,
  VAR(Pwm_ChannelGroupType, AUTOMATIC) ChannelGroupNumber
);

/** \brief Pwm_SetOutputOffsetInternal
 **
 ** Set output offset ticks value for the specified channel.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] OffsetTick      Tick time to offset output.
 ** \param [in] AutoReloadFlag  Enable/disable the reload of the channel
 **                             when the channel is in waiting update state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetOutputOffsetInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_PeriodType, AUTOMATIC) OffsetTick,
  VAR(boolean, AUTOMATIC) AutoReloadFlag
);

/** \brief Pwm_SetTriggerDelayInternal
 **
 ** Set delay time for output trigger.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] TriggerTicks    Delay time for output trigger.
 ** \param [in] AutoReloadFlag  Enable/disable the reload of the channel
 **                             when the channel is in waiting update state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetTriggerDelayInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_PeriodType, AUTOMATIC) TriggerTicks,
  VAR(boolean, AUTOMATIC) AutoReloadFlag
);

/** \brief Pwm_SetPrescalerInternal
 **
 ** Calculate prescaler value and update value on hardware.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] ClockFrequency  Input clock frequency.
 **
 ** \return If calculated prescaler value is valid, return PWM_TRUE,
 **         else return PWM_FALSE.
 **
 */
extern FUNC(boolean, PWM_CODE) Pwm_SetPrescalerInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_ClkFrequencyType, AUTOMATIC) ClockFrequency
);

/** \brief Pwm_GetChannelStatusInternal
 **
 ** Internal implementation: Reads and verifies the current status of a channel.
 **
 ** \param [out] ChannelStatusPtr  Pointer to where to store the current channel
 **                                specific status parameters.
 ** \param [in]  ChannelPtr        Pointer to the channel configuration.
 **
 ** \return PWM_TRUE: Software and hardware states are in sync.
 **         PWM_FALSE: Software and hardware states are inconsistent.
 **
 */
extern FUNC(boolean, PWM_CODE) Pwm_GetChannelStatusInternal
(
  P2VAR(Pwm_ChannelStatusType, AUTOMATIC, PWM_APPL_DATA) ChannelStatusPtr,
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_ClearChannelInterruptByBaseAddr
 **
 ** Clear the interrupt flag by base address of HW timer.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 */
extern FUNC(void, PWM_CODE) Pwm_ClearChannelInterruptByBaseAddr
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_CheckDutyCycleInternal
 **
 ** Check duty cycle range.
 **
 ** \param [in] ChannelPtr   Pointer to the channel configuration.
 ** \param [in] PeriodTicks  Period tick of the PWM signal.
 ** \param [in] DutyCycle    Duty cycle to be check.
 **
 ** \return Return PWM_TRUE if duty cycle is in valid range, 
 **                PWM_FALSE otherwise.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckDutyCycleInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_PeriodType, AUTOMATIC) PeriodTicks,
  VAR(uint16, AUTOMATIC) DutyCycle
);

/** \brief Pwm_CheckPeriodInternal
 **
 ** Check period range.
 **
 ** \param [in] ChannelPtr   Pointer to the channel configuration.
 ** \param [in] PeriodTicks  Period in ticks to be check.
 ** \param [in] DutyCycle    Duty cycle value.
 **
 ** \return Return PWM_TRUE if PeriodTicks is in valid range, 
 **         PWM_FALSE otherwise.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckPeriodInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_PeriodType, AUTOMATIC) PeriodTicks,
  VAR(uint16, AUTOMATIC) DutyCycle
);

/** \brief Pwm_CheckTriggerTicksInternal
 **
 ** Check output trigger ticks range.
 **
 ** \param [in] ChannelPtr    Pointer to the channel configuration.
 ** \param [in] TriggerTicks  Delay time for output trigger.
 ** 
 ** \return PWM_TRUE if output trigger ticks is in valid range, 
 **         PWM_FALSE otherwise.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckTriggerTicksInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_PeriodType, AUTOMATIC) TriggerTicks
);

/** \brief Pwm_CheckChannelStatus_Running
 **
 ** Check whether channel is in running state.
 **
 ** \param [in] ChannelPtr    Pointer to the channel configuration.
 ** 
 ** \return PWM_TRUE if channel is in running state, 
 **         PWM_FALSE otherwise.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckChannelStatus_Running
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_CheckOutputOffsetInternal
 **
 ** Check if OffsetTick is in valid range.
 **
 ** \param [in] ChannelPtr   Pointer to the channel configuration.
 ** \param [in] OffsetTick   Offset time for PWM output.
 **
 ** \return     PWM_TRUE:  OffsetTick is valid value.
 **             PWM_FALSE: OffsetTick is invalid value.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckOutputOffsetInternal
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(Pwm_PeriodType, AUTOMATIC) OffsetTick
);

/** \brief Pwm_CheckChannelStatus_WaitingTrigger
 **
 ** Check whether channel is in waiting HW start/stop trigger state.
 **
 ** \param [in] ChannelPtr    Pointer to the channel configuration.
 ** 
 ** \return  PWM_TRUE: Channel is waiting HW start/stop trigger.
 **          PWM_FALSE: Channel is not waiting HW start/stop trigger.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckChannelStatus_WaitingTrigger
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_CheckGroupChannelsStatus_WaitingTrigger
 **
 ** Check whether channels in specified channel group are in waiting HW start/stop trigger state.
 **
 ** \param [in] ConfigDataPtr       Pointer to configuration set.
 ** \param [in] ChannelGroupNumber  Numeric identifier of channel group.
 ** 
 ** \return  PWM_TRUE: Channels in specified channel group are waiting HW start/stop trigger.
 **          PWM_FALSE: All channels in specified channel group are not waiting HW start/stop trigger.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckGroupChannelsStatus_WaitingTrigger
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigDataPtr,
  VAR(Pwm_ChannelGroupType, AUTOMATIC) ChannelGroupNumber
);

/** \brief Pwm_CheckGroupPrescalerValue
 **
 ** Check whether channels in specified channel group have inconsistent prescaler value.
 **
 ** Preconditions: PwmGroupStartDelay is enable.
 **
 ** \param [in] ConfigDataPtr       Pointer to configuration set.
 ** \param [in] ChannelGroupNumber  Numeric identifier of channel group.
 ** 
 ** \return  PWM_TRUE: Channels in specified channel group have inconsistent prescaler value.
 **          PWM_FALSE: Channels in specified channel group have consistent prescaler value.
 */
extern FUNC(boolean, PWM_CODE) Pwm_CheckGroupPrescalerValue
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigDataPtr,
  VAR(Pwm_ChannelGroupType, AUTOMATIC) ChannelGroupNumber
);

#define PWM_STOP_SEC_CODE_ASIL_B
#include <Pwm_MemMap.h>

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

/*==================[end of file]===========================================*/

#endif /*!defined(PWM_INTERNAL_H_INCLUDED)*/
