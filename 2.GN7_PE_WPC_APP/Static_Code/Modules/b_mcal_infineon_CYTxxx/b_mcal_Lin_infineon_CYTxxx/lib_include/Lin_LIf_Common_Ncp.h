/** \brief Lin_LIf_Common_Ncp.h
 **
 ** Library-interface: common interface Ncp.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef LIN_LIF_COMMON_NCP_H_INCLUDED
#define LIN_LIF_COMMON_NCP_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Std_Types.h>

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/** \brief struct Lin_ConstChType
 **
 ** Internal type: holds internal channel specific constants.
 */
typedef struct lin_constchtype_struct
{
  /** Lin channel break length. */
  CONST(uint8, TYPEDEF) LinChannelBreakLength;
  /** Break delimiter length. */
  CONST(uint8, TYPEDEF) LinChannelBreakDelimiter;
  /** Lin reception Wakeup length. */
  CONST(uint8, TYPEDEF) LinChannelWakeupLength;  
  /** EcuM wakeup source. */
  CONST(uint32, TYPEDEF) LinChannelEcuMWakeupSource;
  /** Base address of Lin instance. */
  CONST(uint32, TYPEDEF) LinHwChBaseAddress;
  /** Lin channel wakeup support enabled. */
  CONST(boolean, TYPEDEF) LinChannelWakeupSupport;
  /** Lin channel Receiver Noise Filter enabled. */
  CONST(boolean, AUTOMATIC) LinChannelRxNoiseFilter;
} Lin_ConstChType;

/** \brief struct Lin_ConstType
 **
 ** Internal type: contains internal module specific constants.
 */
typedef struct lin_consttype_struct
{
  /** Number of configured Lin channels. */
  CONST(uint8, TYPEDEF) LinNumberOfChannels;
} Lin_ConstType;

/*==================[external function declarations]========================*/

#define LIN_START_SEC_CODE_ASIL_B
#include "Lin_MemMap.h"

/** \brief Lin_ConstChGet
 **
 ** Internal function: obtain channel specific constants.
 **
 ** \return channel specific constants.
 ** \param [in] ChannelIndex   channel index.
 **
 */
extern FUNC_P2CONST(Lin_ConstChType, AUTOMATIC, AUTOMATIC) Lin_ConstChGet
(
  VAR(uint8, AUTOMATIC) ChannelIndex
);

/** \brief Lin_ConstGet
 **
 ** Internal function: obtain module specific constants.
 **
 ** \return module constants.
 **
 */
extern FUNC_P2CONST(Lin_ConstType, AUTOMATIC, AUTOMATIC) Lin_ConstGet
(
  void
);

/** \brief Lin_ErrorWrapper
 **
 ** Internal function: wrapper function to call DET module function and the error
 ** callout handler.
 **
 ** \param [in] ApiId   API ID
 ** \param [in] ErrorId   Error ID
 **
 */
extern FUNC(void, AUTOMATIC) Lin_ErrorWrapper
(
  VAR(uint8, AUTOMATIC) ApiId,
  VAR(uint8, AUTOMATIC) ErrorId
);

/** \brief Lin_EcuMSetWakeupEventWrapper
 **
 ** Internal function: wrapper function to call EcuM module function.
 **
 ** \param [in] ChannelIndex   channel index
 **
 */
extern FUNC(void, AUTOMATIC) Lin_EcuMSetWakeupEventWrapper
(
  VAR(uint8, AUTOMATIC) ChannelIndex
);

/** \brief Lin_EcuMCheckWakeupWrapper
 **
 ** Internal function: wrapper function to call EcuM module function.
 **
 ** \param [in] ChannelIndex   channel index
 **
 */
extern FUNC(void, AUTOMATIC) Lin_EcuMCheckWakeupWrapper
(
  VAR(uint8, AUTOMATIC) ChannelIndex
);

/** \brief Lin_LinIfWakeupConfirmationWrapper
 **
 ** Internal function: wrapper function to call LinIf module function.
 **
 ** \param [in] ChannelIndex   channel index
 **
 */
extern FUNC(void, AUTOMATIC) Lin_LinIfWakeupConfirmationWrapper
(
  VAR(uint8, AUTOMATIC) ChannelIndex
);

#define LIN_STOP_SEC_CODE_ASIL_B
#include "Lin_MemMap.h"

/*==================[end of file]===========================================*/

#endif /*!defined(LIN_LIF_COMMON_NCP_H_INCLUDED)*/
