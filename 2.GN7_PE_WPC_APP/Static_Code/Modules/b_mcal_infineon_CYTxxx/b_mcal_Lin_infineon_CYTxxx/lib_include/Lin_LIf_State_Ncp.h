/** \brief Lin_LIf_State_Ncp.h
 **
 ** Library-interface: state interface ncp.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef LIN_LIF_STATE_NCP_H_INCLUDED
#define LIN_LIF_STATE_NCP_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Std_Types.h>

/*==================[macros]================================================*/

/** Buffer size for Lin data */ /*(PID + 8 data bytes). Checksum is not stored. */
#define LIN_DATA_BUFFER_SIZE 9U
/** Start index for Lin data */ /*(PID is at index[0]). */
#define LIN_DATA_START_INDEX 1U

/*==================[type definitions]======================================*/

/** \brief enum Lin_VarCh_StatusType
 **
 ** Internal type: enumeration for internal driver status.
 */
typedef enum lin_varch_statustype_enum
{
  LIN_INTERNAL_TX_OK,
  LIN_INTERNAL_TX_BUSY,
  LIN_INTERNAL_TX_HEADER_ERROR,
  LIN_INTERNAL_TX_ERROR,
  LIN_INTERNAL_RX_OK,
  LIN_INTERNAL_RX_BUSY,
  LIN_INTERNAL_RX_ERROR,
  LIN_INTERNAL_RX_NO_RESPONSE,
  LIN_INTERNAL_OPERATIONAL,
  LIN_INTERNAL_CH_SLEEP,
  LIN_INTERNAL_CH_SLEEP_PENDING
} Lin_VarCh_StatusType;

/** \brief enum Lin_VarCh_StimulationType
 **
 ** Internal type: internal enumeration for driver stimulations.
 */
typedef enum lin_varch_stimulationtype_enum
{
  LIN_INTERNAL_INIT_API,
  LIN_INTERNAL_DEINIT_API,
  LIN_INTERNAL_SENDFRAME_API,
  LIN_INTERNAL_GOTOSLEEP_API,
  LIN_INTERNAL_GOTOSLEEPINTERNAL_API,
  LIN_INTERNAL_WAKEUP_API,
  LIN_INTERNAL_WAKEUPINTERNAL_API,
  LIN_INTERNAL_WAKEUP_BY_LINBUSSLAVE
} Lin_VarCh_StimulationType;

/** \brief typedef  Lin_VarCh_FramePidType
 **
 ** Internal type: internal FramePid representation.
 */
typedef uint8 Lin_VarCh_FramePidType;

/** \brief enum Lin_VarCh_FrameCsModelType
 **
 ** Internal type: enumeration for internal FrameCsModel representation.
 */
typedef enum lin_varch_framecsmodeltype_enum
{
  LIN_INTERNAL_ENHANCED_CS,
  LIN_INTERNAL_CLASSIC_CS
} Lin_VarCh_FrameCsModelType;

/** \brief enum Lin_VarCh_FrameResponseType
 **
 ** Internal type: enumeration for internal FrameResponse representation.
 */
typedef enum lin_varch_frameresponsetype_enum
{
  LIN_INTERNAL_MASTER_RESPONSE,
  LIN_INTERNAL_SLAVE_RESPONSE,
  LIN_INTERNAL_SLAVE_TO_SLAVE
} Lin_VarCh_FrameResponseType;

/** \brief typedef  Lin_VarCh_FrameDlType
 **
 ** Internal type: internal FrameDl representation.
 */
typedef uint8 Lin_VarCh_FrameDlType;

/** \brief struct Lin_VarCh_PduType
 **
 ** Internal type: internal Pdu representation.
 */
typedef struct lin_varch_pdutype_struct
{
  /** Internal type: internal "Pid" representation. */
  VAR(Lin_VarCh_FramePidType, TYPEDEF)      Pid;
  /** Internal type: internal checksum representation. */
  VAR(Lin_VarCh_FrameCsModelType, TYPEDEF)  Cs;
  /** Internal type: internal "Drc" representation. */
  VAR(Lin_VarCh_FrameResponseType, TYPEDEF) Drc;
  /** Internal type: internal data length representation. */
  VAR(Lin_VarCh_FrameDlType, TYPEDEF)       Dl;
  /** Internal type: internal "SduPtr" representation. */
  P2VAR(uint8, TYPEDEF, TYPEDEF)            SduPtr;
} Lin_VarCh_PduType;

/** \brief struct Lin_VarChType
 **
 ** Internal channel specific variables.
 */
typedef struct lin_varchtype_struct
{
  /** Internal type: holds checksum type. */
  VAR(Lin_VarCh_FrameCsModelType, TYPEDEF) Lin_ch_checksum_type;
  /** Internal type: holds response type. */
  VAR(Lin_VarCh_FrameResponseType, TYPEDEF) Lin_ch_response_type;
  /** Internal type: holds channel data length. */
  VAR(Lin_VarCh_FrameDlType, TYPEDEF) Lin_ch_data_length;
  /** Internal type: holds channel data. */
  VAR(uint8, TYPEDEF) Lin_ch_data[LIN_DATA_BUFFER_SIZE];
  /** Internal type: holds last LIN driver stimulation. */
  VAR(Lin_VarCh_StimulationType, TYPEDEF) Lin_ch_stimulation;
  /** Internal type: holds channel position. */
} Lin_VarChType;

/*==================[external function declarations]========================*/

#define LIN_START_SEC_CODE_ASIL_B
#include "Lin_MemMap.h"

/** \brief Lin_VarChGet
 **
 ** Internal function: obtain the channel specific variables.
 **
 ** \return Channel specific variables.
 ** \param [in] ChannelIndex   channel index
 **
 */
extern FUNC_P2VAR(Lin_VarChType, AUTOMATIC, AUTOMATIC) Lin_VarChGet
(
  VAR(uint8, AUTOMATIC) ChannelIndex
);

#define LIN_STOP_SEC_CODE_ASIL_B
#include "Lin_MemMap.h"

/*==================[end of file]===========================================*/

#endif /*!defined(LIN_LIF_STATE_NCP_H_INCLUDED)*/
