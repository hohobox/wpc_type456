
#ifndef WDG_66_IA_TYPES_H
#define WDG_66_IA_TYPES_H 1

/** \brief AUTOSAR Wdg Driver
 **
 ** This file contains internal commonly used declarations by the AUTOSAR
 ** Wdg driver and includes the public Wdg API.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/

#include <Wdg_66_IA_Types_Der.h>
#include <WdgIf_Types.h>

/*==================[macros]=================================================*/

/* Define supported mode for hardware */
#define WDG_66_IA_OFF_MODE          0x1U
#define WDG_66_IA_SLOW_MODE         0x2U
#define WDG_66_IA_FAST_MODE         0x4U

/* Define status type for Wdg module */
#define WDG_66_IA_UNINIT            0x0U
#define WDG_66_IA_IDLE              0x1U
#define WDG_66_IA_BUSY              0x2U

/* Define trigger mode type for Wdg module */
#define WdgToggle                   0x0U
#define WdgWindow                   0x1U
#define WdgBoth                     0x2U

/* Define thumb bit mask for activate trigger address */
#define WDG_66_IA_THUMB_BIT_CLEAR   0xFFFFFFFEU

/* Define wait time for changing SERVICE reg */
#define WDG_66_IA_SERVICE_WAIT_TIME     (150U)

/* Define SSRS version */
#define WDG_66_IA_SRSS_VER2             (0U)
#define WDG_66_IA_SRSS_OTHER            (1U)

/* Define watchdog action for lower/upper violation */
#define WDG_66_IA_ACTION_RESET          (1U)
#define WDG_66_IA_ACTION_FAULT          (1U)
#define WDG_66_IA_ACTION_FAULT_RESET    (2U)

/* Define status of the watchdog timer which is ignored in wait sequence */
#define WDG_66_IA_IGNORED_STATUS    0xFFU

/*------------------[AUTOSAR module identification]--------------------------*/

#ifdef WDG_66_IA_MODULE_ID /* to prevent double declaration */
#  error WDG_66_IA_MODULE_ID already defined
#else
#  define WDG_66_IA_MODULE_ID 102U
#endif /* ifdef WDG_66_IA_MODULE_ID) */

/*------------------[AUTOSAR vendor identification]--------------------------*/

#ifdef WDG_66_IA_VENDOR_ID /* to prevent double declaration */
#  error WDG_66_IA_VENDOR_ID is already defined
#else
#  define WDG_66_IA_VENDOR_ID 66U
#endif /* if (defined WDG_66_IA_VENDOR_ID) */

/*------------------[AUTOSAR instance identification]------------------------*/

#ifdef WDG_66_IA_INSTANCE_ID /* to prevent double declaration */
#  error WDG_66_IA_INSTANCE_ID is already defined
#else
#  define WDG_66_IA_INSTANCE_ID 0U
#endif /* if (defined WDG_66_IA_INSTANCE_ID) */

/*----------------------[API ID for each function]---------------------------*/

#ifdef WDG_66_IA_API_INIT /* to prevent double definition */
#  error WDG_66_IA_API_INIT already defined
#else
#  define WDG_66_IA_API_INIT 0U
#endif /* ifdef WDG_66_IA_API_INIT */

#ifdef WDG_66_IA_API_SETMODE
#  error WDG_66_IA_API_SETMODE already defined
#else
#  define WDG_66_IA_API_SETMODE 1U
#endif /* ifdef WDG_66_IA_API_SETMODE */

#ifdef WDG_66_IA_API_SET_TRIGGER_CONDITION
#  error WDG_66_IA_API_SET_TRIGGER_CONDITION already defined
#else
#  define WDG_66_IA_API_SET_TRIGGER_CONDITION 3U
#endif /* ifdef WDG_66_IA_API_SET_TRIGGER_CONDITION */

#ifdef WDG_66_IA_API_GET_VERSION_INFO
#  error WDG_66_IA_API_GET_VERSION_INFO already defined
#else
#  define WDG_66_IA_API_GET_VERSION_INFO 4U
#endif /* ifdef WDG_66_IA_API_GET_VERSION_INFO */

#ifdef WDG_66_IA_API_WARNINT
#  error WDG_66_IA_API_WARNINT already defined
#else
#  define WDG_66_IA_API_WARNINT 0xFFU
#endif /* ifdef WDG_66_IA_WARNINT */

/*-----------------------------[error codes]---------------------------------*/

#ifdef WDG_66_IA_E_DRIVER_STATE
#  error WDG_66_IA_E_DRIVER_STATE already defined
#else
#  define WDG_66_IA_E_DRIVER_STATE 0x10U
#endif /* ifdef WDG_66_IA_E_DRIVER_STATE */

#ifdef WDG_66_IA_E_PARAM_MODE
#  error WDG_66_IA_E_PARAM_MODE already defined
#else
#  define WDG_66_IA_E_PARAM_MODE 0x11U
#endif /* ifdef WDG_66_IA_E_PARAM_MODE */

#ifdef WDG_66_IA_E_PARAM_CONFIG
#  error WDG_66_IA_E_PARAM_CONFIG already defined
#else
#  define WDG_66_IA_E_PARAM_CONFIG 0x12U
#endif /* ifdef WDG_66_IA_E_PARAM_CONFIG */

#ifdef WDG_66_IA_E_PARAM_TIMEOUT
#  error WDG_66_IA_E_PARAM_TIMEOUT already defined
#else
#  define WDG_66_IA_E_PARAM_TIMEOUT 0x13U
#endif /* ifdef WDG_66_IA_E_PARAM_TIMEOUT */

#ifdef WDG_66_IA_E_PARAM_POINTER
#  error WDG_66_IA_E_PARAM_POINTER already defined
#else
#  define WDG_66_IA_E_PARAM_POINTER 0x14U
#endif /* ifdef WDG_66_IA_E_PARAM_POINTER */

#ifdef WDG_66_IA_E_INIT_FAILED
#  error WDG_66_IA_E_INIT_FAILED already defined
#else
#  define WDG_66_IA_E_INIT_FAILED 0x15U
#endif /* ifdef WDG_66_IA_E_INIT_FAILED */

#ifdef WDG_66_IA_E_EXTENDED_MODE_FAILED
#  error WDG_66_IA_E_EXTENDED_MODE_FAILED already defined
#else
#  define WDG_66_IA_E_EXTENDED_MODE_FAILED 0x20U
#endif /* ifdef WDG_66_IA_E_EXTENDED_MODE_FAILED */

#ifdef WDG_66_IA_E_EXTENDED_DISABLE_REJECTED
#  error WDG_66_IA_E_EXTENDED_DISABLE_REJECTED already defined
#else
#  define WDG_66_IA_E_EXTENDED_DISABLE_REJECTED 0x21U
#endif /* ifdef WDG_66_IA_E_EXTENDED_DISABLE_REJECTED */

#ifdef WDG_66_IA_E_EXTENDED_HW_TIMEOUT
#  error WDG_66_IA_E_EXTENDED_HW_TIMEOUT already defined
#else
#  define WDG_66_IA_E_EXTENDED_HW_TIMEOUT 0x22U
#endif /* ifdef WDG_66_IA_E_EXTENDED_HW_TIMEOUT */

#ifdef WDG_66_IA_E_EXTENDED_WDG_STOPPED
#  error WDG_66_IA_E_EXTENDED_WDG_STOPPED already defined
#else
#  define WDG_66_IA_E_EXTENDED_WDG_STOPPED 0x23U
#endif /* ifdef WDG_66_IA_E_EXTENDED_WDG_STOPPED */

/*==================[type definitions]=======================================*/

/* This type is used to select the watchdog timer.
 */
typedef enum
{
  WDG_66_IA_TIMER_MCWDT0=0,
  WDG_66_IA_TIMER_MCWDT1,
  WDG_66_IA_TIMER_MCWDT2,
  WDG_66_IA_TIMER_MCWDT3,
  WDG_66_IA_TIMER_WDT
}
Wdg_66_IA_TimerKindType;

/* Define notification function pointer */
typedef P2FUNC(void, TYPEDEF, Wdg_66_IA_NotificationFuncType)(void);

/* This parameter specifies the structure which contains the information
 * related to settings of trigger routine.
 */
typedef struct
{
  uint16 TimeoutValue;        /* Timeout value to trigger watchdog reset */
  uint8  WarnLimitPercent;    /* Percentage of warn limit compared to timeout value */
  uint8  LowerLimitPercent;   /* Percentage of lower limit compared to timeout value */
  uint32 Wait1usCount;        /* Empty loop count for 1 micro second elapse */
  uint16 MaxWaitTime;         /* Time (micro second) to wait HW status change */
}
Wdg_66_IA_SettingTriggerType;

/* This structure specifies type of setting related to generic properties */
typedef struct
{
  uint16               MaxTimeout;           /* Max timeout value */
  uint8                SupportedModes;       /* Supported mode */
  uint8                SRSSVersion;          /* SSRS version */
  boolean              DisableAllowed;       /* Allowed or denied */
}
Wdg_66_IA_SettingCommonType;

typedef struct
{
  uint32                         WdgTimerFreq;              /* watchdog timer frequency for calculating wait timer */
  Wdg_66_IA_NotificationFuncType WdgWarningNotificationPtr; /* warning notification function */
  Wdg_66_IA_TimerKindType        WdgTimerSelection;         /* watchdog timer type */
  uint16                         WdgMaxTimeout;             /* the real max timeout */
  uint8                          WdgCPUSelect;              /* the number of CPU core */
  uint8                          WdgLowerAction;            /* trigger action for upper limit */
  uint8                          WdgUpperAction;            /* trigger action for lower limit */
  uint8                          DeepSleepModeAction;       /* pauses/runs the counter in DEEPSLEEP */
  uint8                          HibernateModeAction;       /* pauses/runs the counter in HIBERNATE */
  uint8                          DebugModeAction;           /* pauses/runs the counter while a debugger is connected */
  boolean                        WdgStopWDT;                /* stops/runs WDT */
  boolean                        WdgEnableWarningIrq;       /* stops/runs warning Irq */
}
Wdg_66_IA_TimerConfigType;

/* This structure specifies type of setting related to watchdog configuration */
typedef struct
{
  /* default mode for run mode */
  WdgIf_ModeType                        DefaultMode;
  /* setting for MCWDT config */
  CONSTP2CONST(Wdg_66_IA_TimerConfigType,    TYPEDEF, WDG_APPL_CONST)  SettingMCWDTConfigPtr;
  /* setting for WDT config */
  CONSTP2CONST(Wdg_66_IA_TimerConfigType,    TYPEDEF, WDG_APPL_CONST)  SettingWDTConfigPtr;
  /* setting for fast mode */
  CONSTP2CONST(Wdg_66_IA_SettingTriggerType, TYPEDEF, WDG_APPL_CONST)  SettingFastPtr;
  /* setting for slow mode */
  CONSTP2CONST(Wdg_66_IA_SettingTriggerType, TYPEDEF, WDG_APPL_CONST)  SettingSlowPtr;
  /* setting for off mode */
  CONSTP2CONST(Wdg_66_IA_SettingTriggerType, TYPEDEF, WDG_APPL_CONST)  SettingOffPtr;
}
Wdg_66_IA_SettingType;



/* Data structure containing the set of configuration parameters required for
 * initializing the WDG Driver and WDG HW Unit(s)
 */
typedef struct
{
  /* common setting */
  CONSTP2CONST(Wdg_66_IA_SettingCommonType, TYPEDEF, WDG_APPL_CONST) SettingCommonPtr;
  /* setting for hardware watchdog timer */
  CONSTP2CONST(Wdg_66_IA_SettingType, TYPEDEF, WDG_APPL_CONST)       SettingWdgPtr;
}
Wdg_66_IA_ConfigType;

/* Internal status type for Wdg status. It is just a redefinition of the
 * WdgIf_StatusType which should obviously be used but the Wdg specification
 * states elsewise
 */
typedef uint8 Wdg_66_IA_StatusType;

/* Define the trigger mode type */
typedef uint8 Wdg_66_IA_TriggerModeType;

/*==================[external function declarations]=========================*/
/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* if !defined( WDG_66_IA_TYPES_H ) */
/*==================[end of file]============================================*/
