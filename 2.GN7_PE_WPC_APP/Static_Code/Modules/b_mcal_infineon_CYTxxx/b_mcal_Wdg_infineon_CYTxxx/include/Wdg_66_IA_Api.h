
#ifndef WDG_66_IA_API_H
#define WDG_66_IA_API_H 1

/** \brief AUTOSAR Wdg Driver
 **
 ** This file contains all external API declaration of the
 ** AUTOSAR module Wdg.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/

#include <Std_Types.h>        /* AUTOSAR standard types */
#include <Wdg_66_IA_Types.h>

/*==================[macros]=================================================*/
/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/

#define WDG_66_IA_START_SEC_CODE
#include <Wdg_66_IA_MemMap.h>

/** \brief Wdg_66_IA_Init
 **
 ** This API is used to initialize watchdog driver and watchdog hardware, i.e.
 ** it sets the default watchdog mode and timeout period as provided in the
 ** configuration set.
 ** This configuration set shall be chosen from a limited number of
 ** statically configured sets.
 **
 ** \param [in] ConfigPtr   Pointer to configuration which be used to initialize
 **                         watchdog driver.
 */
extern FUNC( void, WDG_CODE )
Wdg_66_IA_Init( P2CONST( Wdg_66_IA_ConfigType, AUTOMATIC, WDG_APPL_CONST ) ConfigPtr );

/** \brief Wdg_66_IA_SetMode
 **
 ** This API is used to switch the watchdog mode between the following
 ** three different modes:
 ** - WDGIF_OFF_MODE
 ** - WDGIF_SLOW_MODE
 ** - WDGIF_FAST_MODE
 **
 ** \param [in] Mode   One of the three different modes.
 **
 ** \return E_OK:     Switching completed successfully.
 **         E_NOT_OK: Switching failed.
 */
extern FUNC( Std_ReturnType, WDG_CODE )
Wdg_66_IA_SetMode( WdgIf_ModeType Mode );

/** \brief Wdg_66_IA_SetTriggerCondition
 **
 ** This API is used to set the permission to trigger the watchdog hardware for
 ** the next 'timeout' milliseconds.
 ** It has to be called again by some upper layer function, usually the watchdog
 ** manager, before the permission period expires.
 **
 ** \param [in] timeout   Timeout value (milliseconds) for setting the trigger
 **                       counter.
 */
extern FUNC( void, WDG_CODE )
Wdg_66_IA_SetTriggerCondition( uint16 timeout);

#if ( WDG_66_IA_GET_VERSION_INFO_API == STD_ON )

/** \brief WDG_66_IA_GetVersionInfo
 **
 ** This API is used to obtain the version information.
 **
 ** \param [out] versioninfo   Wdg driver module's version.
 */
extern FUNC( void, WDG_CODE )
Wdg_66_IA_GetVersionInfo( P2VAR(Std_VersionInfoType, AUTOMATIC, WDG_APPL_DATA) versioninfo );
#else
#define Wdg_66_IA_GetVersionInfo(a) Wdg_66_IA_GetVersionInfo_API_Disabled(a)
#endif

#define WDG_66_IA_STOP_SEC_CODE
#include <Wdg_66_IA_MemMap.h>

/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* if !defined( WDG_66_IA_API_H ) */
/*==================[end of file]============================================*/
