#ifndef ICU_TYPES_H
#define ICU_TYPES_H

/** \file Icu_Types.h
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file contains the implementation of the AUTOSAR module Icu type.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Std_Types.h>        /* AUTOSAR standard types */

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/** \brief Used as index in internal arrays.
 **
 ** This type is implementation specific. It is chosen in order to have the
 ** most efficient implementation on a specific microcontroller platform. */
typedef uint8 Icu_LowCountType;

/** \brief Type to abstract the value of the ICU channel resource kind. */
typedef uint8 Icu_ChannelResourceType;

/** \brief Definition of the channel status of an ICU channel.
 **
 ** This type is implementation specific. It is chosen in order to have the
 ** most efficient implementation on a specific microcontroller platform. */
typedef uint8 Icu_ChannelStatusType;

/** \brief Numeric identifier of a ICU channel. */
typedef uint16 Icu_ChannelType;

/** \brief Resource type of an ICU channel.
 **
 ** This type is implementation specific. It is chosen in order to have the
 ** most efficient implementation on a specific microcontroller platform. */
typedef uint16 Icu_ResourceType;

/** \brief Type, to abstract the return value of the service Icu_GetTimestampIndex().
 **
 ** This type is implementation specific. It is chosen in order to have the
 ** most efficient implementation on a specific microcontroller platform. */
typedef uint16 Icu_IndexType;

/** \brief Numeric identifier of a channel group. */
typedef uint16 Icu_GroupType;

/** \brief Type, to abstract the return value of the service Icu_GetEdgeNumbers().
 **
 ** Implementation specific. This type shall be chosen in order to have the most
 ** efficient implementation on a specific microcontroller platform.
 **/
typedef uint16 Icu_EdgeNumberType;

/** \brief Width of the buffer for timestamp ticks and measured elapsed timeticks.
 **
 ** Implementation specific. This type shall be chosen in order to have the most
 ** efficient implementation on a specific microcontroller platform.
 **/
typedef uint32 Icu_ValueType;

/** \brief Definition of the clock frequency. */
typedef uint32 Icu_ClkFrequencyType;

/** \brief Definition of the type of activation edge of an ICU channel. */
typedef enum
{
  /* Initial edge is used only by de-initialization. */
  ICU_INIT_EDGE   = 0,
  /* An appropriate action shall be executed when a rising edge occurs on the ICU input signal. */
  ICU_RISING_EDGE,
  /* An appropriate action shall be executed when a falling edge occurs on the ICU input signal. */
  ICU_FALLING_EDGE,
  /* An appropriate action shall be executed when either a rising or falling edge occur on the ICU input signal. */
  ICU_BOTH_EDGES
} Icu_ActivationType;

/** \brief Definition of the input state of an ICU channel. */
typedef enum
{
  /* No activation edge has been detected since the last call of Icu_GetInputState() or Icu_Init(). */
  ICU_IDLE = 0,
  /* An activation edge has been detected. */
  ICU_ACTIVE
} Icu_InputStateType;

/** \brief Definition of the type of channel control, start or no start. */
typedef enum
{
  /* Start channel by software trigger. */
  ICU_CHSTART = 0,
  /* Start channel by hardware trigger. */
  ICU_NOSTART,
  /* Stop channel by software trigger. */
  ICU_CHSTOP,
  /* Stop channel by hardware trigger. */
  ICU_NOSTOP
}Icu_ChannelCtrlType;

/** \brief The state of the input pin related to an ICU channel. */
typedef enum
{
  /* Low level has been detected. */
  ICU_LOW = 0,
  /* High level has been detected. */
  ICU_HIGH
} Icu_LevelType;

/** \brief Allow enabling / disabling of all interrupts which are not required for the ECU wakeup. */
typedef enum
{
  /* Normal operation, all used interrupts are enabled according to the notification requests. */
  ICU_MODE_NORMAL = 1,
  /* Normal operation, all used interrupts are enabled according to the notification requests. */
  ICU_MODE_SLEEP
} Icu_ModeType;

/** \brief Definition of the measurement mode type. */
typedef enum
{
  /* Mode for detecting signal edges. */
  ICU_MODE_SIGNAL_EDGE_DETECT = 1,
  /* Mode for measuring different times between various configurable edges. */
  ICU_MODE_SIGNAL_MEASUREMENT,
  /* Mode for capturing timer values on edges. */
  ICU_MODE_TIMESTAMP,
  /* Mode for counting edges. */
  ICU_MODE_EDGE_COUNTER
} Icu_MeasurementModeType;

/** \brief Definition of the measurement property type. */
typedef enum
{
  /* The channel is configured for reading the elapsed Signal Low Time. */
  ICU_LOW_TIME = 1,
  /* The channel is configured for reading the elapsed Signal High Time. */
  ICU_HIGH_TIME,
  /* The channel is configured for reading the elapsed Signal Period Time. */
  ICU_PERIOD_TIME,
  /* The channel is configured to read values which are needed for calculating 
     the duty cycle (coherent Active and Period Time). */
  ICU_DUTY_CYCLE
} Icu_SignalMeasurementPropertyType;

/** \brief Definition of the timestamp measurement property type. */
typedef enum
{
  /* The buffer will just be filled once. */
  ICU_LINEAR_BUFFER = 1,
  /* After reaching the end of the buffer, the driver restarts at the beginning of the buffer. */
  ICU_CIRCULAR_BUFFER
} Icu_TimestampBufferType;

/** \brief Holds the ICU driver status. */
typedef enum
{
  /* Illegal initialization value. */
  ICU_S_ILLEGAL = 0,
  /* Driver was not initialized. */
  ICU_S_UNINITIALIZED,
  /* Driver successfully initialized. */
  ICU_S_INITIALIZED,
  /* Driver locked except for the service established the lock. */
  ICU_S_LOCKED
} Icu_DriverStatusType;


/** \brief  Definition of the trigger type for TCPWM. */
typedef enum
{
  /* Copies the counter value to CC0 and copies CC0 to CC0_BUFF. */
  ICU_CAPTURE0 = 0,
  /* Count event increments/decrements the counter. */
  ICU_COUNT,
  /* Starts the counter. The counter is not initialized by HW. */
  ICU_START,
  /* Sets the counter value and starts the counter. */
  ICU_RELOAD,
  /* Stops the counter. */
  ICU_STOP,
  /* Copies the counter value to CC1 and copies CC1 to CC1_BUFF. */
  ICU_CAPTURE1
}Icu_TriggerType;

/* Register type of DataWire register. */
typedef struct {
  uint32 Ch_Ctl;                          /* 0x000 : CH_CTL.      */
  uint32 Ch_Status;                       /* 0x004 : CH_STATUS.   */
  uint32 Ch_Idx;                          /* 0x008 : CH_IDX.      */
  uint32 Ch_Curr_Ptr;                     /* 0x00C : CH_CURR_PTR. */
  uint32 Intr;                            /* 0x010 : INTR.        */
  uint32 Intr_Set;                        /* 0x014 : INTR_SET.    */
  uint32 Intr_Mask;                       /* 0x018 : INTR_MASK.   */
  uint32 Intr_Masked;                     /* 0x01C : INTR_MASKED. */
  uint32 Sram_Data0;                      /* 0x020 : SRAM_DATA0.  */
  uint32 Sram_Data1;                      /* 0x024 : SRAM_DATA1.  */
  uint32 DwDummy12[6];                    /* 0x028 : Reserved.    */
} Icu_DataWireRegType;

/* Register type of DESCR_STRUCT register. */
typedef struct {
  uint32 Descr_Ctl;                       /* 0x00 : DESCR_CTL.        */
  uint32 Descr_Src;                       /* 0x04 : DESCR_SRC.        */
  uint32 Descr_Dst;                       /* 0x08 : DESCR_DST.        */
  uint32 Descr_X_Ctl;                     /* 0x0C : DESCR_X_CTL.      */
  uint32 Descr_Y_Ctl;                     /* 0x10 : DESCR_Y_CTL.      */
  uint32 Descr_Next_Ptr;                  /* 0x14 : DESCR_NEXT_PTR.   */
} Icu_DataWireDescriptorType;


/** \brief Type which shall contain the values, needed for calculating duty cycles. */
typedef struct
{
  /* This shall be the coherent active-time measured on a channel. */
  Icu_ValueType ActiveTime;
  /* This shall be the coherent period-time measured on a channel. */
  Icu_ValueType PeriodTime;
} Icu_DutyCycleType;

/** \brief Definition of the common state of a single channel */
typedef struct
{
  /* Edge to detect/count/timestamp/measure. */
  Icu_ActivationType                    ActivationEdge;
  /* Enable/disable notification or enable/disable counting or
     start/stop timestamp or start/stop signal measurement. */
  Icu_ChannelStatusType                 Status;
  /* Holds the current prescaler register value. */
  uint8                                 PrescalerRegisterValue;
  /* Enable/disable wakeup. */
  boolean                               WakeupEnable;
  /* Wakeup was detected. */
  boolean                               WakeupDetected;
  /* Holds flags whether use hardware trigger start channel(TRUE = use, FALSE = disuse). */
  boolean                               HWTriggerStart;
  /* Holds flags whether use hardware trigger stop channel(TRUE = use, FALSE = disuse). */
  boolean                               HWTriggerStop;
} Icu_ChannelCommonStateType;

/** \brief Definition of the state of edge detect channel. */
typedef struct
{
  /* Input state for edge detect. */
  /* Current input state. */
  Icu_InputStateType   InputState[2];
  /* Index for accessing InputState[]. */
  Icu_LowCountType     InputStateIndex;
  /* Enabled/disable notification at runtime. */
  boolean              NotifyEnabled;
} Icu_EdgeDetectChannelStateType;

/** \brief Definition of the state of edge count channel. */
typedef struct
{
  /* Edge count mode. */
  /* Number of detected edges. */
  Icu_EdgeNumberType          EdgeNumber;
} Icu_EdgeCountChannelStateType;

/** \brief Definition of the state of signal measurement channel. */
typedef struct
{
  /* Results and input state are double buffered, hence the array size must be 2. */
  /* Result time for signal measurement. */
  /* Result time high, low, period time. */
  Icu_ValueType               Time[2];
  /* Result time active time for duty cycle. */
  Icu_ValueType               ActiveTime[2];
  /* Input state for signal measurement. */
  /* Current input state.  */
  Icu_InputStateType          InputState[2];
  /* Enabled/disable Overflow notification at runtime. */
  boolean                     OverflowNotifyEnabled;
} Icu_SignalMeasChannelStateType;

/** \brief Definition of the state of time stamp channel. */
typedef struct
{
  /* Pointer to buffer address. */
  P2VAR(Icu_ValueType, AUTOMATIC, ICU_APPL_DATA)     BufferPtr;
  /* Timestamp mode. */
  /* Number of measured timestamps. */
  Icu_EdgeNumberType                             EdgeNumber;
  /* Number of detected events till notification. */
  Icu_EdgeNumberType                             NotifyInterval;
  /* Number of buffer elements. */
  uint16                                         BufferSize;
  /* Buffer position for next write. */
  uint16                                         BufferPos;
  /* Enabled/disable notification at runtime. */
  boolean                                        NotifyEnabled;
  /* Enabled/disable overflow notification at runtime. */
  boolean                                        OverflowNotifyEnabled;
} Icu_TimeStampChannelStateType;


typedef struct Icu_drvFctTable_s Icu_drvFctTable_t;

/** \brief Typedef definition for function callback pointer. */
typedef P2FUNC(void, ICU_CODE, Icu_FuncPtrType)(void);

/** \brief Typedef definition for function get table pointer. */
typedef P2FUNC(P2CONST(Icu_drvFctTable_t, AUTOMATIC, ICU_APPL_CONST), ICU_CODE, Icu_GetTblType)(void);

/** \brief Definition of the configuration of a single channel. */
typedef struct
{
  /* Tick Frequency value. */
  Icu_ClkFrequencyType                                        TickFrequency;
  /* Pointer to a structure holding extension configuration of a single channel. */
  P2CONST(void, AUTOMATIC, ICU_APPL_CONST)                    ExtConfigPtr;
  /* Pointer to a structure holding common state data of a single channel. */
  P2VAR(Icu_ChannelCommonStateType, AUTOMATIC, ICU_APPL_DATA)     StatePtr;
  /* Pointer to a structure holding extension state data of a single channel. */
  P2VAR(void, AUTOMATIC, ICU_APPL_DATA)                       ExtStatePtr;
  /* Peripheral function table pointer. */
  Icu_GetTblType                                              GetFuncTable;
  /* Channel overflow notification function. */
  Icu_FuncPtrType                                             OverflowNotification;
  /* Base address of  hardware resource. */
  volatile CONSTP2VAR(uint32, ICU_CONST, REGSPACE)            BaseAddress;
  /* Default value for first edge to detect. */
  Icu_ActivationType                                          DefaultEdge;
  /* Definition of the measurement mode. */
  Icu_MeasurementModeType                                     MeasurementMode;
  /* ICU channel resource number. */
  Icu_ResourceType                                            ResourceID;
  /* TCPWM or GPIO. */
  Icu_ChannelResourceType                                     ChannelResourceKind;
  /* Prescaler register value. */
  uint8                                                       PrescalerValue;
  /* Input trigger. */
  uint8                                                       InputTrigger;
  /* Counter width. */
  uint8                                                       CountWidth;
  /* Hardware stop trigger select value. */
  uint8                                                       InputStopTrigger;
  /* Channel is capable to do a wake-up. */
  boolean                                                     WakeupCapability;
  /* Support filter (TRUE = supportable, FALSE = unsupportable). */
  boolean                                                     FilterEnable;
  /* Configuration can handle whether to call EcuM_CheckWakeup() from Icu interrupt function. */
  boolean                                                     IcuDisableEcumWakeupNotification;
  /* Enable Debug. */
  boolean                                                     EnableDebug;
} Icu_ChannelConfigType;

/** \brief Definition of the configuration of a group. */
typedef struct
{
  /* Pointer to channel list. */
  P2CONST(Icu_ChannelType, AUTOMATIC, ICU_APPL_CONST)         IcuChannelListPtr;
  /* Definition of the number of channels. */
  Icu_ChannelType                                             IcuChannelNumber;
  /* Hardware start trigger select value. */
  uint8                                                       InputStartTrigger;
} Icu_ChannelGroupConfigType;

/** \brief Definition of the extension configuration of edge detect channel. */
typedef struct
{
  /* Pointer to channel notification function. */
  Icu_FuncPtrType                     Notification;
} Icu_EdgeDetectExtensionConfigType;

/** \brief Definition of the extension configuration of a Signal Measurement channel. */
typedef struct
{
  /* Defines what to measure. */
  Icu_SignalMeasurementPropertyType   MeasurementProperty;
} Icu_SignalMeasExtConfigType;

/** \brief Definition of the extension configuration of TimeStamp channel. */
typedef struct
{
  /* The pointer to the notification function. */
  Icu_FuncPtrType                                  Notification;
  /* The pointer to the IcuDmaErrorNotification function. */
  Icu_FuncPtrType                                  DmaErrorNotification;
  /* Timestamp buffer name. */
  CONSTP2VAR(Icu_ValueType, ICU_CONST, ICU_APPL_DATA)  BufNamePtr;
  /* DataWire register base address. */
  volatile P2VAR(Icu_DataWireRegType, ICU_CONST, REGSPACE)       DWBaseAddress;
  /* Pointer to DataWire descriptor. */
  P2VAR(Icu_DataWireDescriptorType, AUTOMATIC, ICU_APPL_DATA)        DWDescPtr;
  /* Defines buffering strategy. */
  Icu_TimestampBufferType                          BufferMode;
  /* Timestamp buffer size. */
  uint16                                           BufSize;
  /* Uses DW transfer(TRUE = supportable, FALSE = unsupportable). */
  boolean                                          UseDMA;
} Icu_TimeStampExtensionConfigType;

/** \brief Definition of the functional pointer to register layer function. */
typedef P2FUNC(void, ICU_CODE, Icu_drvVoidFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr);

typedef P2FUNC(void, ICU_CODE, Icu_drvVoidFct2_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr, uint32 RegValue);

typedef P2FUNC(void, ICU_CODE, Icu_drvVoidFct3_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr, uint32 IntValue);

typedef P2FUNC(uint32, ICU_CODE, Icu_drvRegValFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr);

typedef P2FUNC(Icu_LevelType, ICU_CODE, Icu_drvEdgeFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr);

typedef P2FUNC(boolean, ICU_CODE, Icu_drvCheckRegFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr);

typedef P2FUNC(void, ICU_CODE, Icu_drvTriggerFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr, uint8 TriggerSrc);
        
typedef P2FUNC(void, ICU_CODE, Icu_drvCtrlFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr, boolean CtrlMode);

typedef P2FUNC(uint32, ICU_CODE, Icu_drvCalValFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,Icu_ActivationType Activation);

typedef P2FUNC(Icu_ActivationType, ICU_CODE, Icu_drvCheckActFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr);

typedef P2FUNC(uint8, ICU_CODE, Icu_drvDividFct_t) 
        (P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr);

struct Icu_drvFctTable_s
{
  /* The derivative specific process in initialization. */
  Icu_drvVoidFct_t         drvDriverInit;
  /* The derivative specific process in setting activation condition. */
  Icu_drvVoidFct2_t        drvSetActivationCondition;
  /* The derivative specific process in enabling ISR. */
  Icu_drvVoidFct3_t        drvIsrEnable;
  /* The derivative specific process in disabling ISR. */
  Icu_drvVoidFct3_t        drvIsrDisable;
  /* The derivative specific process in clearing interrupt request flag. */
  Icu_drvVoidFct3_t        drvClearInterruptRequestFlag;
  /* Get interrupt flag of ICU channels. */
  Icu_drvRegValFct_t       drvGetIsrRequestFlag;
  /* The derivative specific process in getting activation condition. */
  Icu_drvRegValFct_t       drvGetActivationCondition;
  /* The derivative specific process in getting input level. */
  Icu_drvEdgeFct_t         drvGetInputLevel;
  /* The derivative specific process in de-initialization. */
  Icu_drvVoidFct_t         drvDriverDeInit;
  /* The derivative specific process in starting count trigger. */
  Icu_drvVoidFct_t         drvStartCountTrigger;
  /* The derivative specific process in reloading count trigger. */
  Icu_drvVoidFct_t         drvReloadCountTrigger;
  /* The derivative specific process in check de-initialization register. */
  Icu_drvCheckRegFct_t     drvCheckDeinitRegister;
  /* The derivative specific process in check initialization register. */
  Icu_drvCheckRegFct_t     drvCheckInitRegister;
  /* The derivative specific process in setting input trigger. */
  Icu_drvTriggerFct_t      drvSetInputTrigger;
  /* The derivative specific process in setting reload trigger edge. */
  Icu_drvVoidFct_t         drvSetReloadTriggerEdge;
  /* The derivative specific process in clearing input trigger. */
  Icu_drvVoidFct_t         drvClearInputTrigger;
  /* The derivative specific process in calculating activation. */
  Icu_drvCalValFct_t       drvCalculateActivation;
  /* The derivative specific process in enabling counter. */
  Icu_drvCtrlFct_t         drvCtrlEnable;
  /* The derivative specific process in checking activation. */
  Icu_drvCheckActFct_t     drvCheckActivation;
  /* The derivative specific process in checking IsrAbility. */
  Icu_drvCheckRegFct_t     drvCheckIsrAbility;
  /* The derivative specific process in checking OverflowIsrAbility. */
  Icu_drvCheckRegFct_t     drvCheckOverflowIsrAbility;
  /* The derivative specific process in getting prescaler value. */
  Icu_drvDividFct_t        drvGetPrescalerValue;
  /* The derivative specific process in checking channel's status is running or not. */
  Icu_drvCheckRegFct_t     drvCheckChannelRunning;
  /* The derivative specific process in checking channel's status is stopped or not. */
  Icu_drvCheckRegFct_t     drvCheckChannelStop;
  /* The derivative specific process in checking capture interrupt was detected or not. */
  Icu_drvCheckRegFct_t     drvCheckIntrCause;
};

/** \brief Definition of the state of the driver. */
typedef struct
{
  /* ICU wakeup mode. */
  Icu_ModeType WakeupMode;
} Icu_StateType;

/** \brief Driver initialization data.
 **
 ** This type contains initialization data. */
typedef struct
{
  /* Pointer to a structure holding state data of the driver. */
  P2VAR(Icu_StateType, AUTOMATIC, ICU_APPL_DATA)           StatePtr;
  /* Pointer to an array holding configuration entries for all configured channels. */
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr;
  /* Pointer to an array holding configuration entries for all  configured groups. */
  P2CONST(Icu_ChannelGroupConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelGroupPtr;
  /* Pointer to Wakeup source (uint32 is dummy definition of EcuM_WakeupSourceType) */
  P2CONST(uint32, AUTOMATIC, ICU_APPL_CONST) WakeupSourcePtr;
  /* Pointer to channel id list of HW resource. */
  P2CONST(Icu_ChannelType, AUTOMATIC, ICU_APPL_CONST)       ResPtr;
  /* Number of configured ICU channels. */
  Icu_ChannelType   ConfiguredChannels;
  /* Number of configured ICU groups. */
  Icu_GroupType     ConfiguredGroups;
} Icu_ConfigType;

/* Icu_CheckChannelStatusType is structure of channel's state. */
typedef struct
{
  /* Driver status. */
  Icu_DriverStatusType    DriverStatus;
  /* Module wakeup mode. */
  Icu_ModeType            DriverWakeupMode;
  /* Channel activation edge. */
  Icu_ActivationType      ChannelActivationEdge;
  /* Channel running/stopped. */
  Icu_ChannelStatusType   ChannelStatus;
  /* Current prescaler register value. */
  uint8                   Prescaler;
  /* Enable/disable wakeup. */
  boolean                 ChannelWakeupEnable;
  /* Enable/disable Notification. */
  boolean                 ChannelNotifyEnabled;
  /* Enable/disable Overflow Notification. */
  boolean                 ChannelOverflowNotifyEnabled;
} Icu_CheckChannelStatusType;

/** \brief Register Type of GPIO Unit. */
typedef struct
{
  uint32 Out;            /* OUT register. */
  uint32 Out_clr;        /* OUT_CLR register. */
  uint32 Out_set;        /* OUT_SET register. */
  uint32 Out_inv;        /* OUT_INV register. */
  uint32 In;             /* IN register. */
  uint32 Intr;           /* INTR register. */
  uint32 Intr_mask;      /* INTR_MASK register. */
  uint32 Intr_masked;    /* INTR_MASKED register. */
  uint32 Intr_set;       /* INTR_SET register. */
  uint32 Dummy1[7];      /* Reserved. */
  uint32 Intr_cfg;       /* INTR_CFG register. */
  uint32 Cfg;            /* CFG register. */
  uint32 Cfg_in;         /* CFG_IN register. */
  uint32 Cfg_out;        /* CFG_OUT register. */
  uint32 Cfg_sio;        /* CFG_SIO register. */
  uint32 Dft_sio;        /* DFT_SIO register. */
  uint32 Cfg_in_gpio5v;  /* CFG_IN_GPIO5V register. */
} Icu_GpioRegType;

/** \brief Register Type of TCPWM Unit. */
typedef struct
{
  uint32 Ctrl;           /* Counter control register. */
  uint32 Status;         /* Counter status register. */
  uint32 Counter;        /* Counter count register. */
  uint32 Dummy1;         /* Reserved. */
  uint32 Cc0;            /* Counter compare/capture 0 register. */
  uint32 Cc0_buff;       /* Counter buffered compare/capture 0 register. */
  uint32 Cc1;            /* Counter compare/capture 1 register. */
  uint32 Cc1_buff;       /* Counter buffered compare/capture 1 register. */
  uint32 Period;         /* Counter period register. */
  uint32 Period_buff;    /* Counter buffered period register. */
  uint32 Line_sel;       /* Counter line selection register. */
  uint32 Line_sel_buff;  /* Counter buffered line selection register. */
  uint32 Dt;             /* Counter PWM dead time register. */
  uint32 Dummy2;         /* Reserved. */
  uint32 Dummy3;         /* Reserved. */
  uint32 Dummy4;         /* Reserved. */
  uint32 Tr_cmd;         /* Counter trigger command register. */
  uint32 Tr_in_sel0;     /* Counter input trigger selection register 0. */
  uint32 Tr_in_sel1;     /* Counter input trigger selection register 1. */
  uint32 Tr_in_edge_sel; /* Counter input trigger edge selection register. */
  uint32 Tr_pwm_ctrl;    /* Counter trigger PWM control register. */
  uint32 Tr_out_sel;     /* Counter output trigger selection register. */
  uint32 Dummy5;         /* Reserved. */
  uint32 Dummy6;         /* Reserved. */
  uint32 Dummy7;         /* Reserved. */
  uint32 Dummy8;         /* Reserved. */
  uint32 Dummy9;         /* Reserved. */
  uint32 Dummy10;        /* Reserved. */
  uint32 Intr;           /* Interrupt request register. */
  uint32 Intr_set;       /* Interrupt set request register. */
  uint32 Intr_mask;      /* Interrupt mask register. */
  uint32 Intr_masked;    /* Interrupt masked request register. */
} Icu_TcpwmRegType;


/*==================[external function declarations]========================*/

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/

#endif /* ifndef ICU_TYPES_H */
/*==================[end of file]============================================*/
