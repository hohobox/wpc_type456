#ifndef ICU_CHANNEL_H
#define ICU_CHANNEL_H
/** \file Icu_Channel.h
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file contains all architecture dependent Icu driver internal data
 ** and includes the needed derivative specifics.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Icu_Types.h>
/*==================[macros]=================================================*/

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/
#define ICU_START_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>

/* \brief Icu_SetWakeup_Internal
 **
 ** This function implements to enable/disable the wake-up capability of a channel.
 **
 ** \param[in] ChannelPtr  Pointer to the channel configuration.
 ** \param[in] Wak         Value depended to set the wake-up state of the specified channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_SetWakeup_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(boolean, AUTOMATIC)                                   Wak
);

/* \brief Icu_SetActivationCondition_Internal
 **
 ** This function implements to set the activation condition of the ICU channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 ** \param[in] Activation   The type of activation edge of an ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_SetActivationCondition_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(Icu_ActivationType, AUTOMATIC)                        Activation
);

/* \brief Icu_CheckChannelStatus_Internal
 **
 ** This function checks the internal state of a channel.
 **
 ** \param[in]  Channel                Numeric identifier of the ICU channel.
 ** \param[in]  DrvPtr                 Pointer to the driver configuration.
 ** \param[out] CheckChannelStatusPtr  Pointer to return the internal state.
 ** 
 ** \return     Return Channel status.
 **             TRUE:  Channel status is valid. 
 **             FALSE: Channel status is invalid.
 **
 ** */
extern FUNC(boolean, ICU_CODE) Icu_CheckChannelStatus_Internal
(
  VAR(Icu_ChannelType, AUTOMATIC)                               Channel,
  P2CONST(Icu_ConfigType, AUTOMATIC, ICU_APPL_CONST)            DrvPtr,
  P2VAR  (Icu_CheckChannelStatusType, AUTOMATIC, ICU_APPL_DATA) CheckChannelStatusPtr
);

/* \brief Icu_GetInputLevel_Internal
 **
 ** This function implements to get the level of the input pin related to an ICU channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    The level get from channel.
 **            ICU_HIGH: High level has been detected.
 **            ICU_LOW:  Low level has been detected.
 ** */
extern FUNC(Icu_LevelType, ICU_CODE) Icu_GetInputLevel_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_SetPrescaler_Internal
 **
 ** This function implements to set prescaler of channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 ** \param[in] ClockFrequency   Clock frequency.
 **
 ** \return    If calculated prescaler value is valid, return TRUE, else return FALSE.
 ** */
extern FUNC(boolean, ICU_CODE) Icu_SetPrescaler_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(Icu_ClkFrequencyType, AUTOMATIC)                      ClockFrequency
);

/** \brief Icu_GetInterruptRequestFlag
 **
 ** This function gets interrupt request flag of specific channel
 **
 ** \param[in] ChannelPtr Pointer to the channel configuration.
 **
 ** \return    Interrupt flag value.
 **            ICU_INT_OVERFLOW: Overflow interrupt flag.
 **            ICU_INT_CAPTURE : Capture interrupt flag.
 **            ICU_NO_INT      : No interrupt flag.
 ** */
extern FUNC(uint32, ICU_CODE) Icu_GetInterruptRequestFlag
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_CheckDMAChannel
 **
 ** This function check DW channel status.
 **
 ** \param[in]  ChannelPtr   Pointer to the channel configuration.
 ** \param[in]  DriverState  Current driver initial state.
 **
 ** \return     DW channel status.
 **             TRUE:  Channel status is valid. 
 **             FALSE: Channel status is invalid.
 ** */
extern FUNC(boolean, ICU_CODE) Icu_CheckDMAChannel
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(Icu_DriverStatusType, AUTOMATIC)                      DriverState
);
#define ICU_STOP_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>

/*==================[internal function declarations]=========================*/

#endif/* ifndef ICU_CHANNEL_H */
/*==================[end of file]============================================*/
