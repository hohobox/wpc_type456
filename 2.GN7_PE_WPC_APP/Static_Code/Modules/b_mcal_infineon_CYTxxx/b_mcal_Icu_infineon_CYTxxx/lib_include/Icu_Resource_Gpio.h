#ifndef ICU_RESOURCE_GPIO_H
#define ICU_RESOURCE_GPIO_H

/** \file Icu_Resource_Gpio.h
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file defines interfaces and macros of GPIO register access function.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Icu_Types.h>

/*==================[macros]=================================================*/
/* GPIO Register */
/* The value for masking EDGE_SEL bits of INTR_CFG register.     */
#define ICU_MASK_INTR_CFG_EDGE_SEL         ((uint32) 0x00000003UL)
/* The value for masking FLT_EDGE_SEL bits of INTR_CFG register. */
#define ICU_MASK_INTR_CFG_FLT_EDGE_SEL     ((uint32) 0x00030000UL)
/* The value for masking FLT_SEL bits of INTR_CFG register.      */
#define ICU_MASK_INTR_CFG_FLT_SEL          ((uint32) 0x001C0000UL)
/* The value for masking FLT_IN_IN bits of INTR register.        */
#define ICU_MASK_INTR_FLT_IN_IN            ((uint32) 0x01000000UL)

/* INTR_CFG[17:16] bit position for INTR_CFG register. */
#define ICU_SHIFT_INTR_CFG_FLT_EDGE_SEL    ((uint8) 16u)
/* INTR_CFG[20:18] bit position for INTR_CFG register. */
#define ICU_SHIFT_INTR_CFG_FLT_SEL         ((uint8) 18u)

/* INTR[8] bit position for INTR register.   */
#define ICU_SHIFT_INTR_FLT_EDGE            ((uint8) 8u)
/* INTR[16] bit position for INTR register.   */
#define ICU_SHIFT_INTR_IN_IN0              ((uint8) 16u)
/* INTR[24] bit position for INTR register.  */
#define ICU_SHIFT_INTR_FLT_IN_IN           ((uint8) 24u)

/* Value of INTR_CFG if select DISABLE. */
#define ICU_REGS_INTR_CFG_DISABLE          ((uint32) 0UL)
/* Value of INTR_CFG if select RISING.  */
#define ICU_REGS_INTR_CFG_RISING           ((uint32) 1UL)
/* Value of INTR_CFG if select FALLING. */
#define ICU_REGS_INTR_CFG_FALLING          ((uint32) 2UL)
/* Value of INTR_CFG if select BOTH.    */
#define ICU_REGS_INTR_CFG_BOTH             ((uint32) 3UL)

/* Value for masking bit 0. */
#define ICU_REGS_MASK_VALUE_1BIT           ((uint32) 0x00000001UL)
/* Definition the shift value for set/get INTR_CFG register. */
#define ICU_REGS_INTR_CFG_SHIFT_2BIT       ((uint8) 2u)
/* Pin number of port. */
#define ICU_REGS_PIN_NUMBER                ((uint8) 8u)
/* The value for masking resource id. */
#define ICU_MASK_PIN_NUMBER                ((uint32) 0x000000FFUL)

/* Register value when output high level. */
#define ICU_REGS_LEVEL_HIGH                ((uint32) 0x00000001UL)
/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

#define ICU_START_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>
/** \brief Icu_Resource_Gpio_ClearInterruptByBaseAddr
 **
 ** This function clears the interrupt request flag bit of GPIO.
 **
 ** \param[in] BaseAddress   Channel base address.
 ** \param[in] ResourceId    Resource id.
 **
 ** \return    None.
 ** */ 
extern FUNC(void, ICU_CODE) Icu_Resource_Gpio_ClearInterruptByBaseAddr
(
  volatile P2VAR(uint32, ICU_CONST, REGSPACE) BaseAddress,
  VAR(Icu_ResourceType, AUTOMATIC)            ResourceId
);

#define ICU_STOP_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>
/*==================[internal function definitions]==========================*/

#endif /* ifndef ICU_REGS_H */
/*==================[end of file]============================================*/
