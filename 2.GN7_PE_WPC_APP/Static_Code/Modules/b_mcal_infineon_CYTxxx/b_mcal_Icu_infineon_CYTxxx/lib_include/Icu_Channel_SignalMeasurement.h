#ifndef ICU_CHANNEL_SIGNALMEASUREMENT_H
#define ICU_CHANNEL_SIGNALMEASUREMENT_H
/** \file
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file contains all architecture dependent Icu driver internal data
 ** and includes the needed derivative specifics.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Icu_Types.h>
/*==================[macros]=================================================*/

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

#define ICU_START_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>

/** \brief Icu_GetDutyCycleValues_Internal
 **
 ** This function implements to read the coherent active time and period time
 ** for the given ICU Channel.
 **
 **
 ** \param[in] ChannelPtr           Pointer to the channel configuration.
 ** \param[out] DutyCycleValuePtr    Pointer to a buffer where the results
 ** (high time and period time) shall be placed.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_GetDutyCycleValues_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  P2VAR(Icu_DutyCycleType, AUTOMATIC, ICU_APPL_DATA)        DutyCycleValuePtr
);

/** \brief Icu_GetTimeElapsed_Internal
 **
 ** This function implements to get time elapsed in given channel.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    The elapsed signal low time for the given channel.
 ** */
extern FUNC(Icu_ValueType, ICU_CODE) Icu_GetTimeElapsed_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Measure_InterruptEvent
 **
 ** This function is the ISR of measure mode.
 **
 ** \param[in] ChannelPtr    Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Measure_InterruptEvent
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(uint8, AUTOMATIC) IntrFlag
);

/** \brief Icu_StartSignalMeasurement_Internal
 **
 ** This function implements to start signal measurement for given channel.
 **
 **
 ** \param[in] ChannelPtr           Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StartSignalMeasurement_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_StopSignalMeasurement_Internal
 **
 ** This function implements to stop signal measurement for given channel.
 **
 **
 ** \param[in] ChannelPtr           Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StopSignalMeasurement_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/* \brief Icu_SetMeasurementOverflowNotification
 **
 ** This function implements to enable/disable the overflow notification of a channel in signal measurement.
 **
 ** \param[in] ChannelPtr  Pointer to the channel configuration.
 ** \param[in] OverNoti    Value depended to set the overflow notification state of the specified channel.
 ** \param[in] Mode       ICU_MODE_NORMAL or ICU_MODE_SLEEP.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_SetMeasurementOverflowNotification
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(boolean, AUTOMATIC)                                   OverNoti,
  VAR(Icu_ModeType, AUTOMATIC)                              Mode
);

/* \brief Icu_GetMeasurementInputState
 **
 ** This function implements to get the input the state of a channel in signal measurement.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    ICU_ACTIVE: An activation edge has been detected.
 **            ICU_IDLE: No activation edge has been detected 
 **            since the last call of Icu_GetInputState () or Icu_Init ().
 **
 ** */
extern FUNC(Icu_InputStateType, ICU_CODE) Icu_GetMeasurementInputState
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

#define ICU_STOP_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>
/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/
#endif
/*==================[end of file]============================================*/
