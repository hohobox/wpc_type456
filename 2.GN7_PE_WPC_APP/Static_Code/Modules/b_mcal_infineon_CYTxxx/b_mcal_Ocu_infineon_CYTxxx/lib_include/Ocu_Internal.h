#ifndef OCU_INTERNAL_H_INCLUDED
#define OCU_INTERNAL_H_INCLUDED

/** \brief AUTOSAR Ocu Driver
 **
 ** This file define interface of internal architecture function of Ocu driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Ocu_Types.h>   /* Module public types */

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/
#define OCU_START_SEC_CODE_ASIL_B
#include <Ocu_MemMap.h>

/** \brief Ocu_CheckConfigPtr
 **
 ** This function checks the configuration pointer whether is valid.
 **
 ** \param [in] ConfigPtr  Pointer of data stored configuration set information.
 **
 ** \return  If parameter ConfigPtr is a valid pointer, return TRUE,
 **          else return FALSE.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_CheckConfigPtr
(
  P2CONST( Ocu_ConfigType, AUTOMATIC, OCU_APPL_CONST ) ConfigPtr
);

/** \brief Ocu_DeInit_Internal
 **
 ** Internal implementation of OCU driver De-initialization.
 **
 ** \param [in] ConfigPtr  Pointer of data stored configuration set information.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_DeInit_Internal
(
  P2CONST( Ocu_ConfigType, AUTOMATIC, OCU_APPL_CONST ) ConfigPtr
);

/** \brief Ocu_DisableNotification_Internal
 **
 ** Disable notifications from an OCU channel.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_DisableNotification_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_EnableNotification_Internal
 **
 ** Enable notifications from an OCU channel.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_EnableNotification_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_CheckChannelStatus_Internal
 **
 ** Check the current status of the channel.
 **
 ** \param [in] ChannelCfgPtr      Pointer to channel configuration.
 ** \param [out] ChannelStatusPtr  Pointer to where to store the channel status information.
 **
 ** \return  TRUE: Software and hardware states are in sync.
 **          FALSE: Software and hardware states are inconsistent.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_CheckChannelStatus_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  P2VAR( Ocu_ChannelStatusType, AUTOMATIC, OCU_APPL_DATA ) ChannelStatusPtr
);

/** \brief Ocu_GetCounter_Internal
 **
 ** Read the current value of the counter.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 ** \return  Content of the counter in ticks.
 **
 */
extern FUNC( Ocu_ValueType, OCU_CODE ) Ocu_GetCounter_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_GetDriverStatus
 **
 ** Provides current driver status.
 **
 ** \return  Driver status.
 **
 */
extern FUNC( Ocu_DriverStatusType, OCU_CODE ) Ocu_GetDriverStatus( void );

/** \brief Ocu_Init_Internal
 **
 ** OCU driver initialization.
 **
 ** \param [in] ConfigPtr           Pointer of data stored configuration set information.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_Init_Internal
(
  P2CONST( Ocu_ConfigType, AUTOMATIC, OCU_APPL_CONST ) ConfigPtr
);

/** \brief Ocu_SetAbsoluteThreshold_Internal
 **
 ** Set the value of the channel threshold using an absolute input data.
 **
 ** \param [in] ChannelCfgPtr   Pointer to channel configuration.
 ** \param [in] ReferenceValue  Value given by the upper layer and used as a base to determine
 **                             whether to call the notification before the function exits or not.
 ** \param [in] AbsoluteValue   Value to compare with the content of the counter. This value is in ticks.
 **
 ** \return  If the compare match will occur inside the current Reference Interval,
 **          return TRUE, else return FALSE.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_SetAbsoluteThreshold_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_ValueType, AUTOMATIC ) ReferenceValue,
  VAR( Ocu_ValueType, AUTOMATIC ) AbsoluteValue
);

/** \brief Ocu_SetDriverStatus
 **
 ** Set current driver status.
 **
 ** \param [in] DrvStatus  Driver status.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_SetDriverStatus
(
  VAR( Ocu_DriverStatusType, AUTOMATIC ) DrvStatus
);

/** \brief Ocu_SetPinAction_Internal
 **
 ** Indicate the driver what shall be done automatically by hardware upon compare match.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 ** \param [in] PinAction      Type of pin action:
 **                            OCU_SET_LOW or
 **                            OCU_SET_HIGH or
 **                            OCU_TOGGLE or
 **                            OCU_DISABLE.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_SetPinAction_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_PinActionType, AUTOMATIC ) PinAction
);

/** \brief Ocu_SetPinState_Internal
 **
 ** Set immediately the level of the pin associated to an OCU channel.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 ** \param [in] PinState       Type of pin state:
 **                            OCU_LOW or
 **                            OCU_HIGH.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_SetPinState_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_PinStateType, AUTOMATIC ) PinState
);

/** \brief Ocu_SetPrescaler_Internal
 **
 ** Calculate prescaler value and update value on hardware.
 **
 ** \param [in] ChannelCfgPtr   Pointer to channel configuration.
 ** \param [in] ClockFrequency  Input clock frequency.
 **
 ** \return  If calculated prescaler value is valid, return TRUE, else return FALSE.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_SetPrescaler_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_ClkFrequencyType, AUTOMATIC ) ClockFrequency
);

/** \brief Ocu_SetRelativeThreshold_Internal
 **
 ** Set the value of the channel threshold relative to the current value of the counter.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 ** \param [in] RelativeValue  Value to use for computing the new threshold.
 **
 ** \return  If the compare match will occur inside the current Reference Interval,
 **          return TRUE, else return FALSE.
 */
extern FUNC( boolean, OCU_CODE ) Ocu_SetRelativeThreshold_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_ValueType, AUTOMATIC ) RelativeValue
);

/** \brief Ocu_StartChannel_Internal
 **
 ** Start an OCU channel.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_StartChannel_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_StopChannel_Internal
 **
 ** Stop an OCU channel.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_StopChannel_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_EnterCriticalSection
 **
 ** Enter critical section.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_EnterCriticalSection( void );

/** \brief Ocu_ExitCriticalSection
 **
 ** Exit critical section.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_ExitCriticalSection( void );

/** \brief Ocu_InterruptHandler_Internal
 **
 ** Generic interrupt handler that is called from specific interrupt handlers.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_InterruptHandler_Internal
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_ClearChannelInterruptByBaseAddr
 **
 ** Clear the interrupt flag by base address of HW timer.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_ClearChannelInterruptByBaseAddr
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_InterruptHandler
 **
 ** Handles channel interrupt. This function is called only within the ISR.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 ** \param [in] ResIndex     ID of a hardware resources.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_InterruptHandler
(
  CONST( uint32, AUTOMATIC )          BaseAddress,
  VAR( Ocu_ChannelType, AUTOMATIC )   ResIndex
);

/** \brief Ocu_GetStatusRunning
 **
 ** Get counter running status.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 ** \return  TRUE:  Counter is running.
 **          FALSE: Counter is not running.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_GetStatusRunning
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

#define OCU_STOP_SEC_CODE_ASIL_B
#include <Ocu_MemMap.h>

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

#endif /*!defined(OCU_INTERNAL_H_INCLUDED)*/
/*==================[end of file]===========================================*/
