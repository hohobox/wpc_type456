#ifndef OCU_TYPES_H_INCLUDED
#define OCU_TYPES_H_INCLUDED

/** \brief AUTOSAR Ocu Driver
 **
 ** This file contains the implementation of the AUTOSAR module Ocu type.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Std_Types.h>   /* AUTOSAR standard types */

/*==================[macros]================================================*/
/* Counter output trigger is disabled */
#define OCU_TRIGGER_DISABLE                       ( (uint8) 0x00U )
/* Counter output trigger on OUT0 */
#define OCU_TRIGGER_OUT0                          ( (uint8) 0x01U )
/* Counter output trigger on OUT1 */
#define OCU_TRIGGER_OUT1                          ( (uint8) 0x02U )

/* Impossible divider. */
#define OCU_PRESCALING_DIVIDE_NONE                ( (uint8) 0x00U )
/* Pre-scaling is divide by 1. */
#define OCU_PRESCALING_DIVIDE_BY_1                ( (uint8) 0x01U )
/* Pre-scaling is divide by 2. */
#define OCU_PRESCALING_DIVIDE_BY_2                ( (uint8) 0x02U )
/* Pre-scaling is divide by 4. */
#define OCU_PRESCALING_DIVIDE_BY_4                ( (uint8) 0x04U )
/* Pre-scaling is divide by 8. */
#define OCU_PRESCALING_DIVIDE_BY_8                ( (uint8) 0x08U )
/* Pre-scaling is divide by 16. */
#define OCU_PRESCALING_DIVIDE_BY_16               ( (uint8) 0x10U )
/* Pre-scaling is divide by 32. */
#define OCU_PRESCALING_DIVIDE_BY_32               ( (uint8) 0x20U )
/* Pre-scaling is divide by 64. */
#define OCU_PRESCALING_DIVIDE_BY_64               ( (uint8) 0x40U )
/* Pre-scaling is divide by 128. */
#define OCU_PRESCALING_DIVIDE_BY_128              ( (uint8) 0x80U )
/* Half divider value. */
#define OCU_HALF_DIVIDER                          ( (uint8) 0x02U )

/* Timer width */
/* 16bit timer width */
#define OCU_TIMER_WIDTH_16                        ( (uint8) 0x10U )
/* 32bit timer width */
#define OCU_TIMER_WIDTH_32                        ( (uint8) 0x20U )

/* Invalid input trigger select value. */
#define OCU_INVALID_TRIGGERVALUE                  ( (uint8) 0xFFU )
/* Invalid channel identifier value. */
#define OCU_INVALID_CHANNELID                     ( (uint16) 0xFFFFU )

/*==================[type definitions]=======================================*/
/* \brief typedef Ocu_ChannelType
 **
 ** Numeric identifier of an OCU channel.
 **
 ** This is implementation specific but not all values may be valid within the type.
 ** This type shall be chosen in order to have the most efficient implementation on a specific microcontroller platform.
 **
 */
typedef uint16 Ocu_ChannelType;

/* \brief typedef Ocu_ClkFrequencyType
 **
 ** Type for frequency of a counter input clock (Hz).
 **
 ** This type shall be chosen in order to have the most efficient implementation on a specific microcontroller platform.
 **
 */
typedef uint32 Ocu_ClkFrequencyType;

/* \brief typedef Ocu_ValueType
 **
 ** Type for reading the counter and writing the threshold values (in number of ticks).
 **
 ** This is implementation specific but not all values may be valid within the type.
 ** This type shall be chosen in order to have the most efficient implementation on a specific microcontroller platform.
 **
 */
typedef uint32 Ocu_ValueType;

/* \brief Notification function pointer type */
typedef P2FUNC( void, TYPEDEF, Ocu_NotificationFuncType )( void );

/* \brief States of an OCU channel. */
typedef enum
{
    /* OCU channel state: Uninitialized. */
    OCU_CH_UNINITIALIZED = 0,
    /* OCU channel state: Stopped. */
    OCU_CH_STOPPED,
    /* OCU channel state: Running. */
    OCU_CH_RUNNING
} Ocu_ChannelStateType;

/* \brief Driver state of the OCU module. */
typedef enum
{
    /* Driver was uninitialized. */
    OCU_S_UNINITIALIZED = 0,
    /* Driver was initialized. */
    OCU_S_INITIALIZED
} Ocu_DriverStatusType;

/* \brief Return information after setting a new threshold value. */
typedef enum
{
    /* The compare match will occur inside the current Reference Interval. */
    OCU_CM_IN_REF_INTERVAL = 0,
    /* The compare match will not occur inside the current Reference Interval. */
    OCU_CM_OUT_REF_INTERVAL
} Ocu_ReturnType;

/* \brief Output state of the pin linked to an OCU channel. */
typedef enum
{
    /* The pin associated to an OCU channel is in high state. */
    OCU_HIGH = 0,
    /* The pin associated to an OCU channel is in low state. */
    OCU_LOW = 1,
    /* The pin associated to an OCU channel is in invalid state. */
    OCU_PIN_STATE_INVALID_VALUE = 3
} Ocu_PinStateType;

/* \brief Automatic action (by hardware) to be performed on a pin attached to an OCU channel. */
typedef enum
{
    /* The channel pin will be set HIGH upon compare match. */
    OCU_SET_HIGH = 0,
    /* The channel pin will be set LOW upon compare match. */
    OCU_SET_LOW,
    /* The channel pin will be set to the opposite of its current level HIGH upon compare match. */
    OCU_TOGGLE,
    /* The channel pin will remain at its current level upon compare match. */
    OCU_DISABLE
} Ocu_PinActionType;

/* \brief Count direction for the whole OCU driver. */
typedef enum
{
    /* The OCU counter will reckon from the maximum to the minimum value. */
    OCU_DOWNCOUNTING = 0,
    /* The OCU counter will reckon from the minimum to the maximum value. */
    OCU_UPCOUNTING
} Ocu_CountDirectionType;

/* \brief Status of an OCU channel. */
typedef struct Ocu_ChannelStatusType_Struct
{
    /* The setting of threshold. */
    VAR( Ocu_ValueType, AUTOMATIC )                 SettingThreshold;
    /* Holds the current pin state value. */
    VAR( Ocu_PinStateType, AUTOMATIC )              PinState;
    /* Holds the current pin action value. */
    VAR( Ocu_PinActionType, AUTOMATIC )             PinAction;
    /* Holds the current channel state. */
    VAR( Ocu_ChannelStateType, AUTOMATIC )          ChannelState;
    /* The current channel number. */
    VAR( Ocu_ChannelType, AUTOMATIC )               ChannelId;
    /* Holds the current prescaler register value. */
    VAR( uint8, AUTOMATIC )                         Prescale;
    /* Notification is Enabled or not. */
    VAR( boolean, AUTOMATIC )                       NotificationEnabled;
} Ocu_ChannelStatusType;

/* \brief This is the type of the data structure containing the initialization data for the OCU channels. */
typedef struct Ocu_ChannelConfigType_Struct
{
    /* Base address of current channel. */
    CONST( uint32, OCU_CONST ) BaseAddress;
    /* Default value of comparison threshold. */
    CONST( Ocu_ValueType, OCU_CONST ) DefaultThreshold;
    /* Maximum value in ticks, the counter of the OCU channel is able to count. */
    CONST( Ocu_ValueType, OCU_CONST ) MaxCounterValue;
    /* Frequency of a counter input clock (Hz). */
    CONST( Ocu_ClkFrequencyType, OCU_CONST ) TickFrequency;
    /* Status of channel. */
    CONSTP2VAR( Ocu_ChannelStatusType, OCU_CONST, OCU_APPL_DATA ) ChannelStatusPtr;
    /* Notification function. */
    CONST( Ocu_NotificationFuncType, OCU_CONST ) Notification;
    /* The value of the Pin state. */
    CONST( Ocu_PinStateType, OCU_CONST ) OutputPinDefaultState;
    /* Channel number. */
    CONST( Ocu_ChannelType, OCU_CONST ) ChannelId;
    /* Prescaling value. */
    CONST( uint8, OCU_CONST ) Prescale;
    /* Output trigger selection. */
    CONST( uint8, OCU_CONST ) TriggerOutputSelect;
    /* Timer width */
    CONST( uint8, OCU_CONST ) TimerWide;
    /* Select trigger value */
    CONST( uint8, OCU_CONST ) StartTriggerSelectValue;
    /* The usage of an output pin on this channel. */
    CONST( boolean, OCU_CONST ) OuptutPinUsed;
    /* Debug mode of channel (TRUE = halt, FALSE = continue). */
    CONST( boolean, OCU_CONST ) DebugMode;
} Ocu_ChannelConfigType;

/* \brief This is the type of the data structure containing the initialization data for the OCU driver. */
typedef struct Ocu_ConfigType_Struct
{
    /* Pointer to Ocu channel configuration. */
    P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr;
    /* Pointer to channel id list of HW resource. */
    P2CONST( Ocu_ChannelType, AUTOMATIC, OCU_APPL_CONST ) HwResourceChannelPtr;
    /* Count direction. */
    CONST( Ocu_CountDirectionType, OCU_CONST ) CountDirection;
    /* Number of configured channels. */
    CONST( Ocu_ChannelType, OCU_CONST ) NumberOfChannels;
} Ocu_ConfigType;

/* \brief Defines structure of Counter Timer Register Map. */
typedef struct Ocu_TcpwmRegType_Struct
{
    /* 0x00: Counter control register */
    VAR( uint32, AUTOMATIC ) Ctrl;
    /* 0x04: Counter status register */
    VAR( uint32, AUTOMATIC ) Status;
    /* 0x08: Counter count register */
    VAR( uint32, AUTOMATIC ) Counter;
    /* 0x0C: Reserved */
    VAR( uint32, AUTOMATIC ) Reserved_0;
    /* 0x10: Counter compare/capture 0 register */
    VAR( uint32, AUTOMATIC ) Cc0;
    /* 0x14: Counter buffered compare/capture 0 register */
    VAR( uint32, AUTOMATIC ) Cc0_Buff;
    /* 0x18: Counter compare/capture 1 register */
    VAR( uint32, AUTOMATIC ) Cc1;
    /* 0x1C: Counter buffered compare/capture 1 register */
    VAR( uint32, AUTOMATIC ) Cc1_Buff;
    /* 0x20: Counter period register */
    VAR( uint32, AUTOMATIC ) Period;
    /* 0x24: Counter buffered period register */
    VAR( uint32, AUTOMATIC ) Period_Buff;
    /* 0x28: Counter line selection register */
    VAR( uint32, AUTOMATIC ) Line_Sel;
    /* 0x2C: Counter buffered line selection register */
    VAR( uint32, AUTOMATIC ) Line_Sel_Buff;
    /* 0x30: Counter PWM dead time register */
    VAR( uint32, AUTOMATIC ) Dt;
    /* 0x34: Reserved */
    VAR( uint32, AUTOMATIC ) Reserved_1[3];
    /* 0x40: Counter trigger command register */
    VAR( uint32, AUTOMATIC ) Tr_Cmd;
    /* 0x44: Counter input trigger selection register 0 */
    VAR( uint32, AUTOMATIC ) Tr_In_Sel0;
    /* 0x48: Counter input trigger selection register 1 */
    VAR( uint32, AUTOMATIC ) Tr_In_Sel1;
    /* 0x4C: Counter input trigger edge selection register */
    VAR( uint32, AUTOMATIC ) Tr_In_Edge_Sel;
    /* 0x50: Counter trigger PWM control register */
    VAR( uint32, AUTOMATIC ) Tr_Pwm_Ctrl;
    /* 0x54: Counter output trigger selection register */
    VAR( uint32, AUTOMATIC ) Tr_Out_Sel;
    /* 0x58: Reserved */
    VAR( uint32, AUTOMATIC ) Reserved_2[6];
    /* 0x70: Interrupt request register */
    VAR( uint32, AUTOMATIC ) Intr;
    /* 0x74: Interrupt set request register */
    VAR( uint32, AUTOMATIC ) Intr_Set;
    /* 0x78: Interrupt mask register */
    VAR( uint32, AUTOMATIC ) Intr_Mask;
    /* 0x7C: Interrupt masked request register */
    VAR( uint32, AUTOMATIC ) Intr_Masked;
}Ocu_TcpwmRegType;

/*==================[external function declarations]========================*/

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

/*==================[external function declarations]========================*/

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

#endif /*!defined(OCU_TYPES_H_INCLUDED)*/
/*==================[end of file]===========================================*/
