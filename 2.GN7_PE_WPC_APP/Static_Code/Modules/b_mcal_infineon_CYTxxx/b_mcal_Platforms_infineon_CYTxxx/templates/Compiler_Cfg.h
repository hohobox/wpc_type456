
#ifndef COMPILER_CFG_H
#define COMPILER_CFG_H

/** \brief AUTOSAR compiler abstraction header
 **
 ** This file contains compiler specific declarations for the
 ** platform using the compiler GHS for ARM architectures
 **
 ** It contains module specific memory and pointer classes
 **
 ** See "Specification of Compiler Abstraction".
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/* Deviation from MISRA-C:2004 rule 1.1 and QA-C message 857, MISRA-C:2012 Dir-1.1.
   Justification: The number of macro definition exceeds 1024 to maintain readable source code. */
/* PRQA S 857 EOF */

/*==================[inclusions]=============================================*/

/*==================[macros]=================================================*/

/*------------------[memory and pointer class of module ADC]-----------------*/

#if (defined ADC_CODE) /* to prevent double definition */
#error ADC_CODE already defined
#endif /* if (defined ADC_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define ADC_CODE

#if (defined ADC_CODE_FAST) /* to prevent double definition */
#error ADC_CODE_FAST already defined
#endif /* if (defined ADC_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define ADC_CODE_FAST

#if (defined ADC_CODE_SLOW) /* to prevent double definition */
#error ADC_CODE_SLOW already defined
#endif /* if (defined ADC_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define ADC_CODE_SLOW

#if (defined ADC_CONFIG_DATA) /* to prevent double definition */
#error ADC_CONFIG_DATA already defined
#endif /* if (defined ADC_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define ADC_CONFIG_DATA

#if (defined ADC_CONST) /* to prevent double definition */
#error ADC_CONST already defined
#endif /* if (defined ADC_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define ADC_CONST

#if (defined ADC_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error ADC_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined ADC_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define ADC_CONST_SAVED_RECOVERY_ZONE

#if (defined ADC_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error ADC_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined ADC_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define ADC_INTERNAL_VAR_NO_INIT

#if (defined ADC_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error ADC_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined ADC_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define ADC_INTERNAL_VAR_CLEARED

#if (defined ADC_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ADC_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ADC_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define ADC_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined ADC_INTERNAL_VAR_INIT) /* to prevent double definition */
#error ADC_INTERNAL_VAR_INIT already defined
#endif /* if (defined ADC_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define ADC_INTERNAL_VAR_INIT

#if (defined ADC_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ADC_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined ADC_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define ADC_INTERNAL_VAR_POWER_ON_INIT

#if (defined ADC_CALIB) /* to prevent double definition */
#error ADC_CALIB already defined
#endif /* if (defined ADC_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define ADC_CALIB

#if (defined ADC_APPL_DATA) /* to prevent double definition */
#error ADC_APPL_DATA already defined
#endif /* if (defined ADC_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define ADC_APPL_DATA

#if (defined ADC_APPL_CONST) /* to prevent double definition */
#error ADC_APPL_CONST already defined
#endif /* if (defined ADC_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define ADC_APPL_CONST

#if (defined ADC_VAR_NO_INIT) /* to prevent double definition */
#error ADC_VAR_NO_INIT already defined
#endif /* if (defined ADC_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define ADC_VAR_NO_INIT

#if (defined ADC_VAR_CLEARED) /* to prevent double definition */
#error ADC_VAR_CLEARED already defined
#endif /* if (defined ADC_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define ADC_VAR_CLEARED

#if (defined ADC_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ADC_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ADC_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define ADC_VAR_POWER_ON_CLEARED

#if (defined ADC_VAR_INIT) /* to prevent double definition */
#error ADC_VAR_INIT already defined
#endif /* if (defined ADC_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define ADC_VAR_INIT

#if (defined ADC_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ADC_VAR_POWER_ON_INIT already defined
#endif /* if (defined ADC_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define ADC_VAR_POWER_ON_INIT

#if (defined ADC_VAR_FAST_NO_INIT) /* to prevent double definition */
#error ADC_VAR_FAST_NO_INIT already defined
#endif /* if (defined ADC_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ADC_VAR_FAST_NO_INIT

#if (defined ADC_VAR_FAST_CLEARED) /* to prevent double definition */
#error ADC_VAR_FAST_CLEARED already defined
#endif /* if (defined ADC_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ADC_VAR_FAST_CLEARED

#if (defined ADC_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error ADC_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined ADC_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ADC_VAR_FAST_POWER_ON_CLEARED

#if (defined ADC_VAR_FAST_INIT) /* to prevent double definition */
#error ADC_VAR_FAST_INIT already defined
#endif /* if (defined ADC_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ADC_VAR_FAST_INIT

#if (defined ADC_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error ADC_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined ADC_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ADC_VAR_FAST_POWER_ON_INIT

#if (defined ADC_VAR_SAVED_ZONE) /* to prevent double definition */
#error ADC_VAR_SAVED_ZONE already defined
#endif /* if (defined ADC_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define ADC_VAR_SAVED_ZONE

#if (defined ADC_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error ADC_VAR_SLOW_NO_INIT already defined
#endif /* if (defined ADC_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define ADC_VAR_SLOW_NO_INIT

#if (defined ADC_VAR_SLOW_CLEARED) /* to prevent double definition */
#error ADC_VAR_SLOW_CLEARED already defined
#endif /* if (defined ADC_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define ADC_VAR_SLOW_CLEARED

#if (defined ADC_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error ADC_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined ADC_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define ADC_VAR_SLOW_POWER_ON_CLEARED

#if (defined ADC_VAR_SLOW_INIT) /* to prevent double definition */
#error ADC_VAR_SLOW_INIT already defined
#endif /* if (defined ADC_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define ADC_VAR_SLOW_INIT

#if (defined ADC_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error ADC_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined ADC_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define ADC_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CAN]-----------------*/

#if (defined CAN_CODE) /* to prevent double definition */
#error CAN_CODE already defined
#endif /* if (defined CAN_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CAN_CODE

#if (defined CAN_CODE_FAST) /* to prevent double definition */
#error CAN_CODE_FAST already defined
#endif /* if (defined CAN_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CAN_CODE_FAST

#if (defined CAN_CODE_SLOW) /* to prevent double definition */
#error CAN_CODE_SLOW already defined
#endif /* if (defined CAN_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CAN_CODE_SLOW

#if (defined CAN_CONFIG_DATA) /* to prevent double definition */
#error CAN_CONFIG_DATA already defined
#endif /* if (defined CAN_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CAN_CONFIG_DATA

#if (defined CAN_CONST) /* to prevent double definition */
#error CAN_CONST already defined
#endif /* if (defined CAN_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CAN_CONST

#if (defined CAN_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CAN_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CAN_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CAN_CONST_SAVED_RECOVERY_ZONE

#if (defined CAN_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CAN_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CAN_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CAN_INTERNAL_VAR_NO_INIT

#if (defined CAN_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CAN_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CAN_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CAN_INTERNAL_VAR_CLEARED

#if (defined CAN_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CAN_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CAN_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CAN_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CAN_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CAN_INTERNAL_VAR_INIT already defined
#endif /* if (defined CAN_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CAN_INTERNAL_VAR_INIT

#if (defined CAN_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CAN_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CAN_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CAN_INTERNAL_VAR_POWER_ON_INIT

#if (defined CAN_CALIB) /* to prevent double definition */
#error CAN_CALIB already defined
#endif /* if (defined CAN_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CAN_CALIB

#if (defined CAN_APPL_DATA) /* to prevent double definition */
#error CAN_APPL_DATA already defined
#endif /* if (defined CAN_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CAN_APPL_DATA

#if (defined CAN_APPL_CONST) /* to prevent double definition */
#error CAN_APPL_CONST already defined
#endif /* if (defined CAN_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CAN_APPL_CONST

#if (defined CAN_VAR_NO_INIT) /* to prevent double definition */
#error CAN_VAR_NO_INIT already defined
#endif /* if (defined CAN_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CAN_VAR_NO_INIT

#if (defined CAN_VAR_CLEARED) /* to prevent double definition */
#error CAN_VAR_CLEARED already defined
#endif /* if (defined CAN_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CAN_VAR_CLEARED

#if (defined CAN_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CAN_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CAN_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CAN_VAR_POWER_ON_CLEARED

#if (defined CAN_VAR_INIT) /* to prevent double definition */
#error CAN_VAR_INIT already defined
#endif /* if (defined CAN_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CAN_VAR_INIT

#if (defined CAN_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CAN_VAR_POWER_ON_INIT already defined
#endif /* if (defined CAN_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CAN_VAR_POWER_ON_INIT

#if (defined CAN_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CAN_VAR_FAST_NO_INIT already defined
#endif /* if (defined CAN_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAN_VAR_FAST_NO_INIT

#if (defined CAN_VAR_FAST_CLEARED) /* to prevent double definition */
#error CAN_VAR_FAST_CLEARED already defined
#endif /* if (defined CAN_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAN_VAR_FAST_CLEARED

#if (defined CAN_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CAN_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CAN_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAN_VAR_FAST_POWER_ON_CLEARED

#if (defined CAN_VAR_FAST_INIT) /* to prevent double definition */
#error CAN_VAR_FAST_INIT already defined
#endif /* if (defined CAN_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAN_VAR_FAST_INIT

#if (defined CAN_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CAN_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CAN_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAN_VAR_FAST_POWER_ON_INIT

#if (defined CAN_VAR_SAVED_ZONE) /* to prevent double definition */
#error CAN_VAR_SAVED_ZONE already defined
#endif /* if (defined CAN_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CAN_VAR_SAVED_ZONE

#if (defined CAN_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CAN_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CAN_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CAN_VAR_SLOW_NO_INIT

#if (defined CAN_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CAN_VAR_SLOW_CLEARED already defined
#endif /* if (defined CAN_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CAN_VAR_SLOW_CLEARED

#if (defined CAN_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CAN_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CAN_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CAN_VAR_SLOW_POWER_ON_CLEARED

#if (defined CAN_VAR_SLOW_INIT) /* to prevent double definition */
#error CAN_VAR_SLOW_INIT already defined
#endif /* if (defined CAN_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CAN_VAR_SLOW_INIT

#if (defined CAN_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CAN_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CAN_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CAN_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CANIF]---------------*/

#if (defined CANIF_CODE) /* to prevent double definition */
#error CANIF_CODE already defined
#endif /* if (defined CANIF_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANIF_CODE

#if (defined CANIF_CODE_FAST) /* to prevent double definition */
#error CANIF_CODE_FAST already defined
#endif /* if (defined CANIF_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CANIF_CODE_FAST

#if (defined CANIF_CODE_SLOW) /* to prevent double definition */
#error CANIF_CODE_SLOW already defined
#endif /* if (defined CANIF_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CANIF_CODE_SLOW

#if (defined CANIF_CONFIG_DATA) /* to prevent double definition */
#error CANIF_CONFIG_DATA already defined
#endif /* if (defined CANIF_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CANIF_CONFIG_DATA

#if (defined CANIF_CONST) /* to prevent double definition */
#error CANIF_CONST already defined
#endif /* if (defined CANIF_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANIF_CONST

#if (defined CANIF_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CANIF_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CANIF_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CANIF_CONST_SAVED_RECOVERY_ZONE

#if (defined CANIF_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CANIF_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CANIF_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CANIF_INTERNAL_VAR_NO_INIT

#if (defined CANIF_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CANIF_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CANIF_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CANIF_INTERNAL_VAR_CLEARED

#if (defined CANIF_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANIF_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANIF_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CANIF_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CANIF_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CANIF_INTERNAL_VAR_INIT already defined
#endif /* if (defined CANIF_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CANIF_INTERNAL_VAR_INIT

#if (defined CANIF_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANIF_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANIF_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CANIF_INTERNAL_VAR_POWER_ON_INIT

#if (defined CANIF_CALIB) /* to prevent double definition */
#error CANIF_CALIB already defined
#endif /* if (defined CANIF_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CANIF_CALIB

#if (defined CANIF_APPL_DATA) /* to prevent double definition */
#error CANIF_APPL_DATA already defined
#endif /* if (defined CANIF_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANIF_APPL_DATA

#if (defined CANIF_APPL_CONST) /* to prevent double definition */
#error CANIF_APPL_CONST already defined
#endif /* if (defined CANIF_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANIF_APPL_CONST

#if (defined CANIF_VAR_NO_INIT) /* to prevent double definition */
#error CANIF_VAR_NO_INIT already defined
#endif /* if (defined CANIF_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CANIF_VAR_NO_INIT

#if (defined CANIF_VAR_CLEARED) /* to prevent double definition */
#error CANIF_VAR_CLEARED already defined
#endif /* if (defined CANIF_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CANIF_VAR_CLEARED

#if (defined CANIF_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANIF_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANIF_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CANIF_VAR_POWER_ON_CLEARED

#if (defined CANIF_VAR_INIT) /* to prevent double definition */
#error CANIF_VAR_INIT already defined
#endif /* if (defined CANIF_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CANIF_VAR_INIT

#if (defined CANIF_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANIF_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANIF_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CANIF_VAR_POWER_ON_INIT

#if (defined CANIF_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CANIF_VAR_FAST_NO_INIT already defined
#endif /* if (defined CANIF_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANIF_VAR_FAST_NO_INIT

#if (defined CANIF_VAR_FAST_CLEARED) /* to prevent double definition */
#error CANIF_VAR_FAST_CLEARED already defined
#endif /* if (defined CANIF_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANIF_VAR_FAST_CLEARED

#if (defined CANIF_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CANIF_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CANIF_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANIF_VAR_FAST_POWER_ON_CLEARED

#if (defined CANIF_VAR_FAST_INIT) /* to prevent double definition */
#error CANIF_VAR_FAST_INIT already defined
#endif /* if (defined CANIF_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANIF_VAR_FAST_INIT

#if (defined CANIF_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CANIF_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CANIF_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANIF_VAR_FAST_POWER_ON_INIT

#if (defined CANIF_VAR_SAVED_ZONE) /* to prevent double definition */
#error CANIF_VAR_SAVED_ZONE already defined
#endif /* if (defined CANIF_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CANIF_VAR_SAVED_ZONE

#if (defined CANIF_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CANIF_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CANIF_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CANIF_VAR_SLOW_NO_INIT

#if (defined CANIF_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CANIF_VAR_SLOW_CLEARED already defined
#endif /* if (defined CANIF_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CANIF_VAR_SLOW_CLEARED

#if (defined CANIF_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CANIF_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CANIF_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CANIF_VAR_SLOW_POWER_ON_CLEARED

#if (defined CANIF_VAR_SLOW_INIT) /* to prevent double definition */
#error CANIF_VAR_SLOW_INIT already defined
#endif /* if (defined CANIF_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CANIF_VAR_SLOW_INIT

#if (defined CANIF_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CANIF_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CANIF_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CANIF_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module DEM]-----------------*/

#if (defined DEM_CODE) /* to prevent double definition */
#error DEM_CODE already defined
#endif /* if (defined DEM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define DEM_CODE

#if (defined DEM_CODE_FAST) /* to prevent double definition */
#error DEM_CODE_FAST already defined
#endif /* if (defined DEM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define DEM_CODE_FAST

#if (defined DEM_CODE_SLOW) /* to prevent double definition */
#error DEM_CODE_SLOW already defined
#endif /* if (defined DEM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define DEM_CODE_SLOW

#if (defined DEM_CONFIG_DATA) /* to prevent double definition */
#error DEM_CONFIG_DATA already defined
#endif /* if (defined DEM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define DEM_CONFIG_DATA

#if (defined DEM_CONST) /* to prevent double definition */
#error DEM_CONST already defined
#endif /* if (defined DEM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define DEM_CONST

#if (defined DEM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error DEM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined DEM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define DEM_CONST_SAVED_RECOVERY_ZONE

#if (defined DEM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error DEM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined DEM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define DEM_INTERNAL_VAR_NO_INIT

#if (defined DEM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error DEM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined DEM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define DEM_INTERNAL_VAR_CLEARED

#if (defined DEM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DEM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DEM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define DEM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined DEM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error DEM_INTERNAL_VAR_INIT already defined
#endif /* if (defined DEM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define DEM_INTERNAL_VAR_INIT

#if (defined DEM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DEM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined DEM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define DEM_INTERNAL_VAR_POWER_ON_INIT

#if (defined DEM_CALIB) /* to prevent double definition */
#error DEM_CALIB already defined
#endif /* if (defined DEM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define DEM_CALIB

#if (defined DEM_APPL_DATA) /* to prevent double definition */
#error DEM_APPL_DATA already defined
#endif /* if (defined DEM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define DEM_APPL_DATA

#if (defined DEM_APPL_CONST) /* to prevent double definition */
#error DEM_APPL_CONST already defined
#endif /* if (defined DEM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define DEM_APPL_CONST

#if (defined DEM_VAR_NO_INIT) /* to prevent double definition */
#error DEM_VAR_NO_INIT already defined
#endif /* if (defined DEM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define DEM_VAR_NO_INIT

#if (defined DEM_VAR_CLEARED) /* to prevent double definition */
#error DEM_VAR_CLEARED already defined
#endif /* if (defined DEM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define DEM_VAR_CLEARED

#if (defined DEM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DEM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DEM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define DEM_VAR_POWER_ON_CLEARED

#if (defined DEM_VAR_INIT) /* to prevent double definition */
#error DEM_VAR_INIT already defined
#endif /* if (defined DEM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define DEM_VAR_INIT

#if (defined DEM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DEM_VAR_POWER_ON_INIT already defined
#endif /* if (defined DEM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define DEM_VAR_POWER_ON_INIT

#if (defined DEM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error DEM_VAR_FAST_NO_INIT already defined
#endif /* if (defined DEM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DEM_VAR_FAST_NO_INIT

#if (defined DEM_VAR_FAST_CLEARED) /* to prevent double definition */
#error DEM_VAR_FAST_CLEARED already defined
#endif /* if (defined DEM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DEM_VAR_FAST_CLEARED

#if (defined DEM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error DEM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined DEM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DEM_VAR_FAST_POWER_ON_CLEARED

#if (defined DEM_VAR_FAST_INIT) /* to prevent double definition */
#error DEM_VAR_FAST_INIT already defined
#endif /* if (defined DEM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DEM_VAR_FAST_INIT

#if (defined DEM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error DEM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined DEM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DEM_VAR_FAST_POWER_ON_INIT

#if (defined DEM_VAR_SAVED_ZONE) /* to prevent double definition */
#error DEM_VAR_SAVED_ZONE already defined
#endif /* if (defined DEM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define DEM_VAR_SAVED_ZONE

#if (defined DEM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error DEM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined DEM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define DEM_VAR_SLOW_NO_INIT

#if (defined DEM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error DEM_VAR_SLOW_CLEARED already defined
#endif /* if (defined DEM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define DEM_VAR_SLOW_CLEARED

#if (defined DEM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error DEM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined DEM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define DEM_VAR_SLOW_POWER_ON_CLEARED

#if (defined DEM_VAR_SLOW_INIT) /* to prevent double definition */
#error DEM_VAR_SLOW_INIT already defined
#endif /* if (defined DEM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define DEM_VAR_SLOW_INIT

#if (defined DEM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error DEM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined DEM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define DEM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module DET]-----------------*/

#if (defined DET_CODE) /* to prevent double definition */
#error DET_CODE already defined
#endif /* if (defined DET_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define DET_CODE

#if (defined DET_CODE_FAST) /* to prevent double definition */
#error DET_CODE_FAST already defined
#endif /* if (defined DET_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define DET_CODE_FAST

#if (defined DET_CODE_SLOW) /* to prevent double definition */
#error DET_CODE_SLOW already defined
#endif /* if (defined DET_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define DET_CODE_SLOW

#if (defined DET_CONFIG_DATA) /* to prevent double definition */
#error DET_CONFIG_DATA already defined
#endif /* if (defined DET_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define DET_CONFIG_DATA

#if (defined DET_CONST) /* to prevent double definition */
#error DET_CONST already defined
#endif /* if (defined DET_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define DET_CONST

#if (defined DET_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error DET_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined DET_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define DET_CONST_SAVED_RECOVERY_ZONE

#if (defined DET_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error DET_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined DET_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define DET_INTERNAL_VAR_NO_INIT

#if (defined DET_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error DET_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined DET_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define DET_INTERNAL_VAR_CLEARED

#if (defined DET_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DET_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DET_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define DET_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined DET_INTERNAL_VAR_INIT) /* to prevent double definition */
#error DET_INTERNAL_VAR_INIT already defined
#endif /* if (defined DET_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define DET_INTERNAL_VAR_INIT

#if (defined DET_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DET_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined DET_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define DET_INTERNAL_VAR_POWER_ON_INIT

#if (defined DET_CALIB) /* to prevent double definition */
#error DET_CALIB already defined
#endif /* if (defined DET_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define DET_CALIB

#if (defined DET_APPL_DATA) /* to prevent double definition */
#error DET_APPL_DATA already defined
#endif /* if (defined DET_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define DET_APPL_DATA

#if (defined DET_APPL_CONST) /* to prevent double definition */
#error DET_APPL_CONST already defined
#endif /* if (defined DET_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define DET_APPL_CONST

#if (defined DET_VAR_NO_INIT) /* to prevent double definition */
#error DET_VAR_NO_INIT already defined
#endif /* if (defined DET_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define DET_VAR_NO_INIT

#if (defined DET_VAR_CLEARED) /* to prevent double definition */
#error DET_VAR_CLEARED already defined
#endif /* if (defined DET_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define DET_VAR_CLEARED

#if (defined DET_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DET_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DET_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define DET_VAR_POWER_ON_CLEARED

#if (defined DET_VAR_INIT) /* to prevent double definition */
#error DET_VAR_INIT already defined
#endif /* if (defined DET_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define DET_VAR_INIT

#if (defined DET_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DET_VAR_POWER_ON_INIT already defined
#endif /* if (defined DET_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define DET_VAR_POWER_ON_INIT

#if (defined DET_VAR_FAST_NO_INIT) /* to prevent double definition */
#error DET_VAR_FAST_NO_INIT already defined
#endif /* if (defined DET_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DET_VAR_FAST_NO_INIT

#if (defined DET_VAR_FAST_CLEARED) /* to prevent double definition */
#error DET_VAR_FAST_CLEARED already defined
#endif /* if (defined DET_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DET_VAR_FAST_CLEARED

#if (defined DET_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error DET_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined DET_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DET_VAR_FAST_POWER_ON_CLEARED

#if (defined DET_VAR_FAST_INIT) /* to prevent double definition */
#error DET_VAR_FAST_INIT already defined
#endif /* if (defined DET_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DET_VAR_FAST_INIT

#if (defined DET_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error DET_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined DET_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DET_VAR_FAST_POWER_ON_INIT

#if (defined DET_VAR_SAVED_ZONE) /* to prevent double definition */
#error DET_VAR_SAVED_ZONE already defined
#endif /* if (defined DET_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define DET_VAR_SAVED_ZONE

#if (defined DET_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error DET_VAR_SLOW_NO_INIT already defined
#endif /* if (defined DET_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define DET_VAR_SLOW_NO_INIT

#if (defined DET_VAR_SLOW_CLEARED) /* to prevent double definition */
#error DET_VAR_SLOW_CLEARED already defined
#endif /* if (defined DET_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define DET_VAR_SLOW_CLEARED

#if (defined DET_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error DET_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined DET_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define DET_VAR_SLOW_POWER_ON_CLEARED

#if (defined DET_VAR_SLOW_INIT) /* to prevent double definition */
#error DET_VAR_SLOW_INIT already defined
#endif /* if (defined DET_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define DET_VAR_SLOW_INIT

#if (defined DET_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error DET_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined DET_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define DET_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module DIO]-----------------*/

#if (defined DIO_CODE) /* to prevent double definition */
#error DIO_CODE already defined
#endif /* if (defined DIO_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define DIO_CODE

#if (defined DIO_CODE_FAST) /* to prevent double definition */
#error DIO_CODE_FAST already defined
#endif /* if (defined DIO_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define DIO_CODE_FAST

#if (defined DIO_CODE_SLOW) /* to prevent double definition */
#error DIO_CODE_SLOW already defined
#endif /* if (defined DIO_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define DIO_CODE_SLOW

#if (defined DIO_CONFIG_DATA) /* to prevent double definition */
#error DIO_CONFIG_DATA already defined
#endif /* if (defined DIO_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define DIO_CONFIG_DATA

#if (defined DIO_CONST) /* to prevent double definition */
#error DIO_CONST already defined
#endif /* if (defined DIO_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define DIO_CONST

#if (defined DIO_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error DIO_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined DIO_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define DIO_CONST_SAVED_RECOVERY_ZONE

#if (defined DIO_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error DIO_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined DIO_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define DIO_INTERNAL_VAR_NO_INIT

#if (defined DIO_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error DIO_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined DIO_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define DIO_INTERNAL_VAR_CLEARED

#if (defined DIO_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DIO_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DIO_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define DIO_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined DIO_INTERNAL_VAR_INIT) /* to prevent double definition */
#error DIO_INTERNAL_VAR_INIT already defined
#endif /* if (defined DIO_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define DIO_INTERNAL_VAR_INIT

#if (defined DIO_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DIO_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined DIO_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define DIO_INTERNAL_VAR_POWER_ON_INIT

#if (defined DIO_CALIB) /* to prevent double definition */
#error DIO_CALIB already defined
#endif /* if (defined DIO_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define DIO_CALIB

#if (defined DIO_APPL_DATA) /* to prevent double definition */
#error DIO_APPL_DATA already defined
#endif /* if (defined DIO_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define DIO_APPL_DATA

#if (defined DIO_APPL_CONST) /* to prevent double definition */
#error DIO_APPL_CONST already defined
#endif /* if (defined DIO_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define DIO_APPL_CONST

#if (defined DIO_VAR_NO_INIT) /* to prevent double definition */
#error DIO_VAR_NO_INIT already defined
#endif /* if (defined DIO_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define DIO_VAR_NO_INIT

#if (defined DIO_VAR_CLEARED) /* to prevent double definition */
#error DIO_VAR_CLEARED already defined
#endif /* if (defined DIO_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define DIO_VAR_CLEARED

#if (defined DIO_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DIO_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DIO_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define DIO_VAR_POWER_ON_CLEARED

#if (defined DIO_VAR_INIT) /* to prevent double definition */
#error DIO_VAR_INIT already defined
#endif /* if (defined DIO_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define DIO_VAR_INIT

#if (defined DIO_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DIO_VAR_POWER_ON_INIT already defined
#endif /* if (defined DIO_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define DIO_VAR_POWER_ON_INIT

#if (defined DIO_VAR_FAST_NO_INIT) /* to prevent double definition */
#error DIO_VAR_FAST_NO_INIT already defined
#endif /* if (defined DIO_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DIO_VAR_FAST_NO_INIT

#if (defined DIO_VAR_FAST_CLEARED) /* to prevent double definition */
#error DIO_VAR_FAST_CLEARED already defined
#endif /* if (defined DIO_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DIO_VAR_FAST_CLEARED

#if (defined DIO_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error DIO_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined DIO_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DIO_VAR_FAST_POWER_ON_CLEARED

#if (defined DIO_VAR_FAST_INIT) /* to prevent double definition */
#error DIO_VAR_FAST_INIT already defined
#endif /* if (defined DIO_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DIO_VAR_FAST_INIT

#if (defined DIO_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error DIO_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined DIO_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DIO_VAR_FAST_POWER_ON_INIT

#if (defined DIO_VAR_SAVED_ZONE) /* to prevent double definition */
#error DIO_VAR_SAVED_ZONE already defined
#endif /* if (defined DIO_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define DIO_VAR_SAVED_ZONE

#if (defined DIO_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error DIO_VAR_SLOW_NO_INIT already defined
#endif /* if (defined DIO_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define DIO_VAR_SLOW_NO_INIT

#if (defined DIO_VAR_SLOW_CLEARED) /* to prevent double definition */
#error DIO_VAR_SLOW_CLEARED already defined
#endif /* if (defined DIO_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define DIO_VAR_SLOW_CLEARED

#if (defined DIO_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error DIO_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined DIO_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define DIO_VAR_SLOW_POWER_ON_CLEARED

#if (defined DIO_VAR_SLOW_INIT) /* to prevent double definition */
#error DIO_VAR_SLOW_INIT already defined
#endif /* if (defined DIO_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define DIO_VAR_SLOW_INIT

#if (defined DIO_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error DIO_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined DIO_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define DIO_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module ETH]-----------------*/

#if (defined ETH_CODE) /* to prevent double definition */
#error ETH_CODE already defined
#endif /* if (defined ETH_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define ETH_CODE

#if (defined ETH_CODE_FAST) /* to prevent double definition */
#error ETH_CODE_FAST already defined
#endif /* if (defined ETH_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define ETH_CODE_FAST

#if (defined ETH_CODE_SLOW) /* to prevent double definition */
#error ETH_CODE_SLOW already defined
#endif /* if (defined ETH_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define ETH_CODE_SLOW

#if (defined ETH_CONFIG_DATA) /* to prevent double definition */
#error ETH_CONFIG_DATA already defined
#endif /* if (defined ETH_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define ETH_CONFIG_DATA

#if (defined ETH_CONST) /* to prevent double definition */
#error ETH_CONST already defined
#endif /* if (defined ETH_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define ETH_CONST

#if (defined ETH_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error ETH_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined ETH_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define ETH_CONST_SAVED_RECOVERY_ZONE

#if (defined ETH_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error ETH_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined ETH_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define ETH_INTERNAL_VAR_NO_INIT

#if (defined ETH_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error ETH_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined ETH_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define ETH_INTERNAL_VAR_CLEARED

#if (defined ETH_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ETH_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ETH_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define ETH_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined ETH_INTERNAL_VAR_INIT) /* to prevent double definition */
#error ETH_INTERNAL_VAR_INIT already defined
#endif /* if (defined ETH_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define ETH_INTERNAL_VAR_INIT

#if (defined ETH_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ETH_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined ETH_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define ETH_INTERNAL_VAR_POWER_ON_INIT

#if (defined ETH_CALIB) /* to prevent double definition */
#error ETH_CALIB already defined
#endif /* if (defined ETH_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define ETH_CALIB

#if (defined ETH_APPL_DATA) /* to prevent double definition */
#error ETH_APPL_DATA already defined
#endif /* if (defined ETH_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define ETH_APPL_DATA

#if (defined ETH_APPL_CONST) /* to prevent double definition */
#error ETH_APPL_CONST already defined
#endif /* if (defined ETH_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define ETH_APPL_CONST

#if (defined ETH_VAR_NO_INIT) /* to prevent double definition */
#error ETH_VAR_NO_INIT already defined
#endif /* if (defined ETH_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define ETH_VAR_NO_INIT

#if (defined ETH_VAR_CLEARED) /* to prevent double definition */
#error ETH_VAR_CLEARED already defined
#endif /* if (defined ETH_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define ETH_VAR_CLEARED

#if (defined ETH_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ETH_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ETH_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define ETH_VAR_POWER_ON_CLEARED

#if (defined ETH_VAR_INIT) /* to prevent double definition */
#error ETH_VAR_INIT already defined
#endif /* if (defined ETH_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define ETH_VAR_INIT

#if (defined ETH_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ETH_VAR_POWER_ON_INIT already defined
#endif /* if (defined ETH_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define ETH_VAR_POWER_ON_INIT

#if (defined ETH_VAR_FAST_NO_INIT) /* to prevent double definition */
#error ETH_VAR_FAST_NO_INIT already defined
#endif /* if (defined ETH_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ETH_VAR_FAST_NO_INIT

#if (defined ETH_VAR_FAST_CLEARED) /* to prevent double definition */
#error ETH_VAR_FAST_CLEARED already defined
#endif /* if (defined ETH_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ETH_VAR_FAST_CLEARED

#if (defined ETH_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error ETH_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined ETH_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ETH_VAR_FAST_POWER_ON_CLEARED

#if (defined ETH_VAR_FAST_INIT) /* to prevent double definition */
#error ETH_VAR_FAST_INIT already defined
#endif /* if (defined ETH_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ETH_VAR_FAST_INIT

#if (defined ETH_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error ETH_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined ETH_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ETH_VAR_FAST_POWER_ON_INIT

#if (defined ETH_VAR_SAVED_ZONE) /* to prevent double definition */
#error ETH_VAR_SAVED_ZONE already defined
#endif /* if (defined ETH_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define ETH_VAR_SAVED_ZONE

#if (defined ETH_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error ETH_VAR_SLOW_NO_INIT already defined
#endif /* if (defined ETH_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define ETH_VAR_SLOW_NO_INIT

#if (defined ETH_VAR_SLOW_CLEARED) /* to prevent double definition */
#error ETH_VAR_SLOW_CLEARED already defined
#endif /* if (defined ETH_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define ETH_VAR_SLOW_CLEARED

#if (defined ETH_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error ETH_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined ETH_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define ETH_VAR_SLOW_POWER_ON_CLEARED

#if (defined ETH_VAR_SLOW_INIT) /* to prevent double definition */
#error ETH_VAR_SLOW_INIT already defined
#endif /* if (defined ETH_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define ETH_VAR_SLOW_INIT

#if (defined ETH_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error ETH_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined ETH_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define ETH_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FEE]-----------------*/

#if (defined FEE_CODE) /* to prevent double definition */
#error FEE_CODE already defined
#endif /* if (defined FEE_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FEE_CODE

#if (defined FEE_CODE_FAST) /* to prevent double definition */
#error FEE_CODE_FAST already defined
#endif /* if (defined FEE_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FEE_CODE_FAST

#if (defined FEE_CODE_SLOW) /* to prevent double definition */
#error FEE_CODE_SLOW already defined
#endif /* if (defined FEE_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FEE_CODE_SLOW

#if (defined FEE_CONFIG_DATA) /* to prevent double definition */
#error FEE_CONFIG_DATA already defined
#endif /* if (defined FEE_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FEE_CONFIG_DATA

#if (defined FEE_CONST) /* to prevent double definition */
#error FEE_CONST already defined
#endif /* if (defined FEE_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FEE_CONST

#if (defined FEE_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FEE_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FEE_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FEE_CONST_SAVED_RECOVERY_ZONE

#if (defined FEE_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FEE_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FEE_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FEE_INTERNAL_VAR_NO_INIT

#if (defined FEE_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FEE_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FEE_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FEE_INTERNAL_VAR_CLEARED

#if (defined FEE_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FEE_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FEE_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FEE_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FEE_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FEE_INTERNAL_VAR_INIT already defined
#endif /* if (defined FEE_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FEE_INTERNAL_VAR_INIT

#if (defined FEE_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FEE_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FEE_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FEE_INTERNAL_VAR_POWER_ON_INIT

#if (defined FEE_CALIB) /* to prevent double definition */
#error FEE_CALIB already defined
#endif /* if (defined FEE_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FEE_CALIB

#if (defined FEE_APPL_DATA) /* to prevent double definition */
#error FEE_APPL_DATA already defined
#endif /* if (defined FEE_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FEE_APPL_DATA

#if (defined FEE_APPL_CONST) /* to prevent double definition */
#error FEE_APPL_CONST already defined
#endif /* if (defined FEE_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FEE_APPL_CONST

#if (defined FEE_VAR_NO_INIT) /* to prevent double definition */
#error FEE_VAR_NO_INIT already defined
#endif /* if (defined FEE_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FEE_VAR_NO_INIT

#if (defined FEE_VAR_CLEARED) /* to prevent double definition */
#error FEE_VAR_CLEARED already defined
#endif /* if (defined FEE_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FEE_VAR_CLEARED

#if (defined FEE_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FEE_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FEE_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FEE_VAR_POWER_ON_CLEARED

#if (defined FEE_VAR_INIT) /* to prevent double definition */
#error FEE_VAR_INIT already defined
#endif /* if (defined FEE_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FEE_VAR_INIT

#if (defined FEE_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FEE_VAR_POWER_ON_INIT already defined
#endif /* if (defined FEE_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FEE_VAR_POWER_ON_INIT

#if (defined FEE_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FEE_VAR_FAST_NO_INIT already defined
#endif /* if (defined FEE_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FEE_VAR_FAST_NO_INIT

#if (defined FEE_VAR_FAST_CLEARED) /* to prevent double definition */
#error FEE_VAR_FAST_CLEARED already defined
#endif /* if (defined FEE_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FEE_VAR_FAST_CLEARED

#if (defined FEE_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FEE_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FEE_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FEE_VAR_FAST_POWER_ON_CLEARED

#if (defined FEE_VAR_FAST_INIT) /* to prevent double definition */
#error FEE_VAR_FAST_INIT already defined
#endif /* if (defined FEE_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FEE_VAR_FAST_INIT

#if (defined FEE_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FEE_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FEE_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FEE_VAR_FAST_POWER_ON_INIT

#if (defined FEE_VAR_SAVED_ZONE) /* to prevent double definition */
#error FEE_VAR_SAVED_ZONE already defined
#endif /* if (defined FEE_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FEE_VAR_SAVED_ZONE

#if (defined FEE_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FEE_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FEE_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FEE_VAR_SLOW_NO_INIT

#if (defined FEE_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FEE_VAR_SLOW_CLEARED already defined
#endif /* if (defined FEE_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FEE_VAR_SLOW_CLEARED

#if (defined FEE_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FEE_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FEE_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FEE_VAR_SLOW_POWER_ON_CLEARED

#if (defined FEE_VAR_SLOW_INIT) /* to prevent double definition */
#error FEE_VAR_SLOW_INIT already defined
#endif /* if (defined FEE_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FEE_VAR_SLOW_INIT

#if (defined FEE_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FEE_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FEE_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FEE_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FLS]-----------------*/

#if (defined FLS_CODE) /* to prevent double definition */
#error FLS_CODE already defined
#endif /* if (defined FLS_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FLS_CODE

#if (defined FLS_CODE_FAST) /* to prevent double definition */
#error FLS_CODE_FAST already defined
#endif /* if (defined FLS_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FLS_CODE_FAST

#if (defined FLS_CODE_SLOW) /* to prevent double definition */
#error FLS_CODE_SLOW already defined
#endif /* if (defined FLS_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FLS_CODE_SLOW

#if (defined FLS_CONFIG_DATA) /* to prevent double definition */
#error FLS_CONFIG_DATA already defined
#endif /* if (defined FLS_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FLS_CONFIG_DATA

#if (defined FLS_CONST) /* to prevent double definition */
#error FLS_CONST already defined
#endif /* if (defined FLS_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FLS_CONST

#if (defined FLS_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FLS_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FLS_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FLS_CONST_SAVED_RECOVERY_ZONE

#if (defined FLS_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FLS_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FLS_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FLS_INTERNAL_VAR_NO_INIT

#if (defined FLS_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FLS_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FLS_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FLS_INTERNAL_VAR_CLEARED

#if (defined FLS_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FLS_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FLS_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FLS_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FLS_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FLS_INTERNAL_VAR_INIT already defined
#endif /* if (defined FLS_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FLS_INTERNAL_VAR_INIT

#if (defined FLS_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FLS_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FLS_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FLS_INTERNAL_VAR_POWER_ON_INIT

#if (defined FLS_CALIB) /* to prevent double definition */
#error FLS_CALIB already defined
#endif /* if (defined FLS_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FLS_CALIB

#if (defined FLS_APPL_DATA) /* to prevent double definition */
#error FLS_APPL_DATA already defined
#endif /* if (defined FLS_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FLS_APPL_DATA

#if (defined FLS_APPL_CONST) /* to prevent double definition */
#error FLS_APPL_CONST already defined
#endif /* if (defined FLS_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FLS_APPL_CONST

#if (defined FLS_VAR_NO_INIT) /* to prevent double definition */
#error FLS_VAR_NO_INIT already defined
#endif /* if (defined FLS_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FLS_VAR_NO_INIT

#if (defined FLS_VAR_CLEARED) /* to prevent double definition */
#error FLS_VAR_CLEARED already defined
#endif /* if (defined FLS_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FLS_VAR_CLEARED

#if (defined FLS_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FLS_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FLS_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FLS_VAR_POWER_ON_CLEARED

#if (defined FLS_VAR_INIT) /* to prevent double definition */
#error FLS_VAR_INIT already defined
#endif /* if (defined FLS_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FLS_VAR_INIT

#if (defined FLS_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FLS_VAR_POWER_ON_INIT already defined
#endif /* if (defined FLS_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FLS_VAR_POWER_ON_INIT

#if (defined FLS_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FLS_VAR_FAST_NO_INIT already defined
#endif /* if (defined FLS_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLS_VAR_FAST_NO_INIT

#if (defined FLS_VAR_FAST_CLEARED) /* to prevent double definition */
#error FLS_VAR_FAST_CLEARED already defined
#endif /* if (defined FLS_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLS_VAR_FAST_CLEARED

#if (defined FLS_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FLS_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FLS_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLS_VAR_FAST_POWER_ON_CLEARED

#if (defined FLS_VAR_FAST_INIT) /* to prevent double definition */
#error FLS_VAR_FAST_INIT already defined
#endif /* if (defined FLS_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLS_VAR_FAST_INIT

#if (defined FLS_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FLS_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FLS_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLS_VAR_FAST_POWER_ON_INIT

#if (defined FLS_VAR_SAVED_ZONE) /* to prevent double definition */
#error FLS_VAR_SAVED_ZONE already defined
#endif /* if (defined FLS_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FLS_VAR_SAVED_ZONE

#if (defined FLS_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FLS_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FLS_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FLS_VAR_SLOW_NO_INIT

#if (defined FLS_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FLS_VAR_SLOW_CLEARED already defined
#endif /* if (defined FLS_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FLS_VAR_SLOW_CLEARED

#if (defined FLS_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FLS_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FLS_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FLS_VAR_SLOW_POWER_ON_CLEARED

#if (defined FLS_VAR_SLOW_INIT) /* to prevent double definition */
#error FLS_VAR_SLOW_INIT already defined
#endif /* if (defined FLS_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FLS_VAR_SLOW_INIT

#if (defined FLS_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FLS_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FLS_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FLS_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module GPT]-----------------*/

#if (defined GPT_CODE) /* to prevent double definition */
#error GPT_CODE already defined
#endif /* if (defined GPT_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define GPT_CODE

#if (defined GPT_CODE_FAST) /* to prevent double definition */
#error GPT_CODE_FAST already defined
#endif /* if (defined GPT_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define GPT_CODE_FAST

#if (defined GPT_CODE_SLOW) /* to prevent double definition */
#error GPT_CODE_SLOW already defined
#endif /* if (defined GPT_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define GPT_CODE_SLOW

#if (defined GPT_CONFIG_DATA) /* to prevent double definition */
#error GPT_CONFIG_DATA already defined
#endif /* if (defined GPT_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define GPT_CONFIG_DATA

#if (defined GPT_CONST) /* to prevent double definition */
#error GPT_CONST already defined
#endif /* if (defined GPT_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define GPT_CONST

#if (defined GPT_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error GPT_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined GPT_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define GPT_CONST_SAVED_RECOVERY_ZONE

#if (defined GPT_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error GPT_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined GPT_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define GPT_INTERNAL_VAR_NO_INIT

#if (defined GPT_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error GPT_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined GPT_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define GPT_INTERNAL_VAR_CLEARED

#if (defined GPT_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error GPT_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined GPT_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define GPT_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined GPT_INTERNAL_VAR_INIT) /* to prevent double definition */
#error GPT_INTERNAL_VAR_INIT already defined
#endif /* if (defined GPT_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define GPT_INTERNAL_VAR_INIT

#if (defined GPT_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error GPT_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined GPT_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define GPT_INTERNAL_VAR_POWER_ON_INIT

#if (defined GPT_CALIB) /* to prevent double definition */
#error GPT_CALIB already defined
#endif /* if (defined GPT_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define GPT_CALIB

#if (defined GPT_APPL_DATA) /* to prevent double definition */
#error GPT_APPL_DATA already defined
#endif /* if (defined GPT_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define GPT_APPL_DATA

#if (defined GPT_APPL_CONST) /* to prevent double definition */
#error GPT_APPL_CONST already defined
#endif /* if (defined GPT_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define GPT_APPL_CONST

#if (defined GPT_VAR_NO_INIT) /* to prevent double definition */
#error GPT_VAR_NO_INIT already defined
#endif /* if (defined GPT_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define GPT_VAR_NO_INIT

#if (defined GPT_VAR_CLEARED) /* to prevent double definition */
#error GPT_VAR_CLEARED already defined
#endif /* if (defined GPT_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define GPT_VAR_CLEARED

#if (defined GPT_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error GPT_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined GPT_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define GPT_VAR_POWER_ON_CLEARED

#if (defined GPT_VAR_INIT) /* to prevent double definition */
#error GPT_VAR_INIT already defined
#endif /* if (defined GPT_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define GPT_VAR_INIT

#if (defined GPT_VAR_POWER_ON_INIT) /* to prevent double definition */
#error GPT_VAR_POWER_ON_INIT already defined
#endif /* if (defined GPT_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define GPT_VAR_POWER_ON_INIT

#if (defined GPT_VAR_FAST_NO_INIT) /* to prevent double definition */
#error GPT_VAR_FAST_NO_INIT already defined
#endif /* if (defined GPT_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define GPT_VAR_FAST_NO_INIT

#if (defined GPT_VAR_FAST_CLEARED) /* to prevent double definition */
#error GPT_VAR_FAST_CLEARED already defined
#endif /* if (defined GPT_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define GPT_VAR_FAST_CLEARED

#if (defined GPT_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error GPT_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined GPT_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define GPT_VAR_FAST_POWER_ON_CLEARED

#if (defined GPT_VAR_FAST_INIT) /* to prevent double definition */
#error GPT_VAR_FAST_INIT already defined
#endif /* if (defined GPT_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define GPT_VAR_FAST_INIT

#if (defined GPT_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error GPT_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined GPT_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define GPT_VAR_FAST_POWER_ON_INIT

#if (defined GPT_VAR_SAVED_ZONE) /* to prevent double definition */
#error GPT_VAR_SAVED_ZONE already defined
#endif /* if (defined GPT_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define GPT_VAR_SAVED_ZONE

#if (defined GPT_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error GPT_VAR_SLOW_NO_INIT already defined
#endif /* if (defined GPT_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define GPT_VAR_SLOW_NO_INIT

#if (defined GPT_VAR_SLOW_CLEARED) /* to prevent double definition */
#error GPT_VAR_SLOW_CLEARED already defined
#endif /* if (defined GPT_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define GPT_VAR_SLOW_CLEARED

#if (defined GPT_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error GPT_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined GPT_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define GPT_VAR_SLOW_POWER_ON_CLEARED

#if (defined GPT_VAR_SLOW_INIT) /* to prevent double definition */
#error GPT_VAR_SLOW_INIT already defined
#endif /* if (defined GPT_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define GPT_VAR_SLOW_INIT

#if (defined GPT_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error GPT_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined GPT_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define GPT_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module ICU]-----------------*/

#if (defined ICU_CODE) /* to prevent double definition */
#error ICU_CODE already defined
#endif /* if (defined ICU_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define ICU_CODE

#if (defined ICU_CODE_FAST) /* to prevent double definition */
#error ICU_CODE_FAST already defined
#endif /* if (defined ICU_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define ICU_CODE_FAST

#if (defined ICU_CODE_SLOW) /* to prevent double definition */
#error ICU_CODE_SLOW already defined
#endif /* if (defined ICU_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define ICU_CODE_SLOW

#if (defined ICU_CONFIG_DATA) /* to prevent double definition */
#error ICU_CONFIG_DATA already defined
#endif /* if (defined ICU_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define ICU_CONFIG_DATA

#if (defined ICU_CONST) /* to prevent double definition */
#error ICU_CONST already defined
#endif /* if (defined ICU_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define ICU_CONST

#if (defined ICU_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error ICU_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined ICU_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define ICU_CONST_SAVED_RECOVERY_ZONE

#if (defined ICU_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error ICU_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined ICU_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define ICU_INTERNAL_VAR_NO_INIT

#if (defined ICU_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error ICU_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined ICU_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define ICU_INTERNAL_VAR_CLEARED

#if (defined ICU_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ICU_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ICU_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define ICU_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined ICU_INTERNAL_VAR_INIT) /* to prevent double definition */
#error ICU_INTERNAL_VAR_INIT already defined
#endif /* if (defined ICU_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define ICU_INTERNAL_VAR_INIT

#if (defined ICU_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ICU_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined ICU_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define ICU_INTERNAL_VAR_POWER_ON_INIT

#if (defined ICU_CALIB) /* to prevent double definition */
#error ICU_CALIB already defined
#endif /* if (defined ICU_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define ICU_CALIB

#if (defined ICU_APPL_DATA) /* to prevent double definition */
#error ICU_APPL_DATA already defined
#endif /* if (defined ICU_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define ICU_APPL_DATA

#if (defined ICU_APPL_CONST) /* to prevent double definition */
#error ICU_APPL_CONST already defined
#endif /* if (defined ICU_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define ICU_APPL_CONST

#if (defined ICU_VAR_NO_INIT) /* to prevent double definition */
#error ICU_VAR_NO_INIT already defined
#endif /* if (defined ICU_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define ICU_VAR_NO_INIT

#if (defined ICU_VAR_CLEARED) /* to prevent double definition */
#error ICU_VAR_CLEARED already defined
#endif /* if (defined ICU_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define ICU_VAR_CLEARED

#if (defined ICU_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ICU_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ICU_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define ICU_VAR_POWER_ON_CLEARED

#if (defined ICU_VAR_INIT) /* to prevent double definition */
#error ICU_VAR_INIT already defined
#endif /* if (defined ICU_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define ICU_VAR_INIT

#if (defined ICU_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ICU_VAR_POWER_ON_INIT already defined
#endif /* if (defined ICU_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define ICU_VAR_POWER_ON_INIT

#if (defined ICU_VAR_FAST_NO_INIT) /* to prevent double definition */
#error ICU_VAR_FAST_NO_INIT already defined
#endif /* if (defined ICU_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ICU_VAR_FAST_NO_INIT

#if (defined ICU_VAR_FAST_CLEARED) /* to prevent double definition */
#error ICU_VAR_FAST_CLEARED already defined
#endif /* if (defined ICU_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ICU_VAR_FAST_CLEARED

#if (defined ICU_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error ICU_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined ICU_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ICU_VAR_FAST_POWER_ON_CLEARED

#if (defined ICU_VAR_FAST_INIT) /* to prevent double definition */
#error ICU_VAR_FAST_INIT already defined
#endif /* if (defined ICU_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ICU_VAR_FAST_INIT

#if (defined ICU_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error ICU_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined ICU_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ICU_VAR_FAST_POWER_ON_INIT

#if (defined ICU_VAR_SAVED_ZONE) /* to prevent double definition */
#error ICU_VAR_SAVED_ZONE already defined
#endif /* if (defined ICU_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define ICU_VAR_SAVED_ZONE

#if (defined ICU_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error ICU_VAR_SLOW_NO_INIT already defined
#endif /* if (defined ICU_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define ICU_VAR_SLOW_NO_INIT

#if (defined ICU_VAR_SLOW_CLEARED) /* to prevent double definition */
#error ICU_VAR_SLOW_CLEARED already defined
#endif /* if (defined ICU_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define ICU_VAR_SLOW_CLEARED

#if (defined ICU_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error ICU_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined ICU_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define ICU_VAR_SLOW_POWER_ON_CLEARED

#if (defined ICU_VAR_SLOW_INIT) /* to prevent double definition */
#error ICU_VAR_SLOW_INIT already defined
#endif /* if (defined ICU_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define ICU_VAR_SLOW_INIT

#if (defined ICU_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error ICU_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined ICU_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define ICU_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module LIN]-----------------*/

#if (defined LIN_CODE) /* to prevent double definition */
#error LIN_CODE already defined
#endif /* if (defined LIN_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define LIN_CODE

#if (defined LIN_CODE_FAST) /* to prevent double definition */
#error LIN_CODE_FAST already defined
#endif /* if (defined LIN_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define LIN_CODE_FAST

#if (defined LIN_CODE_SLOW) /* to prevent double definition */
#error LIN_CODE_SLOW already defined
#endif /* if (defined LIN_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define LIN_CODE_SLOW

#if (defined LIN_CONFIG_DATA) /* to prevent double definition */
#error LIN_CONFIG_DATA already defined
#endif /* if (defined LIN_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define LIN_CONFIG_DATA

#if (defined LIN_CONST) /* to prevent double definition */
#error LIN_CONST already defined
#endif /* if (defined LIN_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define LIN_CONST

#if (defined LIN_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error LIN_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined LIN_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define LIN_CONST_SAVED_RECOVERY_ZONE

#if (defined LIN_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error LIN_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined LIN_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define LIN_INTERNAL_VAR_NO_INIT

#if (defined LIN_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error LIN_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined LIN_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define LIN_INTERNAL_VAR_CLEARED

#if (defined LIN_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error LIN_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined LIN_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define LIN_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined LIN_INTERNAL_VAR_INIT) /* to prevent double definition */
#error LIN_INTERNAL_VAR_INIT already defined
#endif /* if (defined LIN_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define LIN_INTERNAL_VAR_INIT

#if (defined LIN_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error LIN_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined LIN_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define LIN_INTERNAL_VAR_POWER_ON_INIT

#if (defined LIN_CALIB) /* to prevent double definition */
#error LIN_CALIB already defined
#endif /* if (defined LIN_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define LIN_CALIB

#if (defined LIN_APPL_DATA) /* to prevent double definition */
#error LIN_APPL_DATA already defined
#endif /* if (defined LIN_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define LIN_APPL_DATA

#if (defined LIN_APPL_CONST) /* to prevent double definition */
#error LIN_APPL_CONST already defined
#endif /* if (defined LIN_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define LIN_APPL_CONST

#if (defined LIN_VAR_NO_INIT) /* to prevent double definition */
#error LIN_VAR_NO_INIT already defined
#endif /* if (defined LIN_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define LIN_VAR_NO_INIT

#if (defined LIN_VAR_CLEARED) /* to prevent double definition */
#error LIN_VAR_CLEARED already defined
#endif /* if (defined LIN_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define LIN_VAR_CLEARED

#if (defined LIN_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error LIN_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined LIN_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define LIN_VAR_POWER_ON_CLEARED

#if (defined LIN_VAR_INIT) /* to prevent double definition */
#error LIN_VAR_INIT already defined
#endif /* if (defined LIN_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define LIN_VAR_INIT

#if (defined LIN_VAR_POWER_ON_INIT) /* to prevent double definition */
#error LIN_VAR_POWER_ON_INIT already defined
#endif /* if (defined LIN_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define LIN_VAR_POWER_ON_INIT

#if (defined LIN_VAR_FAST_NO_INIT) /* to prevent double definition */
#error LIN_VAR_FAST_NO_INIT already defined
#endif /* if (defined LIN_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LIN_VAR_FAST_NO_INIT

#if (defined LIN_VAR_FAST_CLEARED) /* to prevent double definition */
#error LIN_VAR_FAST_CLEARED already defined
#endif /* if (defined LIN_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LIN_VAR_FAST_CLEARED

#if (defined LIN_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error LIN_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined LIN_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LIN_VAR_FAST_POWER_ON_CLEARED

#if (defined LIN_VAR_FAST_INIT) /* to prevent double definition */
#error LIN_VAR_FAST_INIT already defined
#endif /* if (defined LIN_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LIN_VAR_FAST_INIT

#if (defined LIN_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error LIN_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined LIN_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LIN_VAR_FAST_POWER_ON_INIT

#if (defined LIN_VAR_SAVED_ZONE) /* to prevent double definition */
#error LIN_VAR_SAVED_ZONE already defined
#endif /* if (defined LIN_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define LIN_VAR_SAVED_ZONE

#if (defined LIN_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error LIN_VAR_SLOW_NO_INIT already defined
#endif /* if (defined LIN_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define LIN_VAR_SLOW_NO_INIT

#if (defined LIN_VAR_SLOW_CLEARED) /* to prevent double definition */
#error LIN_VAR_SLOW_CLEARED already defined
#endif /* if (defined LIN_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define LIN_VAR_SLOW_CLEARED

#if (defined LIN_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error LIN_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined LIN_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define LIN_VAR_SLOW_POWER_ON_CLEARED

#if (defined LIN_VAR_SLOW_INIT) /* to prevent double definition */
#error LIN_VAR_SLOW_INIT already defined
#endif /* if (defined LIN_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define LIN_VAR_SLOW_INIT

#if (defined LIN_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error LIN_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined LIN_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define LIN_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module MCU]-----------------*/

#if (defined MCU_CODE) /* to prevent double definition */
#error MCU_CODE already defined
#endif /* if (defined MCU_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define MCU_CODE

#if (defined MCU_CODE_FAST) /* to prevent double definition */
#error MCU_CODE_FAST already defined
#endif /* if (defined MCU_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define MCU_CODE_FAST

#if (defined MCU_CODE_SLOW) /* to prevent double definition */
#error MCU_CODE_SLOW already defined
#endif /* if (defined MCU_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define MCU_CODE_SLOW

#if (defined MCU_CONFIG_DATA) /* to prevent double definition */
#error MCU_CONFIG_DATA already defined
#endif /* if (defined MCU_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define MCU_CONFIG_DATA

#if (defined MCU_CONST) /* to prevent double definition */
#error MCU_CONST already defined
#endif /* if (defined MCU_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define MCU_CONST

#if (defined MCU_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error MCU_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined MCU_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define MCU_CONST_SAVED_RECOVERY_ZONE

#if (defined MCU_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error MCU_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined MCU_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define MCU_INTERNAL_VAR_NO_INIT

#if (defined MCU_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error MCU_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined MCU_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define MCU_INTERNAL_VAR_CLEARED

#if (defined MCU_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error MCU_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined MCU_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define MCU_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined MCU_INTERNAL_VAR_INIT) /* to prevent double definition */
#error MCU_INTERNAL_VAR_INIT already defined
#endif /* if (defined MCU_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define MCU_INTERNAL_VAR_INIT

#if (defined MCU_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error MCU_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined MCU_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define MCU_INTERNAL_VAR_POWER_ON_INIT

#if (defined MCU_CALIB) /* to prevent double definition */
#error MCU_CALIB already defined
#endif /* if (defined MCU_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define MCU_CALIB

#if (defined MCU_APPL_DATA) /* to prevent double definition */
#error MCU_APPL_DATA already defined
#endif /* if (defined MCU_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define MCU_APPL_DATA

#if (defined MCU_APPL_CONST) /* to prevent double definition */
#error MCU_APPL_CONST already defined
#endif /* if (defined MCU_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define MCU_APPL_CONST

#if (defined MCU_VAR_NO_INIT) /* to prevent double definition */
#error MCU_VAR_NO_INIT already defined
#endif /* if (defined MCU_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define MCU_VAR_NO_INIT

#if (defined MCU_VAR_CLEARED) /* to prevent double definition */
#error MCU_VAR_CLEARED already defined
#endif /* if (defined MCU_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define MCU_VAR_CLEARED

#if (defined MCU_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error MCU_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined MCU_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define MCU_VAR_POWER_ON_CLEARED

#if (defined MCU_VAR_INIT) /* to prevent double definition */
#error MCU_VAR_INIT already defined
#endif /* if (defined MCU_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define MCU_VAR_INIT

#if (defined MCU_VAR_POWER_ON_INIT) /* to prevent double definition */
#error MCU_VAR_POWER_ON_INIT already defined
#endif /* if (defined MCU_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define MCU_VAR_POWER_ON_INIT

#if (defined MCU_VAR_FAST_NO_INIT) /* to prevent double definition */
#error MCU_VAR_FAST_NO_INIT already defined
#endif /* if (defined MCU_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MCU_VAR_FAST_NO_INIT

#if (defined MCU_VAR_FAST_CLEARED) /* to prevent double definition */
#error MCU_VAR_FAST_CLEARED already defined
#endif /* if (defined MCU_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MCU_VAR_FAST_CLEARED

#if (defined MCU_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error MCU_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined MCU_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MCU_VAR_FAST_POWER_ON_CLEARED

#if (defined MCU_VAR_FAST_INIT) /* to prevent double definition */
#error MCU_VAR_FAST_INIT already defined
#endif /* if (defined MCU_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MCU_VAR_FAST_INIT

#if (defined MCU_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error MCU_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined MCU_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MCU_VAR_FAST_POWER_ON_INIT

#if (defined MCU_VAR_SAVED_ZONE) /* to prevent double definition */
#error MCU_VAR_SAVED_ZONE already defined
#endif /* if (defined MCU_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define MCU_VAR_SAVED_ZONE

#if (defined MCU_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error MCU_VAR_SLOW_NO_INIT already defined
#endif /* if (defined MCU_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define MCU_VAR_SLOW_NO_INIT

#if (defined MCU_VAR_SLOW_CLEARED) /* to prevent double definition */
#error MCU_VAR_SLOW_CLEARED already defined
#endif /* if (defined MCU_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define MCU_VAR_SLOW_CLEARED

#if (defined MCU_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error MCU_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined MCU_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define MCU_VAR_SLOW_POWER_ON_CLEARED

#if (defined MCU_VAR_SLOW_INIT) /* to prevent double definition */
#error MCU_VAR_SLOW_INIT already defined
#endif /* if (defined MCU_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define MCU_VAR_SLOW_INIT

#if (defined MCU_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error MCU_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined MCU_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define MCU_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module OCU]-----------------*/

#if (defined OCU_CODE) /* to prevent double definition */
#error OCU_CODE already defined
#endif /* if (defined OCU_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define OCU_CODE

#if (defined OCU_CODE_FAST) /* to prevent double definition */
#error OCU_CODE_FAST already defined
#endif /* if (defined OCU_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define OCU_CODE_FAST

#if (defined OCU_CODE_SLOW) /* to prevent double definition */
#error OCU_CODE_SLOW already defined
#endif /* if (defined OCU_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define OCU_CODE_SLOW

#if (defined OCU_CONFIG_DATA) /* to prevent double definition */
#error OCU_CONFIG_DATA already defined
#endif /* if (defined OCU_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define OCU_CONFIG_DATA

#if (defined OCU_CONST) /* to prevent double definition */
#error OCU_CONST already defined
#endif /* if (defined OCU_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define OCU_CONST

#if (defined OCU_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error OCU_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined OCU_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define OCU_CONST_SAVED_RECOVERY_ZONE

#if (defined OCU_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error OCU_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined OCU_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define OCU_INTERNAL_VAR_NO_INIT

#if (defined OCU_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error OCU_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined OCU_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define OCU_INTERNAL_VAR_CLEARED

#if (defined OCU_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error OCU_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined OCU_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define OCU_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined OCU_INTERNAL_VAR_INIT) /* to prevent double definition */
#error OCU_INTERNAL_VAR_INIT already defined
#endif /* if (defined OCU_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define OCU_INTERNAL_VAR_INIT

#if (defined OCU_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error OCU_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined OCU_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define OCU_INTERNAL_VAR_POWER_ON_INIT

#if (defined OCU_CALIB) /* to prevent double definition */
#error OCU_CALIB already defined
#endif /* if (defined OCU_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define OCU_CALIB

#if (defined OCU_APPL_DATA) /* to prevent double definition */
#error OCU_APPL_DATA already defined
#endif /* if (defined OCU_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define OCU_APPL_DATA

#if (defined OCU_APPL_CONST) /* to prevent double definition */
#error OCU_APPL_CONST already defined
#endif /* if (defined OCU_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define OCU_APPL_CONST

#if (defined OCU_VAR_NO_INIT) /* to prevent double definition */
#error OCU_VAR_NO_INIT already defined
#endif /* if (defined OCU_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define OCU_VAR_NO_INIT

#if (defined OCU_VAR_CLEARED) /* to prevent double definition */
#error OCU_VAR_CLEARED already defined
#endif /* if (defined OCU_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define OCU_VAR_CLEARED

#if (defined OCU_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error OCU_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined OCU_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define OCU_VAR_POWER_ON_CLEARED

#if (defined OCU_VAR_INIT) /* to prevent double definition */
#error OCU_VAR_INIT already defined
#endif /* if (defined OCU_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define OCU_VAR_INIT

#if (defined OCU_VAR_POWER_ON_INIT) /* to prevent double definition */
#error OCU_VAR_POWER_ON_INIT already defined
#endif /* if (defined OCU_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define OCU_VAR_POWER_ON_INIT

#if (defined OCU_VAR_FAST_NO_INIT) /* to prevent double definition */
#error OCU_VAR_FAST_NO_INIT already defined
#endif /* if (defined OCU_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OCU_VAR_FAST_NO_INIT

#if (defined OCU_VAR_FAST_CLEARED) /* to prevent double definition */
#error OCU_VAR_FAST_CLEARED already defined
#endif /* if (defined OCU_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OCU_VAR_FAST_CLEARED

#if (defined OCU_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error OCU_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined OCU_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OCU_VAR_FAST_POWER_ON_CLEARED

#if (defined OCU_VAR_FAST_INIT) /* to prevent double definition */
#error OCU_VAR_FAST_INIT already defined
#endif /* if (defined OCU_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OCU_VAR_FAST_INIT

#if (defined OCU_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error OCU_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined OCU_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OCU_VAR_FAST_POWER_ON_INIT

#if (defined OCU_VAR_SAVED_ZONE) /* to prevent double definition */
#error OCU_VAR_SAVED_ZONE already defined
#endif /* if (defined OCU_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define OCU_VAR_SAVED_ZONE

#if (defined OCU_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error OCU_VAR_SLOW_NO_INIT already defined
#endif /* if (defined OCU_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define OCU_VAR_SLOW_NO_INIT

#if (defined OCU_VAR_SLOW_CLEARED) /* to prevent double definition */
#error OCU_VAR_SLOW_CLEARED already defined
#endif /* if (defined OCU_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define OCU_VAR_SLOW_CLEARED

#if (defined OCU_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error OCU_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined OCU_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define OCU_VAR_SLOW_POWER_ON_CLEARED

#if (defined OCU_VAR_SLOW_INIT) /* to prevent double definition */
#error OCU_VAR_SLOW_INIT already defined
#endif /* if (defined OCU_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define OCU_VAR_SLOW_INIT

#if (defined OCU_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error OCU_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined OCU_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define OCU_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module OS]------------------*/

#if (defined OS_CODE) /* to prevent double definition */
#error OS_CODE already defined
#endif /* if (defined OS_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define OS_CODE

#if (defined OS_CODE_FAST) /* to prevent double definition */
#error OS_CODE_FAST already defined
#endif /* if (defined OS_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define OS_CODE_FAST

#if (defined OS_CODE_SLOW) /* to prevent double definition */
#error OS_CODE_SLOW already defined
#endif /* if (defined OS_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define OS_CODE_SLOW

#if (defined OS_CONFIG_DATA) /* to prevent double definition */
#error OS_CONFIG_DATA already defined
#endif /* if (defined OS_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define OS_CONFIG_DATA

#if (defined OS_CONST) /* to prevent double definition */
#error OS_CONST already defined
#endif /* if (defined OS_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define OS_CONST

#if (defined OS_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error OS_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined OS_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define OS_CONST_SAVED_RECOVERY_ZONE

#if (defined OS_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error OS_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined OS_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define OS_INTERNAL_VAR_NO_INIT

#if (defined OS_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error OS_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined OS_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define OS_INTERNAL_VAR_CLEARED

#if (defined OS_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error OS_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined OS_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define OS_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined OS_INTERNAL_VAR_INIT) /* to prevent double definition */
#error OS_INTERNAL_VAR_INIT already defined
#endif /* if (defined OS_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define OS_INTERNAL_VAR_INIT

#if (defined OS_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error OS_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined OS_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define OS_INTERNAL_VAR_POWER_ON_INIT

#if (defined OS_CALIB) /* to prevent double definition */
#error OS_CALIB already defined
#endif /* if (defined OS_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define OS_CALIB

#if (defined OS_APPL_DATA) /* to prevent double definition */
#error OS_APPL_DATA already defined
#endif /* if (defined OS_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define OS_APPL_DATA

#if (defined OS_APPL_CONST) /* to prevent double definition */
#error OS_APPL_CONST already defined
#endif /* if (defined OS_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define OS_APPL_CONST

#if (defined OS_VAR_NO_INIT) /* to prevent double definition */
#error OS_VAR_NO_INIT already defined
#endif /* if (defined OS_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define OS_VAR_NO_INIT

#if (defined OS_VAR_CLEARED) /* to prevent double definition */
#error OS_VAR_CLEARED already defined
#endif /* if (defined OS_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define OS_VAR_CLEARED

#if (defined OS_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error OS_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined OS_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define OS_VAR_POWER_ON_CLEARED

#if (defined OS_VAR_INIT) /* to prevent double definition */
#error OS_VAR_INIT already defined
#endif /* if (defined OS_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define OS_VAR_INIT

#if (defined OS_VAR_POWER_ON_INIT) /* to prevent double definition */
#error OS_VAR_POWER_ON_INIT already defined
#endif /* if (defined OS_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define OS_VAR_POWER_ON_INIT

#if (defined OS_VAR_FAST_NO_INIT) /* to prevent double definition */
#error OS_VAR_FAST_NO_INIT already defined
#endif /* if (defined OS_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OS_VAR_FAST_NO_INIT

#if (defined OS_VAR_FAST_CLEARED) /* to prevent double definition */
#error OS_VAR_FAST_CLEARED already defined
#endif /* if (defined OS_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OS_VAR_FAST_CLEARED

#if (defined OS_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error OS_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined OS_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OS_VAR_FAST_POWER_ON_CLEARED

#if (defined OS_VAR_FAST_INIT) /* to prevent double definition */
#error OS_VAR_FAST_INIT already defined
#endif /* if (defined OS_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OS_VAR_FAST_INIT

#if (defined OS_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error OS_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined OS_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define OS_VAR_FAST_POWER_ON_INIT

#if (defined OS_VAR_SAVED_ZONE) /* to prevent double definition */
#error OS_VAR_SAVED_ZONE already defined
#endif /* if (defined OS_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define OS_VAR_SAVED_ZONE

#if (defined OS_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error OS_VAR_SLOW_NO_INIT already defined
#endif /* if (defined OS_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define OS_VAR_SLOW_NO_INIT

#if (defined OS_VAR_SLOW_CLEARED) /* to prevent double definition */
#error OS_VAR_SLOW_CLEARED already defined
#endif /* if (defined OS_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define OS_VAR_SLOW_CLEARED

#if (defined OS_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error OS_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined OS_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define OS_VAR_SLOW_POWER_ON_CLEARED

#if (defined OS_VAR_SLOW_INIT) /* to prevent double definition */
#error OS_VAR_SLOW_INIT already defined
#endif /* if (defined OS_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define OS_VAR_SLOW_INIT

#if (defined OS_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error OS_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined OS_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define OS_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module PORT]----------------*/

#if (defined PORT_CODE) /* to prevent double definition */
#error PORT_CODE already defined
#endif /* if (defined PORT_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define PORT_CODE

#if (defined PORT_CODE_FAST) /* to prevent double definition */
#error PORT_CODE_FAST already defined
#endif /* if (defined PORT_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define PORT_CODE_FAST

#if (defined PORT_CODE_SLOW) /* to prevent double definition */
#error PORT_CODE_SLOW already defined
#endif /* if (defined PORT_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define PORT_CODE_SLOW

#if (defined PORT_CONFIG_DATA) /* to prevent double definition */
#error PORT_CONFIG_DATA already defined
#endif /* if (defined PORT_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define PORT_CONFIG_DATA

#if (defined PORT_CONST) /* to prevent double definition */
#error PORT_CONST already defined
#endif /* if (defined PORT_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define PORT_CONST

#if (defined PORT_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error PORT_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined PORT_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define PORT_CONST_SAVED_RECOVERY_ZONE

#if (defined PORT_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error PORT_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined PORT_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define PORT_INTERNAL_VAR_NO_INIT

#if (defined PORT_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error PORT_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined PORT_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define PORT_INTERNAL_VAR_CLEARED

#if (defined PORT_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error PORT_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined PORT_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define PORT_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined PORT_INTERNAL_VAR_INIT) /* to prevent double definition */
#error PORT_INTERNAL_VAR_INIT already defined
#endif /* if (defined PORT_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define PORT_INTERNAL_VAR_INIT

#if (defined PORT_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error PORT_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined PORT_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define PORT_INTERNAL_VAR_POWER_ON_INIT

#if (defined PORT_CALIB) /* to prevent double definition */
#error PORT_CALIB already defined
#endif /* if (defined PORT_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define PORT_CALIB

#if (defined PORT_APPL_DATA) /* to prevent double definition */
#error PORT_APPL_DATA already defined
#endif /* if (defined PORT_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define PORT_APPL_DATA

#if (defined PORT_APPL_CONST) /* to prevent double definition */
#error PORT_APPL_CONST already defined
#endif /* if (defined PORT_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define PORT_APPL_CONST

#if (defined PORT_VAR_NO_INIT) /* to prevent double definition */
#error PORT_VAR_NO_INIT already defined
#endif /* if (defined PORT_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define PORT_VAR_NO_INIT

#if (defined PORT_VAR_CLEARED) /* to prevent double definition */
#error PORT_VAR_CLEARED already defined
#endif /* if (defined PORT_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define PORT_VAR_CLEARED

#if (defined PORT_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error PORT_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined PORT_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define PORT_VAR_POWER_ON_CLEARED

#if (defined PORT_VAR_INIT) /* to prevent double definition */
#error PORT_VAR_INIT already defined
#endif /* if (defined PORT_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define PORT_VAR_INIT

#if (defined PORT_VAR_POWER_ON_INIT) /* to prevent double definition */
#error PORT_VAR_POWER_ON_INIT already defined
#endif /* if (defined PORT_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define PORT_VAR_POWER_ON_INIT

#if (defined PORT_VAR_FAST_NO_INIT) /* to prevent double definition */
#error PORT_VAR_FAST_NO_INIT already defined
#endif /* if (defined PORT_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PORT_VAR_FAST_NO_INIT

#if (defined PORT_VAR_FAST_CLEARED) /* to prevent double definition */
#error PORT_VAR_FAST_CLEARED already defined
#endif /* if (defined PORT_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PORT_VAR_FAST_CLEARED

#if (defined PORT_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error PORT_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined PORT_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PORT_VAR_FAST_POWER_ON_CLEARED

#if (defined PORT_VAR_FAST_INIT) /* to prevent double definition */
#error PORT_VAR_FAST_INIT already defined
#endif /* if (defined PORT_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PORT_VAR_FAST_INIT

#if (defined PORT_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error PORT_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined PORT_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PORT_VAR_FAST_POWER_ON_INIT

#if (defined PORT_VAR_SAVED_ZONE) /* to prevent double definition */
#error PORT_VAR_SAVED_ZONE already defined
#endif /* if (defined PORT_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define PORT_VAR_SAVED_ZONE

#if (defined PORT_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error PORT_VAR_SLOW_NO_INIT already defined
#endif /* if (defined PORT_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define PORT_VAR_SLOW_NO_INIT

#if (defined PORT_VAR_SLOW_CLEARED) /* to prevent double definition */
#error PORT_VAR_SLOW_CLEARED already defined
#endif /* if (defined PORT_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define PORT_VAR_SLOW_CLEARED

#if (defined PORT_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error PORT_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined PORT_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define PORT_VAR_SLOW_POWER_ON_CLEARED

#if (defined PORT_VAR_SLOW_INIT) /* to prevent double definition */
#error PORT_VAR_SLOW_INIT already defined
#endif /* if (defined PORT_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define PORT_VAR_SLOW_INIT

#if (defined PORT_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error PORT_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined PORT_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define PORT_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module PWM]-----------------*/

#if (defined PWM_CODE) /* to prevent double definition */
#error PWM_CODE already defined
#endif /* if (defined PWM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define PWM_CODE

#if (defined PWM_CODE_FAST) /* to prevent double definition */
#error PWM_CODE_FAST already defined
#endif /* if (defined PWM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define PWM_CODE_FAST

#if (defined PWM_CODE_SLOW) /* to prevent double definition */
#error PWM_CODE_SLOW already defined
#endif /* if (defined PWM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define PWM_CODE_SLOW

#if (defined PWM_CONFIG_DATA) /* to prevent double definition */
#error PWM_CONFIG_DATA already defined
#endif /* if (defined PWM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define PWM_CONFIG_DATA

#if (defined PWM_CONST) /* to prevent double definition */
#error PWM_CONST already defined
#endif /* if (defined PWM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define PWM_CONST

#if (defined PWM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error PWM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined PWM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define PWM_CONST_SAVED_RECOVERY_ZONE

#if (defined PWM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error PWM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined PWM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define PWM_INTERNAL_VAR_NO_INIT

#if (defined PWM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error PWM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined PWM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define PWM_INTERNAL_VAR_CLEARED

#if (defined PWM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error PWM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined PWM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define PWM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined PWM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error PWM_INTERNAL_VAR_INIT already defined
#endif /* if (defined PWM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define PWM_INTERNAL_VAR_INIT

#if (defined PWM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error PWM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined PWM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define PWM_INTERNAL_VAR_POWER_ON_INIT

#if (defined PWM_CALIB) /* to prevent double definition */
#error PWM_CALIB already defined
#endif /* if (defined PWM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define PWM_CALIB

#if (defined PWM_APPL_DATA) /* to prevent double definition */
#error PWM_APPL_DATA already defined
#endif /* if (defined PWM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define PWM_APPL_DATA

#if (defined PWM_APPL_CONST) /* to prevent double definition */
#error PWM_APPL_CONST already defined
#endif /* if (defined PWM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define PWM_APPL_CONST

#if (defined PWM_VAR_NO_INIT) /* to prevent double definition */
#error PWM_VAR_NO_INIT already defined
#endif /* if (defined PWM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define PWM_VAR_NO_INIT

#if (defined PWM_VAR_CLEARED) /* to prevent double definition */
#error PWM_VAR_CLEARED already defined
#endif /* if (defined PWM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define PWM_VAR_CLEARED

#if (defined PWM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error PWM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined PWM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define PWM_VAR_POWER_ON_CLEARED

#if (defined PWM_VAR_INIT) /* to prevent double definition */
#error PWM_VAR_INIT already defined
#endif /* if (defined PWM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define PWM_VAR_INIT

#if (defined PWM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error PWM_VAR_POWER_ON_INIT already defined
#endif /* if (defined PWM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define PWM_VAR_POWER_ON_INIT

#if (defined PWM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error PWM_VAR_FAST_NO_INIT already defined
#endif /* if (defined PWM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PWM_VAR_FAST_NO_INIT

#if (defined PWM_VAR_FAST_CLEARED) /* to prevent double definition */
#error PWM_VAR_FAST_CLEARED already defined
#endif /* if (defined PWM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PWM_VAR_FAST_CLEARED

#if (defined PWM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error PWM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined PWM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PWM_VAR_FAST_POWER_ON_CLEARED

#if (defined PWM_VAR_FAST_INIT) /* to prevent double definition */
#error PWM_VAR_FAST_INIT already defined
#endif /* if (defined PWM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PWM_VAR_FAST_INIT

#if (defined PWM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error PWM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined PWM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PWM_VAR_FAST_POWER_ON_INIT

#if (defined PWM_VAR_SAVED_ZONE) /* to prevent double definition */
#error PWM_VAR_SAVED_ZONE already defined
#endif /* if (defined PWM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define PWM_VAR_SAVED_ZONE

#if (defined PWM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error PWM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined PWM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define PWM_VAR_SLOW_NO_INIT

#if (defined PWM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error PWM_VAR_SLOW_CLEARED already defined
#endif /* if (defined PWM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define PWM_VAR_SLOW_CLEARED

#if (defined PWM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error PWM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined PWM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define PWM_VAR_SLOW_POWER_ON_CLEARED

#if (defined PWM_VAR_SLOW_INIT) /* to prevent double definition */
#error PWM_VAR_SLOW_INIT already defined
#endif /* if (defined PWM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define PWM_VAR_SLOW_INIT

#if (defined PWM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error PWM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined PWM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define PWM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module SCHM]----------------*/

#if (defined SCHM_CODE) /* to prevent double definition */
#error SCHM_CODE already defined
#endif /* if (defined SCHM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define SCHM_CODE

#if (defined SCHM_CODE_FAST) /* to prevent double definition */
#error SCHM_CODE_FAST already defined
#endif /* if (defined SCHM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define SCHM_CODE_FAST

#if (defined SCHM_CODE_SLOW) /* to prevent double definition */
#error SCHM_CODE_SLOW already defined
#endif /* if (defined SCHM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define SCHM_CODE_SLOW

#if (defined SCHM_CONFIG_DATA) /* to prevent double definition */
#error SCHM_CONFIG_DATA already defined
#endif /* if (defined SCHM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define SCHM_CONFIG_DATA

#if (defined SCHM_CONST) /* to prevent double definition */
#error SCHM_CONST already defined
#endif /* if (defined SCHM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define SCHM_CONST

#if (defined SCHM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error SCHM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined SCHM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define SCHM_CONST_SAVED_RECOVERY_ZONE

#if (defined SCHM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error SCHM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined SCHM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define SCHM_INTERNAL_VAR_NO_INIT

#if (defined SCHM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error SCHM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined SCHM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define SCHM_INTERNAL_VAR_CLEARED

#if (defined SCHM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error SCHM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined SCHM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define SCHM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined SCHM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error SCHM_INTERNAL_VAR_INIT already defined
#endif /* if (defined SCHM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define SCHM_INTERNAL_VAR_INIT

#if (defined SCHM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error SCHM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined SCHM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define SCHM_INTERNAL_VAR_POWER_ON_INIT

#if (defined SCHM_CALIB) /* to prevent double definition */
#error SCHM_CALIB already defined
#endif /* if (defined SCHM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define SCHM_CALIB

#if (defined SCHM_APPL_DATA) /* to prevent double definition */
#error SCHM_APPL_DATA already defined
#endif /* if (defined SCHM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define SCHM_APPL_DATA

#if (defined SCHM_APPL_CONST) /* to prevent double definition */
#error SCHM_APPL_CONST already defined
#endif /* if (defined SCHM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define SCHM_APPL_CONST

#if (defined SCHM_VAR_NO_INIT) /* to prevent double definition */
#error SCHM_VAR_NO_INIT already defined
#endif /* if (defined SCHM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define SCHM_VAR_NO_INIT

#if (defined SCHM_VAR_CLEARED) /* to prevent double definition */
#error SCHM_VAR_CLEARED already defined
#endif /* if (defined SCHM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define SCHM_VAR_CLEARED

#if (defined SCHM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error SCHM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined SCHM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define SCHM_VAR_POWER_ON_CLEARED

#if (defined SCHM_VAR_INIT) /* to prevent double definition */
#error SCHM_VAR_INIT already defined
#endif /* if (defined SCHM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define SCHM_VAR_INIT

#if (defined SCHM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error SCHM_VAR_POWER_ON_INIT already defined
#endif /* if (defined SCHM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define SCHM_VAR_POWER_ON_INIT

#if (defined SCHM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error SCHM_VAR_FAST_NO_INIT already defined
#endif /* if (defined SCHM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SCHM_VAR_FAST_NO_INIT

#if (defined SCHM_VAR_FAST_CLEARED) /* to prevent double definition */
#error SCHM_VAR_FAST_CLEARED already defined
#endif /* if (defined SCHM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SCHM_VAR_FAST_CLEARED

#if (defined SCHM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error SCHM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined SCHM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SCHM_VAR_FAST_POWER_ON_CLEARED

#if (defined SCHM_VAR_FAST_INIT) /* to prevent double definition */
#error SCHM_VAR_FAST_INIT already defined
#endif /* if (defined SCHM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SCHM_VAR_FAST_INIT

#if (defined SCHM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error SCHM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined SCHM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SCHM_VAR_FAST_POWER_ON_INIT

#if (defined SCHM_VAR_SAVED_ZONE) /* to prevent double definition */
#error SCHM_VAR_SAVED_ZONE already defined
#endif /* if (defined SCHM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define SCHM_VAR_SAVED_ZONE

#if (defined SCHM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error SCHM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined SCHM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define SCHM_VAR_SLOW_NO_INIT

#if (defined SCHM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error SCHM_VAR_SLOW_CLEARED already defined
#endif /* if (defined SCHM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define SCHM_VAR_SLOW_CLEARED

#if (defined SCHM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error SCHM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined SCHM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define SCHM_VAR_SLOW_POWER_ON_CLEARED

#if (defined SCHM_VAR_SLOW_INIT) /* to prevent double definition */
#error SCHM_VAR_SLOW_INIT already defined
#endif /* if (defined SCHM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define SCHM_VAR_SLOW_INIT

#if (defined SCHM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error SCHM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined SCHM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define SCHM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module SPI]-----------------*/

#if (defined SPI_CODE) /* to prevent double definition */
#error SPI_CODE already defined
#endif /* if (defined SPI_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define SPI_CODE

#if (defined SPI_CODE_FAST) /* to prevent double definition */
#error SPI_CODE_FAST already defined
#endif /* if (defined SPI_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define SPI_CODE_FAST

#if (defined SPI_CODE_SLOW) /* to prevent double definition */
#error SPI_CODE_SLOW already defined
#endif /* if (defined SPI_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define SPI_CODE_SLOW

#if (defined SPI_CONFIG_DATA) /* to prevent double definition */
#error SPI_CONFIG_DATA already defined
#endif /* if (defined SPI_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define SPI_CONFIG_DATA

#if (defined SPI_CONST) /* to prevent double definition */
#error SPI_CONST already defined
#endif /* if (defined SPI_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define SPI_CONST

#if (defined SPI_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error SPI_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined SPI_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define SPI_CONST_SAVED_RECOVERY_ZONE

#if (defined SPI_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error SPI_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined SPI_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define SPI_INTERNAL_VAR_NO_INIT

#if (defined SPI_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error SPI_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined SPI_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define SPI_INTERNAL_VAR_CLEARED

#if (defined SPI_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error SPI_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined SPI_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define SPI_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined SPI_INTERNAL_VAR_INIT) /* to prevent double definition */
#error SPI_INTERNAL_VAR_INIT already defined
#endif /* if (defined SPI_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define SPI_INTERNAL_VAR_INIT

#if (defined SPI_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error SPI_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined SPI_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define SPI_INTERNAL_VAR_POWER_ON_INIT

#if (defined SPI_CALIB) /* to prevent double definition */
#error SPI_CALIB already defined
#endif /* if (defined SPI_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define SPI_CALIB

#if (defined SPI_APPL_DATA) /* to prevent double definition */
#error SPI_APPL_DATA already defined
#endif /* if (defined SPI_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define SPI_APPL_DATA

#if (defined SPI_APPL_CONST) /* to prevent double definition */
#error SPI_APPL_CONST already defined
#endif /* if (defined SPI_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define SPI_APPL_CONST

#if (defined SPI_VAR_NO_INIT) /* to prevent double definition */
#error SPI_VAR_NO_INIT already defined
#endif /* if (defined SPI_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define SPI_VAR_NO_INIT

#if (defined SPI_VAR_CLEARED) /* to prevent double definition */
#error SPI_VAR_CLEARED already defined
#endif /* if (defined SPI_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define SPI_VAR_CLEARED

#if (defined SPI_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error SPI_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined SPI_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define SPI_VAR_POWER_ON_CLEARED

#if (defined SPI_VAR_INIT) /* to prevent double definition */
#error SPI_VAR_INIT already defined
#endif /* if (defined SPI_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define SPI_VAR_INIT

#if (defined SPI_VAR_POWER_ON_INIT) /* to prevent double definition */
#error SPI_VAR_POWER_ON_INIT already defined
#endif /* if (defined SPI_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define SPI_VAR_POWER_ON_INIT

#if (defined SPI_VAR_FAST_NO_INIT) /* to prevent double definition */
#error SPI_VAR_FAST_NO_INIT already defined
#endif /* if (defined SPI_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SPI_VAR_FAST_NO_INIT

#if (defined SPI_VAR_FAST_CLEARED) /* to prevent double definition */
#error SPI_VAR_FAST_CLEARED already defined
#endif /* if (defined SPI_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SPI_VAR_FAST_CLEARED

#if (defined SPI_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error SPI_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined SPI_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SPI_VAR_FAST_POWER_ON_CLEARED

#if (defined SPI_VAR_FAST_INIT) /* to prevent double definition */
#error SPI_VAR_FAST_INIT already defined
#endif /* if (defined SPI_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SPI_VAR_FAST_INIT

#if (defined SPI_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error SPI_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined SPI_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define SPI_VAR_FAST_POWER_ON_INIT

#if (defined SPI_VAR_SAVED_ZONE) /* to prevent double definition */
#error SPI_VAR_SAVED_ZONE already defined
#endif /* if (defined SPI_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define SPI_VAR_SAVED_ZONE

#if (defined SPI_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error SPI_VAR_SLOW_NO_INIT already defined
#endif /* if (defined SPI_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define SPI_VAR_SLOW_NO_INIT

#if (defined SPI_VAR_SLOW_CLEARED) /* to prevent double definition */
#error SPI_VAR_SLOW_CLEARED already defined
#endif /* if (defined SPI_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define SPI_VAR_SLOW_CLEARED

#if (defined SPI_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error SPI_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined SPI_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define SPI_VAR_SLOW_POWER_ON_CLEARED

#if (defined SPI_VAR_SLOW_INIT) /* to prevent double definition */
#error SPI_VAR_SLOW_INIT already defined
#endif /* if (defined SPI_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define SPI_VAR_SLOW_INIT

#if (defined SPI_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error SPI_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined SPI_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define SPI_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module WDG]-----------------*/

#if (defined WDG_CODE) /* to prevent double definition */
#error WDG_CODE already defined
#endif /* if (defined WDG_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define WDG_CODE

#if (defined WDG_CODE_FAST) /* to prevent double definition */
#error WDG_CODE_FAST already defined
#endif /* if (defined WDG_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define WDG_CODE_FAST

#if (defined WDG_CODE_SLOW) /* to prevent double definition */
#error WDG_CODE_SLOW already defined
#endif /* if (defined WDG_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define WDG_CODE_SLOW

#if (defined WDG_CONFIG_DATA) /* to prevent double definition */
#error WDG_CONFIG_DATA already defined
#endif /* if (defined WDG_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define WDG_CONFIG_DATA

#if (defined WDG_CONST) /* to prevent double definition */
#error WDG_CONST already defined
#endif /* if (defined WDG_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define WDG_CONST

#if (defined WDG_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error WDG_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined WDG_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define WDG_CONST_SAVED_RECOVERY_ZONE

#if (defined WDG_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error WDG_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined WDG_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define WDG_INTERNAL_VAR_NO_INIT

#if (defined WDG_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error WDG_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined WDG_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define WDG_INTERNAL_VAR_CLEARED

#if (defined WDG_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error WDG_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined WDG_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define WDG_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined WDG_INTERNAL_VAR_INIT) /* to prevent double definition */
#error WDG_INTERNAL_VAR_INIT already defined
#endif /* if (defined WDG_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define WDG_INTERNAL_VAR_INIT

#if (defined WDG_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error WDG_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined WDG_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define WDG_INTERNAL_VAR_POWER_ON_INIT

#if (defined WDG_CALIB) /* to prevent double definition */
#error WDG_CALIB already defined
#endif /* if (defined WDG_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define WDG_CALIB

#if (defined WDG_APPL_DATA) /* to prevent double definition */
#error WDG_APPL_DATA already defined
#endif /* if (defined WDG_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define WDG_APPL_DATA

#if (defined WDG_APPL_CONST) /* to prevent double definition */
#error WDG_APPL_CONST already defined
#endif /* if (defined WDG_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define WDG_APPL_CONST

#if (defined WDG_VAR_NO_INIT) /* to prevent double definition */
#error WDG_VAR_NO_INIT already defined
#endif /* if (defined WDG_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define WDG_VAR_NO_INIT

#if (defined WDG_VAR_CLEARED) /* to prevent double definition */
#error WDG_VAR_CLEARED already defined
#endif /* if (defined WDG_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define WDG_VAR_CLEARED

#if (defined WDG_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error WDG_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined WDG_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define WDG_VAR_POWER_ON_CLEARED

#if (defined WDG_VAR_INIT) /* to prevent double definition */
#error WDG_VAR_INIT already defined
#endif /* if (defined WDG_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define WDG_VAR_INIT

#if (defined WDG_VAR_POWER_ON_INIT) /* to prevent double definition */
#error WDG_VAR_POWER_ON_INIT already defined
#endif /* if (defined WDG_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define WDG_VAR_POWER_ON_INIT

#if (defined WDG_VAR_FAST_NO_INIT) /* to prevent double definition */
#error WDG_VAR_FAST_NO_INIT already defined
#endif /* if (defined WDG_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDG_VAR_FAST_NO_INIT

#if (defined WDG_VAR_FAST_CLEARED) /* to prevent double definition */
#error WDG_VAR_FAST_CLEARED already defined
#endif /* if (defined WDG_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDG_VAR_FAST_CLEARED

#if (defined WDG_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error WDG_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined WDG_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDG_VAR_FAST_POWER_ON_CLEARED

#if (defined WDG_VAR_FAST_INIT) /* to prevent double definition */
#error WDG_VAR_FAST_INIT already defined
#endif /* if (defined WDG_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDG_VAR_FAST_INIT

#if (defined WDG_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error WDG_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined WDG_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDG_VAR_FAST_POWER_ON_INIT

#if (defined WDG_VAR_SAVED_ZONE) /* to prevent double definition */
#error WDG_VAR_SAVED_ZONE already defined
#endif /* if (defined WDG_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define WDG_VAR_SAVED_ZONE

#if (defined WDG_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error WDG_VAR_SLOW_NO_INIT already defined
#endif /* if (defined WDG_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define WDG_VAR_SLOW_NO_INIT

#if (defined WDG_VAR_SLOW_CLEARED) /* to prevent double definition */
#error WDG_VAR_SLOW_CLEARED already defined
#endif /* if (defined WDG_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define WDG_VAR_SLOW_CLEARED

#if (defined WDG_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error WDG_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined WDG_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define WDG_VAR_SLOW_POWER_ON_CLEARED

#if (defined WDG_VAR_SLOW_INIT) /* to prevent double definition */
#error WDG_VAR_SLOW_INIT already defined
#endif /* if (defined WDG_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define WDG_VAR_SLOW_INIT

#if (defined WDG_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error WDG_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined WDG_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define WDG_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CORTST]--------------*/

#if (defined CORTST_CODE) /* to prevent double definition */
#error CORTST_CODE already defined
#endif /* if (defined CORTST_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CORTST_CODE

#if (defined CORTST_CODE_FAST) /* to prevent double definition */
#error CORTST_CODE_FAST already defined
#endif /* if (defined CORTST_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CORTST_CODE_FAST

#if (defined CORTST_CODE_SLOW) /* to prevent double definition */
#error CORTST_CODE_SLOW already defined
#endif /* if (defined CORTST_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CORTST_CODE_SLOW

#if (defined CORTST_CONFIG_DATA) /* to prevent double definition */
#error CORTST_CONFIG_DATA already defined
#endif /* if (defined CORTST_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CORTST_CONFIG_DATA

#if (defined CORTST_CONST) /* to prevent double definition */
#error CORTST_CONST already defined
#endif /* if (defined CORTST_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CORTST_CONST

#if (defined CORTST_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CORTST_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CORTST_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CORTST_CONST_SAVED_RECOVERY_ZONE

#if (defined CORTST_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CORTST_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CORTST_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CORTST_INTERNAL_VAR_NO_INIT

#if (defined CORTST_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CORTST_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CORTST_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CORTST_INTERNAL_VAR_CLEARED

#if (defined CORTST_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CORTST_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CORTST_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CORTST_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CORTST_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CORTST_INTERNAL_VAR_INIT already defined
#endif /* if (defined CORTST_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CORTST_INTERNAL_VAR_INIT

#if (defined CORTST_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CORTST_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CORTST_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CORTST_INTERNAL_VAR_POWER_ON_INIT

#if (defined CORTST_CALIB) /* to prevent double definition */
#error CORTST_CALIB already defined
#endif /* if (defined CORTST_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CORTST_CALIB

#if (defined CORTST_APPL_DATA) /* to prevent double definition */
#error CORTST_APPL_DATA already defined
#endif /* if (defined CORTST_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CORTST_APPL_DATA

#if (defined CORTST_APPL_CONST) /* to prevent double definition */
#error CORTST_APPL_CONST already defined
#endif /* if (defined CORTST_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CORTST_APPL_CONST

#if (defined CORTST_VAR_NO_INIT) /* to prevent double definition */
#error CORTST_VAR_NO_INIT already defined
#endif /* if (defined CORTST_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CORTST_VAR_NO_INIT

#if (defined CORTST_VAR_CLEARED) /* to prevent double definition */
#error CORTST_VAR_CLEARED already defined
#endif /* if (defined CORTST_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CORTST_VAR_CLEARED

#if (defined CORTST_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CORTST_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CORTST_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CORTST_VAR_POWER_ON_CLEARED

#if (defined CORTST_VAR_INIT) /* to prevent double definition */
#error CORTST_VAR_INIT already defined
#endif /* if (defined CORTST_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CORTST_VAR_INIT

#if (defined CORTST_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CORTST_VAR_POWER_ON_INIT already defined
#endif /* if (defined CORTST_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CORTST_VAR_POWER_ON_INIT

#if (defined CORTST_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CORTST_VAR_FAST_NO_INIT already defined
#endif /* if (defined CORTST_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CORTST_VAR_FAST_NO_INIT

#if (defined CORTST_VAR_FAST_CLEARED) /* to prevent double definition */
#error CORTST_VAR_FAST_CLEARED already defined
#endif /* if (defined CORTST_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CORTST_VAR_FAST_CLEARED

#if (defined CORTST_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CORTST_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CORTST_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CORTST_VAR_FAST_POWER_ON_CLEARED

#if (defined CORTST_VAR_FAST_INIT) /* to prevent double definition */
#error CORTST_VAR_FAST_INIT already defined
#endif /* if (defined CORTST_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CORTST_VAR_FAST_INIT

#if (defined CORTST_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CORTST_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CORTST_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CORTST_VAR_FAST_POWER_ON_INIT

#if (defined CORTST_VAR_SAVED_ZONE) /* to prevent double definition */
#error CORTST_VAR_SAVED_ZONE already defined
#endif /* if (defined CORTST_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CORTST_VAR_SAVED_ZONE

#if (defined CORTST_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CORTST_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CORTST_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CORTST_VAR_SLOW_NO_INIT

#if (defined CORTST_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CORTST_VAR_SLOW_CLEARED already defined
#endif /* if (defined CORTST_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CORTST_VAR_SLOW_CLEARED

#if (defined CORTST_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CORTST_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CORTST_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CORTST_VAR_SLOW_POWER_ON_CLEARED

#if (defined CORTST_VAR_SLOW_INIT) /* to prevent double definition */
#error CORTST_VAR_SLOW_INIT already defined
#endif /* if (defined CORTST_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CORTST_VAR_SLOW_INIT

#if (defined CORTST_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CORTST_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CORTST_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CORTST_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FLSTST]--------------*/

#if (defined FLSTST_CODE) /* to prevent double definition */
#error FLSTST_CODE already defined
#endif /* if (defined FLSTST_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FLSTST_CODE

#if (defined FLSTST_CODE_FAST) /* to prevent double definition */
#error FLSTST_CODE_FAST already defined
#endif /* if (defined FLSTST_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FLSTST_CODE_FAST

#if (defined FLSTST_CODE_SLOW) /* to prevent double definition */
#error FLSTST_CODE_SLOW already defined
#endif /* if (defined FLSTST_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FLSTST_CODE_SLOW

#if (defined FLSTST_CONFIG_DATA) /* to prevent double definition */
#error FLSTST_CONFIG_DATA already defined
#endif /* if (defined FLSTST_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FLSTST_CONFIG_DATA

#if (defined FLSTST_CONST) /* to prevent double definition */
#error FLSTST_CONST already defined
#endif /* if (defined FLSTST_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FLSTST_CONST

#if (defined FLSTST_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FLSTST_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FLSTST_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FLSTST_CONST_SAVED_RECOVERY_ZONE

#if (defined FLSTST_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FLSTST_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FLSTST_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FLSTST_INTERNAL_VAR_NO_INIT

#if (defined FLSTST_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FLSTST_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FLSTST_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FLSTST_INTERNAL_VAR_CLEARED

#if (defined FLSTST_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FLSTST_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FLSTST_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FLSTST_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FLSTST_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FLSTST_INTERNAL_VAR_INIT already defined
#endif /* if (defined FLSTST_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FLSTST_INTERNAL_VAR_INIT

#if (defined FLSTST_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FLSTST_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FLSTST_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FLSTST_INTERNAL_VAR_POWER_ON_INIT

#if (defined FLSTST_CALIB) /* to prevent double definition */
#error FLSTST_CALIB already defined
#endif /* if (defined FLSTST_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FLSTST_CALIB

#if (defined FLSTST_APPL_DATA) /* to prevent double definition */
#error FLSTST_APPL_DATA already defined
#endif /* if (defined FLSTST_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FLSTST_APPL_DATA

#if (defined FLSTST_APPL_CONST) /* to prevent double definition */
#error FLSTST_APPL_CONST already defined
#endif /* if (defined FLSTST_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FLSTST_APPL_CONST

#if (defined FLSTST_VAR_NO_INIT) /* to prevent double definition */
#error FLSTST_VAR_NO_INIT already defined
#endif /* if (defined FLSTST_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FLSTST_VAR_NO_INIT

#if (defined FLSTST_VAR_CLEARED) /* to prevent double definition */
#error FLSTST_VAR_CLEARED already defined
#endif /* if (defined FLSTST_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FLSTST_VAR_CLEARED

#if (defined FLSTST_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FLSTST_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FLSTST_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FLSTST_VAR_POWER_ON_CLEARED

#if (defined FLSTST_VAR_INIT) /* to prevent double definition */
#error FLSTST_VAR_INIT already defined
#endif /* if (defined FLSTST_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FLSTST_VAR_INIT

#if (defined FLSTST_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FLSTST_VAR_POWER_ON_INIT already defined
#endif /* if (defined FLSTST_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FLSTST_VAR_POWER_ON_INIT

#if (defined FLSTST_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FLSTST_VAR_FAST_NO_INIT already defined
#endif /* if (defined FLSTST_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLSTST_VAR_FAST_NO_INIT

#if (defined FLSTST_VAR_FAST_CLEARED) /* to prevent double definition */
#error FLSTST_VAR_FAST_CLEARED already defined
#endif /* if (defined FLSTST_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLSTST_VAR_FAST_CLEARED

#if (defined FLSTST_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FLSTST_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FLSTST_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLSTST_VAR_FAST_POWER_ON_CLEARED

#if (defined FLSTST_VAR_FAST_INIT) /* to prevent double definition */
#error FLSTST_VAR_FAST_INIT already defined
#endif /* if (defined FLSTST_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLSTST_VAR_FAST_INIT

#if (defined FLSTST_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FLSTST_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FLSTST_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FLSTST_VAR_FAST_POWER_ON_INIT

#if (defined FLSTST_VAR_SAVED_ZONE) /* to prevent double definition */
#error FLSTST_VAR_SAVED_ZONE already defined
#endif /* if (defined FLSTST_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FLSTST_VAR_SAVED_ZONE

#if (defined FLSTST_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FLSTST_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FLSTST_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FLSTST_VAR_SLOW_NO_INIT

#if (defined FLSTST_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FLSTST_VAR_SLOW_CLEARED already defined
#endif /* if (defined FLSTST_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FLSTST_VAR_SLOW_CLEARED

#if (defined FLSTST_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FLSTST_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FLSTST_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FLSTST_VAR_SLOW_POWER_ON_CLEARED

#if (defined FLSTST_VAR_SLOW_INIT) /* to prevent double definition */
#error FLSTST_VAR_SLOW_INIT already defined
#endif /* if (defined FLSTST_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FLSTST_VAR_SLOW_INIT

#if (defined FLSTST_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FLSTST_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FLSTST_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FLSTST_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module RAMTST]--------------*/

#if (defined RAMTST_CODE) /* to prevent double definition */
#error RAMTST_CODE already defined
#endif /* if (defined RAMTST_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define RAMTST_CODE

#if (defined RAMTST_CODE_FAST) /* to prevent double definition */
#error RAMTST_CODE_FAST already defined
#endif /* if (defined RAMTST_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define RAMTST_CODE_FAST

#if (defined RAMTST_CODE_SLOW) /* to prevent double definition */
#error RAMTST_CODE_SLOW already defined
#endif /* if (defined RAMTST_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define RAMTST_CODE_SLOW

#if (defined RAMTST_CONFIG_DATA) /* to prevent double definition */
#error RAMTST_CONFIG_DATA already defined
#endif /* if (defined RAMTST_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define RAMTST_CONFIG_DATA

#if (defined RAMTST_CONST) /* to prevent double definition */
#error RAMTST_CONST already defined
#endif /* if (defined RAMTST_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define RAMTST_CONST

#if (defined RAMTST_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error RAMTST_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined RAMTST_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define RAMTST_CONST_SAVED_RECOVERY_ZONE

#if (defined RAMTST_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error RAMTST_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined RAMTST_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define RAMTST_INTERNAL_VAR_NO_INIT

#if (defined RAMTST_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error RAMTST_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined RAMTST_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define RAMTST_INTERNAL_VAR_CLEARED

#if (defined RAMTST_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error RAMTST_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined RAMTST_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define RAMTST_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined RAMTST_INTERNAL_VAR_INIT) /* to prevent double definition */
#error RAMTST_INTERNAL_VAR_INIT already defined
#endif /* if (defined RAMTST_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define RAMTST_INTERNAL_VAR_INIT

#if (defined RAMTST_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error RAMTST_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined RAMTST_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define RAMTST_INTERNAL_VAR_POWER_ON_INIT

#if (defined RAMTST_CALIB) /* to prevent double definition */
#error RAMTST_CALIB already defined
#endif /* if (defined RAMTST_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define RAMTST_CALIB

#if (defined RAMTST_APPL_DATA) /* to prevent double definition */
#error RAMTST_APPL_DATA already defined
#endif /* if (defined RAMTST_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define RAMTST_APPL_DATA

#if (defined RAMTST_APPL_CONST) /* to prevent double definition */
#error RAMTST_APPL_CONST already defined
#endif /* if (defined RAMTST_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define RAMTST_APPL_CONST

#if (defined RAMTST_VAR_NO_INIT) /* to prevent double definition */
#error RAMTST_VAR_NO_INIT already defined
#endif /* if (defined RAMTST_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define RAMTST_VAR_NO_INIT

#if (defined RAMTST_VAR_CLEARED) /* to prevent double definition */
#error RAMTST_VAR_CLEARED already defined
#endif /* if (defined RAMTST_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define RAMTST_VAR_CLEARED

#if (defined RAMTST_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error RAMTST_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined RAMTST_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define RAMTST_VAR_POWER_ON_CLEARED

#if (defined RAMTST_VAR_INIT) /* to prevent double definition */
#error RAMTST_VAR_INIT already defined
#endif /* if (defined RAMTST_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define RAMTST_VAR_INIT

#if (defined RAMTST_VAR_POWER_ON_INIT) /* to prevent double definition */
#error RAMTST_VAR_POWER_ON_INIT already defined
#endif /* if (defined RAMTST_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define RAMTST_VAR_POWER_ON_INIT

#if (defined RAMTST_VAR_FAST_NO_INIT) /* to prevent double definition */
#error RAMTST_VAR_FAST_NO_INIT already defined
#endif /* if (defined RAMTST_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RAMTST_VAR_FAST_NO_INIT

#if (defined RAMTST_VAR_FAST_CLEARED) /* to prevent double definition */
#error RAMTST_VAR_FAST_CLEARED already defined
#endif /* if (defined RAMTST_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RAMTST_VAR_FAST_CLEARED

#if (defined RAMTST_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error RAMTST_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined RAMTST_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RAMTST_VAR_FAST_POWER_ON_CLEARED

#if (defined RAMTST_VAR_FAST_INIT) /* to prevent double definition */
#error RAMTST_VAR_FAST_INIT already defined
#endif /* if (defined RAMTST_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RAMTST_VAR_FAST_INIT

#if (defined RAMTST_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error RAMTST_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined RAMTST_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RAMTST_VAR_FAST_POWER_ON_INIT

#if (defined RAMTST_VAR_SAVED_ZONE) /* to prevent double definition */
#error RAMTST_VAR_SAVED_ZONE already defined
#endif /* if (defined RAMTST_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define RAMTST_VAR_SAVED_ZONE

#if (defined RAMTST_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error RAMTST_VAR_SLOW_NO_INIT already defined
#endif /* if (defined RAMTST_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define RAMTST_VAR_SLOW_NO_INIT

#if (defined RAMTST_VAR_SLOW_CLEARED) /* to prevent double definition */
#error RAMTST_VAR_SLOW_CLEARED already defined
#endif /* if (defined RAMTST_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define RAMTST_VAR_SLOW_CLEARED

#if (defined RAMTST_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error RAMTST_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined RAMTST_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define RAMTST_VAR_SLOW_POWER_ON_CLEARED

#if (defined RAMTST_VAR_SLOW_INIT) /* to prevent double definition */
#error RAMTST_VAR_SLOW_INIT already defined
#endif /* if (defined RAMTST_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define RAMTST_VAR_SLOW_INIT

#if (defined RAMTST_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error RAMTST_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined RAMTST_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define RAMTST_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CRY]-----------------*/

#if (defined CRY_CODE) /* to prevent double definition */
#error CRY_CODE already defined
#endif /* if (defined CRY_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CRY_CODE

#if (defined CRY_CODE_FAST) /* to prevent double definition */
#error CRY_CODE_FAST already defined
#endif /* if (defined CRY_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CRY_CODE_FAST

#if (defined CRY_CODE_SLOW) /* to prevent double definition */
#error CRY_CODE_SLOW already defined
#endif /* if (defined CRY_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CRY_CODE_SLOW

#if (defined CRY_CONFIG_DATA) /* to prevent double definition */
#error CRY_CONFIG_DATA already defined
#endif /* if (defined CRY_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CRY_CONFIG_DATA

#if (defined CRY_CONST) /* to prevent double definition */
#error CRY_CONST already defined
#endif /* if (defined CRY_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CRY_CONST

#if (defined CRY_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CRY_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CRY_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CRY_CONST_SAVED_RECOVERY_ZONE

#if (defined CRY_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CRY_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CRY_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CRY_INTERNAL_VAR_NO_INIT

#if (defined CRY_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CRY_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CRY_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CRY_INTERNAL_VAR_CLEARED

#if (defined CRY_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CRY_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CRY_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CRY_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CRY_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CRY_INTERNAL_VAR_INIT already defined
#endif /* if (defined CRY_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CRY_INTERNAL_VAR_INIT

#if (defined CRY_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CRY_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CRY_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CRY_INTERNAL_VAR_POWER_ON_INIT

#if (defined CRY_CALIB) /* to prevent double definition */
#error CRY_CALIB already defined
#endif /* if (defined CRY_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CRY_CALIB

#if (defined CRY_APPL_DATA) /* to prevent double definition */
#error CRY_APPL_DATA already defined
#endif /* if (defined CRY_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CRY_APPL_DATA

#if (defined CRY_APPL_CONST) /* to prevent double definition */
#error CRY_APPL_CONST already defined
#endif /* if (defined CRY_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CRY_APPL_CONST

#if (defined CRY_VAR_NO_INIT) /* to prevent double definition */
#error CRY_VAR_NO_INIT already defined
#endif /* if (defined CRY_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CRY_VAR_NO_INIT

#if (defined CRY_VAR_CLEARED) /* to prevent double definition */
#error CRY_VAR_CLEARED already defined
#endif /* if (defined CRY_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CRY_VAR_CLEARED

#if (defined CRY_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CRY_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CRY_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CRY_VAR_POWER_ON_CLEARED

#if (defined CRY_VAR_INIT) /* to prevent double definition */
#error CRY_VAR_INIT already defined
#endif /* if (defined CRY_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CRY_VAR_INIT

#if (defined CRY_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CRY_VAR_POWER_ON_INIT already defined
#endif /* if (defined CRY_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CRY_VAR_POWER_ON_INIT

#if (defined CRY_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CRY_VAR_FAST_NO_INIT already defined
#endif /* if (defined CRY_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRY_VAR_FAST_NO_INIT

#if (defined CRY_VAR_FAST_CLEARED) /* to prevent double definition */
#error CRY_VAR_FAST_CLEARED already defined
#endif /* if (defined CRY_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRY_VAR_FAST_CLEARED

#if (defined CRY_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CRY_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CRY_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRY_VAR_FAST_POWER_ON_CLEARED

#if (defined CRY_VAR_FAST_INIT) /* to prevent double definition */
#error CRY_VAR_FAST_INIT already defined
#endif /* if (defined CRY_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRY_VAR_FAST_INIT

#if (defined CRY_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CRY_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CRY_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRY_VAR_FAST_POWER_ON_INIT

#if (defined CRY_VAR_SAVED_ZONE) /* to prevent double definition */
#error CRY_VAR_SAVED_ZONE already defined
#endif /* if (defined CRY_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CRY_VAR_SAVED_ZONE

#if (defined CRY_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CRY_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CRY_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CRY_VAR_SLOW_NO_INIT

#if (defined CRY_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CRY_VAR_SLOW_CLEARED already defined
#endif /* if (defined CRY_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CRY_VAR_SLOW_CLEARED

#if (defined CRY_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CRY_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CRY_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CRY_VAR_SLOW_POWER_ON_CLEARED

#if (defined CRY_VAR_SLOW_INIT) /* to prevent double definition */
#error CRY_VAR_SLOW_INIT already defined
#endif /* if (defined CRY_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CRY_VAR_SLOW_INIT

#if (defined CRY_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CRY_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CRY_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CRY_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CAL]-------------------*/

#if (defined CAL_CODE) /* to prevent double definition */
#error CAL_CODE already defined
#endif /* if (defined CAL_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CAL_CODE

#if (defined CAL_CODE_FAST) /* to prevent double definition */
#error CAL_CODE_FAST already defined
#endif /* if (defined CAL_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CAL_CODE_FAST

#if (defined CAL_CODE_SLOW) /* to prevent double definition */
#error CAL_CODE_SLOW already defined
#endif /* if (defined CAL_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CAL_CODE_SLOW

#if (defined CAL_CONFIG_DATA) /* to prevent double definition */
#error CAL_CONFIG_DATA already defined
#endif /* if (defined CAL_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CAL_CONFIG_DATA

#if (defined CAL_CONST) /* to prevent double definition */
#error CAL_CONST already defined
#endif /* if (defined CAL_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CAL_CONST

#if (defined CAL_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CAL_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CAL_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CAL_CONST_SAVED_RECOVERY_ZONE

#if (defined CAL_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CAL_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CAL_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CAL_INTERNAL_VAR_NO_INIT

#if (defined CAL_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CAL_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CAL_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CAL_INTERNAL_VAR_CLEARED

#if (defined CAL_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CAL_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CAL_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CAL_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CAL_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CAL_INTERNAL_VAR_INIT already defined
#endif /* if (defined CAL_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CAL_INTERNAL_VAR_INIT

#if (defined CAL_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CAL_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CAL_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CAL_INTERNAL_VAR_POWER_ON_INIT

#if (defined CAL_CALIB) /* to prevent double definition */
#error CAL_CALIB already defined
#endif /* if (defined CAL_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CAL_CALIB

#if (defined CAL_APPL_DATA) /* to prevent double definition */
#error CAL_APPL_DATA already defined
#endif /* if (defined CAL_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CAL_APPL_DATA

#if (defined CAL_APPL_CONST) /* to prevent double definition */
#error CAL_APPL_CONST already defined
#endif /* if (defined CAL_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CAL_APPL_CONST

#if (defined CAL_VAR_NO_INIT) /* to prevent double definition */
#error CAL_VAR_NO_INIT already defined
#endif /* if (defined CAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CAL_VAR_NO_INIT

#if (defined CAL_VAR_CLEARED) /* to prevent double definition */
#error CAL_VAR_CLEARED already defined
#endif /* if (defined CAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CAL_VAR_CLEARED

#if (defined CAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CAL_VAR_POWER_ON_CLEARED

#if (defined CAL_VAR_INIT) /* to prevent double definition */
#error CAL_VAR_INIT already defined
#endif /* if (defined CAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CAL_VAR_INIT

#if (defined CAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CAL_VAR_POWER_ON_INIT

#if (defined CAL_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CAL_VAR_FAST_NO_INIT already defined
#endif /* if (defined CAL_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAL_VAR_FAST_NO_INIT

#if (defined CAL_VAR_FAST_CLEARED) /* to prevent double definition */
#error CAL_VAR_FAST_CLEARED already defined
#endif /* if (defined CAL_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAL_VAR_FAST_CLEARED

#if (defined CAL_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CAL_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CAL_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAL_VAR_FAST_POWER_ON_CLEARED

#if (defined CAL_VAR_FAST_INIT) /* to prevent double definition */
#error CAL_VAR_FAST_INIT already defined
#endif /* if (defined CAL_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAL_VAR_FAST_INIT

#if (defined CAL_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CAL_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CAL_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CAL_VAR_FAST_POWER_ON_INIT

#if (defined CAL_VAR_SAVED_ZONE) /* to prevent double definition */
#error CAL_VAR_SAVED_ZONE already defined
#endif /* if (defined CAL_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CAL_VAR_SAVED_ZONE

#if (defined CAL_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CAL_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CAL_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CAL_VAR_SLOW_NO_INIT

#if (defined CAL_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CAL_VAR_SLOW_CLEARED already defined
#endif /* if (defined CAL_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CAL_VAR_SLOW_CLEARED

#if (defined CAL_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CAL_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CAL_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CAL_VAR_SLOW_POWER_ON_CLEARED

#if (defined CAL_VAR_SLOW_INIT) /* to prevent double definition */
#error CAL_VAR_SLOW_INIT already defined
#endif /* if (defined CAL_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CAL_VAR_SLOW_INIT

#if (defined CAL_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CAL_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CAL_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CAL_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CANNM]-------------------*/

#if (defined CANNM_CODE) /* to prevent double definition */
#error CANNM_CODE already defined
#endif /* if (defined CANNM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANNM_CODE

#if (defined CANNM_CODE_FAST) /* to prevent double definition */
#error CANNM_CODE_FAST already defined
#endif /* if (defined CANNM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CANNM_CODE_FAST

#if (defined CANNM_CODE_SLOW) /* to prevent double definition */
#error CANNM_CODE_SLOW already defined
#endif /* if (defined CANNM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CANNM_CODE_SLOW

#if (defined CANNM_CONFIG_DATA) /* to prevent double definition */
#error CANNM_CONFIG_DATA already defined
#endif /* if (defined CANNM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CANNM_CONFIG_DATA

#if (defined CANNM_CONST) /* to prevent double definition */
#error CANNM_CONST already defined
#endif /* if (defined CANNM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANNM_CONST

#if (defined CANNM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CANNM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CANNM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CANNM_CONST_SAVED_RECOVERY_ZONE

#if (defined CANNM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CANNM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CANNM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CANNM_INTERNAL_VAR_NO_INIT

#if (defined CANNM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CANNM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CANNM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CANNM_INTERNAL_VAR_CLEARED

#if (defined CANNM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANNM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANNM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CANNM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CANNM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CANNM_INTERNAL_VAR_INIT already defined
#endif /* if (defined CANNM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CANNM_INTERNAL_VAR_INIT

#if (defined CANNM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANNM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANNM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CANNM_INTERNAL_VAR_POWER_ON_INIT

#if (defined CANNM_CALIB) /* to prevent double definition */
#error CANNM_CALIB already defined
#endif /* if (defined CANNM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CANNM_CALIB

#if (defined CANNM_APPL_DATA) /* to prevent double definition */
#error CANNM_APPL_DATA already defined
#endif /* if (defined CANNM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANNM_APPL_DATA

#if (defined CANNM_APPL_CONST) /* to prevent double definition */
#error CANNM_APPL_CONST already defined
#endif /* if (defined CANNM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANNM_APPL_CONST

#if (defined CANNM_VAR_NO_INIT) /* to prevent double definition */
#error CANNM_VAR_NO_INIT already defined
#endif /* if (defined CANNM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CANNM_VAR_NO_INIT

#if (defined CANNM_VAR_CLEARED) /* to prevent double definition */
#error CANNM_VAR_CLEARED already defined
#endif /* if (defined CANNM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CANNM_VAR_CLEARED

#if (defined CANNM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANNM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANNM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CANNM_VAR_POWER_ON_CLEARED

#if (defined CANNM_VAR_INIT) /* to prevent double definition */
#error CANNM_VAR_INIT already defined
#endif /* if (defined CANNM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CANNM_VAR_INIT

#if (defined CANNM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANNM_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANNM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CANNM_VAR_POWER_ON_INIT

#if (defined CANNM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CANNM_VAR_FAST_NO_INIT already defined
#endif /* if (defined CANNM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANNM_VAR_FAST_NO_INIT

#if (defined CANNM_VAR_FAST_CLEARED) /* to prevent double definition */
#error CANNM_VAR_FAST_CLEARED already defined
#endif /* if (defined CANNM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANNM_VAR_FAST_CLEARED

#if (defined CANNM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CANNM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CANNM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANNM_VAR_FAST_POWER_ON_CLEARED

#if (defined CANNM_VAR_FAST_INIT) /* to prevent double definition */
#error CANNM_VAR_FAST_INIT already defined
#endif /* if (defined CANNM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANNM_VAR_FAST_INIT

#if (defined CANNM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CANNM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CANNM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANNM_VAR_FAST_POWER_ON_INIT

#if (defined CANNM_VAR_SAVED_ZONE) /* to prevent double definition */
#error CANNM_VAR_SAVED_ZONE already defined
#endif /* if (defined CANNM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CANNM_VAR_SAVED_ZONE

#if (defined CANNM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CANNM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CANNM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CANNM_VAR_SLOW_NO_INIT

#if (defined CANNM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CANNM_VAR_SLOW_CLEARED already defined
#endif /* if (defined CANNM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CANNM_VAR_SLOW_CLEARED

#if (defined CANNM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CANNM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CANNM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CANNM_VAR_SLOW_POWER_ON_CLEARED

#if (defined CANNM_VAR_SLOW_INIT) /* to prevent double definition */
#error CANNM_VAR_SLOW_INIT already defined
#endif /* if (defined CANNM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CANNM_VAR_SLOW_INIT

#if (defined CANNM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CANNM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CANNM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CANNM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CANTP]-------------------*/

#if (defined CANTP_CODE) /* to prevent double definition */
#error CANTP_CODE already defined
#endif /* if (defined CANTP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANTP_CODE

#if (defined CANTP_CODE_FAST) /* to prevent double definition */
#error CANTP_CODE_FAST already defined
#endif /* if (defined CANTP_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CANTP_CODE_FAST

#if (defined CANTP_CODE_SLOW) /* to prevent double definition */
#error CANTP_CODE_SLOW already defined
#endif /* if (defined CANTP_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CANTP_CODE_SLOW

#if (defined CANTP_CONFIG_DATA) /* to prevent double definition */
#error CANTP_CONFIG_DATA already defined
#endif /* if (defined CANTP_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CANTP_CONFIG_DATA

#if (defined CANTP_CONST) /* to prevent double definition */
#error CANTP_CONST already defined
#endif /* if (defined CANTP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANTP_CONST

#if (defined CANTP_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CANTP_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CANTP_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CANTP_CONST_SAVED_RECOVERY_ZONE

#if (defined CANTP_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CANTP_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CANTP_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CANTP_INTERNAL_VAR_NO_INIT

#if (defined CANTP_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CANTP_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CANTP_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CANTP_INTERNAL_VAR_CLEARED

#if (defined CANTP_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTP_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANTP_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CANTP_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CANTP_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CANTP_INTERNAL_VAR_INIT already defined
#endif /* if (defined CANTP_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CANTP_INTERNAL_VAR_INIT

#if (defined CANTP_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANTP_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANTP_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CANTP_INTERNAL_VAR_POWER_ON_INIT

#if (defined CANTP_CALIB) /* to prevent double definition */
#error CANTP_CALIB already defined
#endif /* if (defined CANTP_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CANTP_CALIB

#if (defined CANTP_APPL_DATA) /* to prevent double definition */
#error CANTP_APPL_DATA already defined
#endif /* if (defined CANTP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANTP_APPL_DATA

#if (defined CANTP_APPL_CONST) /* to prevent double definition */
#error CANTP_APPL_CONST already defined
#endif /* if (defined CANTP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANTP_APPL_CONST

#if (defined CANTP_VAR_NO_INIT) /* to prevent double definition */
#error CANTP_VAR_NO_INIT already defined
#endif /* if (defined CANTP_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CANTP_VAR_NO_INIT

#if (defined CANTP_VAR_CLEARED) /* to prevent double definition */
#error CANTP_VAR_CLEARED already defined
#endif /* if (defined CANTP_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CANTP_VAR_CLEARED

#if (defined CANTP_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTP_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANTP_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CANTP_VAR_POWER_ON_CLEARED

#if (defined CANTP_VAR_INIT) /* to prevent double definition */
#error CANTP_VAR_INIT already defined
#endif /* if (defined CANTP_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CANTP_VAR_INIT

#if (defined CANTP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANTP_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANTP_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CANTP_VAR_POWER_ON_INIT

#if (defined CANTP_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CANTP_VAR_FAST_NO_INIT already defined
#endif /* if (defined CANTP_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTP_VAR_FAST_NO_INIT

#if (defined CANTP_VAR_FAST_CLEARED) /* to prevent double definition */
#error CANTP_VAR_FAST_CLEARED already defined
#endif /* if (defined CANTP_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTP_VAR_FAST_CLEARED

#if (defined CANTP_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTP_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CANTP_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTP_VAR_FAST_POWER_ON_CLEARED

#if (defined CANTP_VAR_FAST_INIT) /* to prevent double definition */
#error CANTP_VAR_FAST_INIT already defined
#endif /* if (defined CANTP_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTP_VAR_FAST_INIT

#if (defined CANTP_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CANTP_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CANTP_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTP_VAR_FAST_POWER_ON_INIT

#if (defined CANTP_VAR_SAVED_ZONE) /* to prevent double definition */
#error CANTP_VAR_SAVED_ZONE already defined
#endif /* if (defined CANTP_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CANTP_VAR_SAVED_ZONE

#if (defined CANTP_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CANTP_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CANTP_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CANTP_VAR_SLOW_NO_INIT

#if (defined CANTP_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CANTP_VAR_SLOW_CLEARED already defined
#endif /* if (defined CANTP_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CANTP_VAR_SLOW_CLEARED

#if (defined CANTP_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTP_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CANTP_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CANTP_VAR_SLOW_POWER_ON_CLEARED

#if (defined CANTP_VAR_SLOW_INIT) /* to prevent double definition */
#error CANTP_VAR_SLOW_INIT already defined
#endif /* if (defined CANTP_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CANTP_VAR_SLOW_INIT

#if (defined CANTP_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CANTP_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CANTP_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CANTP_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CANTRCV]-------------------*/

#if (defined CANTRCV_CODE) /* to prevent double definition */
#error CANTRCV_CODE already defined
#endif /* if (defined CANTRCV_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANTRCV_CODE

#if (defined CANTRCV_CODE_FAST) /* to prevent double definition */
#error CANTRCV_CODE_FAST already defined
#endif /* if (defined CANTRCV_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CANTRCV_CODE_FAST

#if (defined CANTRCV_CODE_SLOW) /* to prevent double definition */
#error CANTRCV_CODE_SLOW already defined
#endif /* if (defined CANTRCV_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CANTRCV_CODE_SLOW

#if (defined CANTRCV_CONFIG_DATA) /* to prevent double definition */
#error CANTRCV_CONFIG_DATA already defined
#endif /* if (defined CANTRCV_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CANTRCV_CONFIG_DATA

#if (defined CANTRCV_CONST) /* to prevent double definition */
#error CANTRCV_CONST already defined
#endif /* if (defined CANTRCV_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANTRCV_CONST

#if (defined CANTRCV_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CANTRCV_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CANTRCV_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CANTRCV_CONST_SAVED_RECOVERY_ZONE

#if (defined CANTRCV_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CANTRCV_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CANTRCV_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CANTRCV_INTERNAL_VAR_NO_INIT

#if (defined CANTRCV_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CANTRCV_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CANTRCV_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CANTRCV_INTERNAL_VAR_CLEARED

#if (defined CANTRCV_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTRCV_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANTRCV_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CANTRCV_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CANTRCV_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CANTRCV_INTERNAL_VAR_INIT already defined
#endif /* if (defined CANTRCV_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CANTRCV_INTERNAL_VAR_INIT

#if (defined CANTRCV_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANTRCV_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANTRCV_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CANTRCV_INTERNAL_VAR_POWER_ON_INIT

#if (defined CANTRCV_CALIB) /* to prevent double definition */
#error CANTRCV_CALIB already defined
#endif /* if (defined CANTRCV_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CANTRCV_CALIB

#if (defined CANTRCV_APPL_DATA) /* to prevent double definition */
#error CANTRCV_APPL_DATA already defined
#endif /* if (defined CANTRCV_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANTRCV_APPL_DATA

#if (defined CANTRCV_APPL_CONST) /* to prevent double definition */
#error CANTRCV_APPL_CONST already defined
#endif /* if (defined CANTRCV_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANTRCV_APPL_CONST

#if (defined CANTRCV_VAR_NO_INIT) /* to prevent double definition */
#error CANTRCV_VAR_NO_INIT already defined
#endif /* if (defined CANTRCV_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CANTRCV_VAR_NO_INIT

#if (defined CANTRCV_VAR_CLEARED) /* to prevent double definition */
#error CANTRCV_VAR_CLEARED already defined
#endif /* if (defined CANTRCV_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CANTRCV_VAR_CLEARED

#if (defined CANTRCV_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTRCV_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CANTRCV_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CANTRCV_VAR_POWER_ON_CLEARED

#if (defined CANTRCV_VAR_INIT) /* to prevent double definition */
#error CANTRCV_VAR_INIT already defined
#endif /* if (defined CANTRCV_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CANTRCV_VAR_INIT

#if (defined CANTRCV_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANTRCV_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANTRCV_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CANTRCV_VAR_POWER_ON_INIT

#if (defined CANTRCV_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CANTRCV_VAR_FAST_NO_INIT already defined
#endif /* if (defined CANTRCV_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTRCV_VAR_FAST_NO_INIT

#if (defined CANTRCV_VAR_FAST_CLEARED) /* to prevent double definition */
#error CANTRCV_VAR_FAST_CLEARED already defined
#endif /* if (defined CANTRCV_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTRCV_VAR_FAST_CLEARED

#if (defined CANTRCV_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTRCV_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CANTRCV_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTRCV_VAR_FAST_POWER_ON_CLEARED

#if (defined CANTRCV_VAR_FAST_INIT) /* to prevent double definition */
#error CANTRCV_VAR_FAST_INIT already defined
#endif /* if (defined CANTRCV_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTRCV_VAR_FAST_INIT

#if (defined CANTRCV_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CANTRCV_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CANTRCV_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CANTRCV_VAR_FAST_POWER_ON_INIT

#if (defined CANTRCV_VAR_SAVED_ZONE) /* to prevent double definition */
#error CANTRCV_VAR_SAVED_ZONE already defined
#endif /* if (defined CANTRCV_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CANTRCV_VAR_SAVED_ZONE

#if (defined CANTRCV_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CANTRCV_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CANTRCV_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CANTRCV_VAR_SLOW_NO_INIT

#if (defined CANTRCV_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CANTRCV_VAR_SLOW_CLEARED already defined
#endif /* if (defined CANTRCV_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CANTRCV_VAR_SLOW_CLEARED

#if (defined CANTRCV_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CANTRCV_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CANTRCV_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CANTRCV_VAR_SLOW_POWER_ON_CLEARED

#if (defined CANTRCV_VAR_SLOW_INIT) /* to prevent double definition */
#error CANTRCV_VAR_SLOW_INIT already defined
#endif /* if (defined CANTRCV_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CANTRCV_VAR_SLOW_INIT

#if (defined CANTRCV_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CANTRCV_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CANTRCV_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CANTRCV_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module COM]-------------------*/

#if (defined COM_CODE) /* to prevent double definition */
#error COM_CODE already defined
#endif /* if (defined COM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define COM_CODE

#if (defined COM_CODE_FAST) /* to prevent double definition */
#error COM_CODE_FAST already defined
#endif /* if (defined COM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define COM_CODE_FAST

#if (defined COM_CODE_SLOW) /* to prevent double definition */
#error COM_CODE_SLOW already defined
#endif /* if (defined COM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define COM_CODE_SLOW

#if (defined COM_CONFIG_DATA) /* to prevent double definition */
#error COM_CONFIG_DATA already defined
#endif /* if (defined COM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define COM_CONFIG_DATA

#if (defined COM_CONST) /* to prevent double definition */
#error COM_CONST already defined
#endif /* if (defined COM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define COM_CONST

#if (defined COM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error COM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined COM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define COM_CONST_SAVED_RECOVERY_ZONE

#if (defined COM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error COM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined COM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define COM_INTERNAL_VAR_NO_INIT

#if (defined COM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error COM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined COM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define COM_INTERNAL_VAR_CLEARED

#if (defined COM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error COM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined COM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define COM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined COM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error COM_INTERNAL_VAR_INIT already defined
#endif /* if (defined COM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define COM_INTERNAL_VAR_INIT

#if (defined COM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error COM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined COM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define COM_INTERNAL_VAR_POWER_ON_INIT

#if (defined COM_CALIB) /* to prevent double definition */
#error COM_CALIB already defined
#endif /* if (defined COM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define COM_CALIB

#if (defined COM_APPL_DATA) /* to prevent double definition */
#error COM_APPL_DATA already defined
#endif /* if (defined COM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define COM_APPL_DATA

#if (defined COM_APPL_CONST) /* to prevent double definition */
#error COM_APPL_CONST already defined
#endif /* if (defined COM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define COM_APPL_CONST

#if (defined COM_VAR_NO_INIT) /* to prevent double definition */
#error COM_VAR_NO_INIT already defined
#endif /* if (defined COM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define COM_VAR_NO_INIT

#if (defined COM_VAR_CLEARED) /* to prevent double definition */
#error COM_VAR_CLEARED already defined
#endif /* if (defined COM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define COM_VAR_CLEARED

#if (defined COM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error COM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined COM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define COM_VAR_POWER_ON_CLEARED

#if (defined COM_VAR_INIT) /* to prevent double definition */
#error COM_VAR_INIT already defined
#endif /* if (defined COM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define COM_VAR_INIT

#if (defined COM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error COM_VAR_POWER_ON_INIT already defined
#endif /* if (defined COM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define COM_VAR_POWER_ON_INIT

#if (defined COM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error COM_VAR_FAST_NO_INIT already defined
#endif /* if (defined COM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COM_VAR_FAST_NO_INIT

#if (defined COM_VAR_FAST_CLEARED) /* to prevent double definition */
#error COM_VAR_FAST_CLEARED already defined
#endif /* if (defined COM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COM_VAR_FAST_CLEARED

#if (defined COM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error COM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined COM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COM_VAR_FAST_POWER_ON_CLEARED

#if (defined COM_VAR_FAST_INIT) /* to prevent double definition */
#error COM_VAR_FAST_INIT already defined
#endif /* if (defined COM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COM_VAR_FAST_INIT

#if (defined COM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error COM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined COM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COM_VAR_FAST_POWER_ON_INIT

#if (defined COM_VAR_SAVED_ZONE) /* to prevent double definition */
#error COM_VAR_SAVED_ZONE already defined
#endif /* if (defined COM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define COM_VAR_SAVED_ZONE

#if (defined COM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error COM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined COM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define COM_VAR_SLOW_NO_INIT

#if (defined COM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error COM_VAR_SLOW_CLEARED already defined
#endif /* if (defined COM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define COM_VAR_SLOW_CLEARED

#if (defined COM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error COM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined COM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define COM_VAR_SLOW_POWER_ON_CLEARED

#if (defined COM_VAR_SLOW_INIT) /* to prevent double definition */
#error COM_VAR_SLOW_INIT already defined
#endif /* if (defined COM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define COM_VAR_SLOW_INIT

#if (defined COM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error COM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined COM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define COM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module COMM]-------------------*/

#if (defined COMM_CODE) /* to prevent double definition */
#error COMM_CODE already defined
#endif /* if (defined COMM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define COMM_CODE

#if (defined COMM_CODE_FAST) /* to prevent double definition */
#error COMM_CODE_FAST already defined
#endif /* if (defined COMM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define COMM_CODE_FAST

#if (defined COMM_CODE_SLOW) /* to prevent double definition */
#error COMM_CODE_SLOW already defined
#endif /* if (defined COMM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define COMM_CODE_SLOW

#if (defined COMM_CONFIG_DATA) /* to prevent double definition */
#error COMM_CONFIG_DATA already defined
#endif /* if (defined COMM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define COMM_CONFIG_DATA

#if (defined COMM_CONST) /* to prevent double definition */
#error COMM_CONST already defined
#endif /* if (defined COMM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define COMM_CONST

#if (defined COMM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error COMM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined COMM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define COMM_CONST_SAVED_RECOVERY_ZONE

#if (defined COMM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error COMM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined COMM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define COMM_INTERNAL_VAR_NO_INIT

#if (defined COMM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error COMM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined COMM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define COMM_INTERNAL_VAR_CLEARED

#if (defined COMM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error COMM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined COMM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define COMM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined COMM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error COMM_INTERNAL_VAR_INIT already defined
#endif /* if (defined COMM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define COMM_INTERNAL_VAR_INIT

#if (defined COMM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error COMM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined COMM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define COMM_INTERNAL_VAR_POWER_ON_INIT

#if (defined COMM_CALIB) /* to prevent double definition */
#error COMM_CALIB already defined
#endif /* if (defined COMM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define COMM_CALIB

#if (defined COMM_APPL_DATA) /* to prevent double definition */
#error COMM_APPL_DATA already defined
#endif /* if (defined COMM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define COMM_APPL_DATA

#if (defined COMM_APPL_CONST) /* to prevent double definition */
#error COMM_APPL_CONST already defined
#endif /* if (defined COMM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define COMM_APPL_CONST

#if (defined COMM_VAR_NO_INIT) /* to prevent double definition */
#error COMM_VAR_NO_INIT already defined
#endif /* if (defined COMM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define COMM_VAR_NO_INIT

#if (defined COMM_VAR_CLEARED) /* to prevent double definition */
#error COMM_VAR_CLEARED already defined
#endif /* if (defined COMM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define COMM_VAR_CLEARED

#if (defined COMM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error COMM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined COMM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define COMM_VAR_POWER_ON_CLEARED

#if (defined COMM_VAR_INIT) /* to prevent double definition */
#error COMM_VAR_INIT already defined
#endif /* if (defined COMM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define COMM_VAR_INIT

#if (defined COMM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error COMM_VAR_POWER_ON_INIT already defined
#endif /* if (defined COMM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define COMM_VAR_POWER_ON_INIT

#if (defined COMM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error COMM_VAR_FAST_NO_INIT already defined
#endif /* if (defined COMM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COMM_VAR_FAST_NO_INIT

#if (defined COMM_VAR_FAST_CLEARED) /* to prevent double definition */
#error COMM_VAR_FAST_CLEARED already defined
#endif /* if (defined COMM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COMM_VAR_FAST_CLEARED

#if (defined COMM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error COMM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined COMM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COMM_VAR_FAST_POWER_ON_CLEARED

#if (defined COMM_VAR_FAST_INIT) /* to prevent double definition */
#error COMM_VAR_FAST_INIT already defined
#endif /* if (defined COMM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COMM_VAR_FAST_INIT

#if (defined COMM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error COMM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined COMM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define COMM_VAR_FAST_POWER_ON_INIT

#if (defined COMM_VAR_SAVED_ZONE) /* to prevent double definition */
#error COMM_VAR_SAVED_ZONE already defined
#endif /* if (defined COMM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define COMM_VAR_SAVED_ZONE

#if (defined COMM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error COMM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined COMM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define COMM_VAR_SLOW_NO_INIT

#if (defined COMM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error COMM_VAR_SLOW_CLEARED already defined
#endif /* if (defined COMM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define COMM_VAR_SLOW_CLEARED

#if (defined COMM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error COMM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined COMM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define COMM_VAR_SLOW_POWER_ON_CLEARED

#if (defined COMM_VAR_SLOW_INIT) /* to prevent double definition */
#error COMM_VAR_SLOW_INIT already defined
#endif /* if (defined COMM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define COMM_VAR_SLOW_INIT

#if (defined COMM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error COMM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined COMM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define COMM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module CRC]-------------------*/

#if (defined CRC_CODE) /* to prevent double definition */
#error CRC_CODE already defined
#endif /* if (defined CRC_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CRC_CODE

#if (defined CRC_CODE_FAST) /* to prevent double definition */
#error CRC_CODE_FAST already defined
#endif /* if (defined CRC_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define CRC_CODE_FAST

#if (defined CRC_CODE_SLOW) /* to prevent double definition */
#error CRC_CODE_SLOW already defined
#endif /* if (defined CRC_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define CRC_CODE_SLOW

#if (defined CRC_CONFIG_DATA) /* to prevent double definition */
#error CRC_CONFIG_DATA already defined
#endif /* if (defined CRC_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define CRC_CONFIG_DATA

#if (defined CRC_CONST) /* to prevent double definition */
#error CRC_CONST already defined
#endif /* if (defined CRC_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CRC_CONST

#if (defined CRC_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error CRC_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined CRC_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define CRC_CONST_SAVED_RECOVERY_ZONE

#if (defined CRC_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error CRC_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined CRC_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define CRC_INTERNAL_VAR_NO_INIT

#if (defined CRC_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error CRC_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined CRC_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define CRC_INTERNAL_VAR_CLEARED

#if (defined CRC_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CRC_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CRC_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define CRC_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined CRC_INTERNAL_VAR_INIT) /* to prevent double definition */
#error CRC_INTERNAL_VAR_INIT already defined
#endif /* if (defined CRC_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define CRC_INTERNAL_VAR_INIT

#if (defined CRC_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CRC_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CRC_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define CRC_INTERNAL_VAR_POWER_ON_INIT

#if (defined CRC_CALIB) /* to prevent double definition */
#error CRC_CALIB already defined
#endif /* if (defined CRC_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define CRC_CALIB

#if (defined CRC_APPL_DATA) /* to prevent double definition */
#error CRC_APPL_DATA already defined
#endif /* if (defined CRC_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CRC_APPL_DATA

#if (defined CRC_APPL_CONST) /* to prevent double definition */
#error CRC_APPL_CONST already defined
#endif /* if (defined CRC_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CRC_APPL_CONST

#if (defined CRC_VAR_NO_INIT) /* to prevent double definition */
#error CRC_VAR_NO_INIT already defined
#endif /* if (defined CRC_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define CRC_VAR_NO_INIT

#if (defined CRC_VAR_CLEARED) /* to prevent double definition */
#error CRC_VAR_CLEARED already defined
#endif /* if (defined CRC_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define CRC_VAR_CLEARED

#if (defined CRC_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error CRC_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined CRC_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define CRC_VAR_POWER_ON_CLEARED

#if (defined CRC_VAR_INIT) /* to prevent double definition */
#error CRC_VAR_INIT already defined
#endif /* if (defined CRC_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define CRC_VAR_INIT

#if (defined CRC_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CRC_VAR_POWER_ON_INIT already defined
#endif /* if (defined CRC_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define CRC_VAR_POWER_ON_INIT

#if (defined CRC_VAR_FAST_NO_INIT) /* to prevent double definition */
#error CRC_VAR_FAST_NO_INIT already defined
#endif /* if (defined CRC_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRC_VAR_FAST_NO_INIT

#if (defined CRC_VAR_FAST_CLEARED) /* to prevent double definition */
#error CRC_VAR_FAST_CLEARED already defined
#endif /* if (defined CRC_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRC_VAR_FAST_CLEARED

#if (defined CRC_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error CRC_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined CRC_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRC_VAR_FAST_POWER_ON_CLEARED

#if (defined CRC_VAR_FAST_INIT) /* to prevent double definition */
#error CRC_VAR_FAST_INIT already defined
#endif /* if (defined CRC_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRC_VAR_FAST_INIT

#if (defined CRC_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error CRC_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined CRC_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define CRC_VAR_FAST_POWER_ON_INIT

#if (defined CRC_VAR_SAVED_ZONE) /* to prevent double definition */
#error CRC_VAR_SAVED_ZONE already defined
#endif /* if (defined CRC_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define CRC_VAR_SAVED_ZONE

#if (defined CRC_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error CRC_VAR_SLOW_NO_INIT already defined
#endif /* if (defined CRC_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define CRC_VAR_SLOW_NO_INIT

#if (defined CRC_VAR_SLOW_CLEARED) /* to prevent double definition */
#error CRC_VAR_SLOW_CLEARED already defined
#endif /* if (defined CRC_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define CRC_VAR_SLOW_CLEARED

#if (defined CRC_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error CRC_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined CRC_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define CRC_VAR_SLOW_POWER_ON_CLEARED

#if (defined CRC_VAR_SLOW_INIT) /* to prevent double definition */
#error CRC_VAR_SLOW_INIT already defined
#endif /* if (defined CRC_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define CRC_VAR_SLOW_INIT

#if (defined CRC_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error CRC_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined CRC_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define CRC_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module DCM]-------------------*/

#if (defined DCM_CODE) /* to prevent double definition */
#error DCM_CODE already defined
#endif /* if (defined DCM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define DCM_CODE

#if (defined DCM_CODE_FAST) /* to prevent double definition */
#error DCM_CODE_FAST already defined
#endif /* if (defined DCM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define DCM_CODE_FAST

#if (defined DCM_CODE_SLOW) /* to prevent double definition */
#error DCM_CODE_SLOW already defined
#endif /* if (defined DCM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define DCM_CODE_SLOW

#if (defined DCM_CONFIG_DATA) /* to prevent double definition */
#error DCM_CONFIG_DATA already defined
#endif /* if (defined DCM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define DCM_CONFIG_DATA

#if (defined DCM_CONST) /* to prevent double definition */
#error DCM_CONST already defined
#endif /* if (defined DCM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define DCM_CONST

#if (defined DCM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error DCM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined DCM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define DCM_CONST_SAVED_RECOVERY_ZONE

#if (defined DCM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error DCM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined DCM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define DCM_INTERNAL_VAR_NO_INIT

#if (defined DCM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error DCM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined DCM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define DCM_INTERNAL_VAR_CLEARED

#if (defined DCM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DCM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DCM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define DCM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined DCM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error DCM_INTERNAL_VAR_INIT already defined
#endif /* if (defined DCM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define DCM_INTERNAL_VAR_INIT

#if (defined DCM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DCM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined DCM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define DCM_INTERNAL_VAR_POWER_ON_INIT

#if (defined DCM_CALIB) /* to prevent double definition */
#error DCM_CALIB already defined
#endif /* if (defined DCM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define DCM_CALIB

#if (defined DCM_APPL_DATA) /* to prevent double definition */
#error DCM_APPL_DATA already defined
#endif /* if (defined DCM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define DCM_APPL_DATA

#if (defined DCM_APPL_CONST) /* to prevent double definition */
#error DCM_APPL_CONST already defined
#endif /* if (defined DCM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define DCM_APPL_CONST

#if (defined DCM_VAR_NO_INIT) /* to prevent double definition */
#error DCM_VAR_NO_INIT already defined
#endif /* if (defined DCM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define DCM_VAR_NO_INIT

#if (defined DCM_VAR_CLEARED) /* to prevent double definition */
#error DCM_VAR_CLEARED already defined
#endif /* if (defined DCM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define DCM_VAR_CLEARED

#if (defined DCM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error DCM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined DCM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define DCM_VAR_POWER_ON_CLEARED

#if (defined DCM_VAR_INIT) /* to prevent double definition */
#error DCM_VAR_INIT already defined
#endif /* if (defined DCM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define DCM_VAR_INIT

#if (defined DCM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error DCM_VAR_POWER_ON_INIT already defined
#endif /* if (defined DCM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define DCM_VAR_POWER_ON_INIT

#if (defined DCM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error DCM_VAR_FAST_NO_INIT already defined
#endif /* if (defined DCM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DCM_VAR_FAST_NO_INIT

#if (defined DCM_VAR_FAST_CLEARED) /* to prevent double definition */
#error DCM_VAR_FAST_CLEARED already defined
#endif /* if (defined DCM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DCM_VAR_FAST_CLEARED

#if (defined DCM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error DCM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined DCM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DCM_VAR_FAST_POWER_ON_CLEARED

#if (defined DCM_VAR_FAST_INIT) /* to prevent double definition */
#error DCM_VAR_FAST_INIT already defined
#endif /* if (defined DCM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DCM_VAR_FAST_INIT

#if (defined DCM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error DCM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined DCM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define DCM_VAR_FAST_POWER_ON_INIT

#if (defined DCM_VAR_SAVED_ZONE) /* to prevent double definition */
#error DCM_VAR_SAVED_ZONE already defined
#endif /* if (defined DCM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define DCM_VAR_SAVED_ZONE

#if (defined DCM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error DCM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined DCM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define DCM_VAR_SLOW_NO_INIT

#if (defined DCM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error DCM_VAR_SLOW_CLEARED already defined
#endif /* if (defined DCM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define DCM_VAR_SLOW_CLEARED

#if (defined DCM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error DCM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined DCM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define DCM_VAR_SLOW_POWER_ON_CLEARED

#if (defined DCM_VAR_SLOW_INIT) /* to prevent double definition */
#error DCM_VAR_SLOW_INIT already defined
#endif /* if (defined DCM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define DCM_VAR_SLOW_INIT

#if (defined DCM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error DCM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined DCM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define DCM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module EA]-------------------*/

#if (defined EA_CODE) /* to prevent double definition */
#error EA_CODE already defined
#endif /* if (defined EA_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define EA_CODE

#if (defined EA_CODE_FAST) /* to prevent double definition */
#error EA_CODE_FAST already defined
#endif /* if (defined EA_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define EA_CODE_FAST

#if (defined EA_CODE_SLOW) /* to prevent double definition */
#error EA_CODE_SLOW already defined
#endif /* if (defined EA_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define EA_CODE_SLOW

#if (defined EA_CONFIG_DATA) /* to prevent double definition */
#error EA_CONFIG_DATA already defined
#endif /* if (defined EA_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define EA_CONFIG_DATA

#if (defined EA_CONST) /* to prevent double definition */
#error EA_CONST already defined
#endif /* if (defined EA_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define EA_CONST

#if (defined EA_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error EA_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined EA_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define EA_CONST_SAVED_RECOVERY_ZONE

#if (defined EA_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error EA_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined EA_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define EA_INTERNAL_VAR_NO_INIT

#if (defined EA_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error EA_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined EA_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define EA_INTERNAL_VAR_CLEARED

#if (defined EA_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error EA_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined EA_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define EA_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined EA_INTERNAL_VAR_INIT) /* to prevent double definition */
#error EA_INTERNAL_VAR_INIT already defined
#endif /* if (defined EA_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define EA_INTERNAL_VAR_INIT

#if (defined EA_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error EA_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined EA_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define EA_INTERNAL_VAR_POWER_ON_INIT

#if (defined EA_CALIB) /* to prevent double definition */
#error EA_CALIB already defined
#endif /* if (defined EA_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define EA_CALIB

#if (defined EA_APPL_DATA) /* to prevent double definition */
#error EA_APPL_DATA already defined
#endif /* if (defined EA_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define EA_APPL_DATA

#if (defined EA_APPL_CONST) /* to prevent double definition */
#error EA_APPL_CONST already defined
#endif /* if (defined EA_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define EA_APPL_CONST

#if (defined EA_VAR_NO_INIT) /* to prevent double definition */
#error EA_VAR_NO_INIT already defined
#endif /* if (defined EA_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define EA_VAR_NO_INIT

#if (defined EA_VAR_CLEARED) /* to prevent double definition */
#error EA_VAR_CLEARED already defined
#endif /* if (defined EA_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define EA_VAR_CLEARED

#if (defined EA_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error EA_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined EA_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define EA_VAR_POWER_ON_CLEARED

#if (defined EA_VAR_INIT) /* to prevent double definition */
#error EA_VAR_INIT already defined
#endif /* if (defined EA_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define EA_VAR_INIT

#if (defined EA_VAR_POWER_ON_INIT) /* to prevent double definition */
#error EA_VAR_POWER_ON_INIT already defined
#endif /* if (defined EA_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define EA_VAR_POWER_ON_INIT

#if (defined EA_VAR_FAST_NO_INIT) /* to prevent double definition */
#error EA_VAR_FAST_NO_INIT already defined
#endif /* if (defined EA_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EA_VAR_FAST_NO_INIT

#if (defined EA_VAR_FAST_CLEARED) /* to prevent double definition */
#error EA_VAR_FAST_CLEARED already defined
#endif /* if (defined EA_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EA_VAR_FAST_CLEARED

#if (defined EA_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error EA_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined EA_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EA_VAR_FAST_POWER_ON_CLEARED

#if (defined EA_VAR_FAST_INIT) /* to prevent double definition */
#error EA_VAR_FAST_INIT already defined
#endif /* if (defined EA_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EA_VAR_FAST_INIT

#if (defined EA_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error EA_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined EA_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EA_VAR_FAST_POWER_ON_INIT

#if (defined EA_VAR_SAVED_ZONE) /* to prevent double definition */
#error EA_VAR_SAVED_ZONE already defined
#endif /* if (defined EA_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define EA_VAR_SAVED_ZONE

#if (defined EA_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error EA_VAR_SLOW_NO_INIT already defined
#endif /* if (defined EA_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define EA_VAR_SLOW_NO_INIT

#if (defined EA_VAR_SLOW_CLEARED) /* to prevent double definition */
#error EA_VAR_SLOW_CLEARED already defined
#endif /* if (defined EA_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define EA_VAR_SLOW_CLEARED

#if (defined EA_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error EA_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined EA_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define EA_VAR_SLOW_POWER_ON_CLEARED

#if (defined EA_VAR_SLOW_INIT) /* to prevent double definition */
#error EA_VAR_SLOW_INIT already defined
#endif /* if (defined EA_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define EA_VAR_SLOW_INIT

#if (defined EA_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error EA_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined EA_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define EA_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module ECUM]-------------------*/

#if (defined ECUM_CODE) /* to prevent double definition */
#error ECUM_CODE already defined
#endif /* if (defined ECUM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define ECUM_CODE

#if (defined ECUM_CODE_FAST) /* to prevent double definition */
#error ECUM_CODE_FAST already defined
#endif /* if (defined ECUM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define ECUM_CODE_FAST

#if (defined ECUM_CODE_SLOW) /* to prevent double definition */
#error ECUM_CODE_SLOW already defined
#endif /* if (defined ECUM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define ECUM_CODE_SLOW

#if (defined ECUM_CONFIG_DATA) /* to prevent double definition */
#error ECUM_CONFIG_DATA already defined
#endif /* if (defined ECUM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define ECUM_CONFIG_DATA

#if (defined ECUM_CONST) /* to prevent double definition */
#error ECUM_CONST already defined
#endif /* if (defined ECUM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define ECUM_CONST

#if (defined ECUM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error ECUM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined ECUM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define ECUM_CONST_SAVED_RECOVERY_ZONE

#if (defined ECUM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error ECUM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined ECUM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define ECUM_INTERNAL_VAR_NO_INIT

#if (defined ECUM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error ECUM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined ECUM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define ECUM_INTERNAL_VAR_CLEARED

#if (defined ECUM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ECUM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ECUM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define ECUM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined ECUM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error ECUM_INTERNAL_VAR_INIT already defined
#endif /* if (defined ECUM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define ECUM_INTERNAL_VAR_INIT

#if (defined ECUM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ECUM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined ECUM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define ECUM_INTERNAL_VAR_POWER_ON_INIT

#if (defined ECUM_CALIB) /* to prevent double definition */
#error ECUM_CALIB already defined
#endif /* if (defined ECUM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define ECUM_CALIB

#if (defined ECUM_APPL_DATA) /* to prevent double definition */
#error ECUM_APPL_DATA already defined
#endif /* if (defined ECUM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define ECUM_APPL_DATA

#if (defined ECUM_APPL_CONST) /* to prevent double definition */
#error ECUM_APPL_CONST already defined
#endif /* if (defined ECUM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define ECUM_APPL_CONST

#if (defined ECUM_VAR_NO_INIT) /* to prevent double definition */
#error ECUM_VAR_NO_INIT already defined
#endif /* if (defined ECUM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define ECUM_VAR_NO_INIT

#if (defined ECUM_VAR_CLEARED) /* to prevent double definition */
#error ECUM_VAR_CLEARED already defined
#endif /* if (defined ECUM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define ECUM_VAR_CLEARED

#if (defined ECUM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error ECUM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined ECUM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define ECUM_VAR_POWER_ON_CLEARED

#if (defined ECUM_VAR_INIT) /* to prevent double definition */
#error ECUM_VAR_INIT already defined
#endif /* if (defined ECUM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define ECUM_VAR_INIT

#if (defined ECUM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error ECUM_VAR_POWER_ON_INIT already defined
#endif /* if (defined ECUM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define ECUM_VAR_POWER_ON_INIT

#if (defined ECUM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error ECUM_VAR_FAST_NO_INIT already defined
#endif /* if (defined ECUM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ECUM_VAR_FAST_NO_INIT

#if (defined ECUM_VAR_FAST_CLEARED) /* to prevent double definition */
#error ECUM_VAR_FAST_CLEARED already defined
#endif /* if (defined ECUM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ECUM_VAR_FAST_CLEARED

#if (defined ECUM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error ECUM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined ECUM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ECUM_VAR_FAST_POWER_ON_CLEARED

#if (defined ECUM_VAR_FAST_INIT) /* to prevent double definition */
#error ECUM_VAR_FAST_INIT already defined
#endif /* if (defined ECUM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ECUM_VAR_FAST_INIT

#if (defined ECUM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error ECUM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined ECUM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define ECUM_VAR_FAST_POWER_ON_INIT

#if (defined ECUM_VAR_SAVED_ZONE) /* to prevent double definition */
#error ECUM_VAR_SAVED_ZONE already defined
#endif /* if (defined ECUM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define ECUM_VAR_SAVED_ZONE

#if (defined ECUM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error ECUM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined ECUM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define ECUM_VAR_SLOW_NO_INIT

#if (defined ECUM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error ECUM_VAR_SLOW_CLEARED already defined
#endif /* if (defined ECUM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define ECUM_VAR_SLOW_CLEARED

#if (defined ECUM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error ECUM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined ECUM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define ECUM_VAR_SLOW_POWER_ON_CLEARED

#if (defined ECUM_VAR_SLOW_INIT) /* to prevent double definition */
#error ECUM_VAR_SLOW_INIT already defined
#endif /* if (defined ECUM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define ECUM_VAR_SLOW_INIT

#if (defined ECUM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error ECUM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined ECUM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define ECUM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module EEP]-------------------*/

#if (defined EEP_CODE) /* to prevent double definition */
#error EEP_CODE already defined
#endif /* if (defined EEP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define EEP_CODE

#if (defined EEP_CODE_FAST) /* to prevent double definition */
#error EEP_CODE_FAST already defined
#endif /* if (defined EEP_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define EEP_CODE_FAST

#if (defined EEP_CODE_SLOW) /* to prevent double definition */
#error EEP_CODE_SLOW already defined
#endif /* if (defined EEP_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define EEP_CODE_SLOW

#if (defined EEP_CONFIG_DATA) /* to prevent double definition */
#error EEP_CONFIG_DATA already defined
#endif /* if (defined EEP_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define EEP_CONFIG_DATA

#if (defined EEP_CONST) /* to prevent double definition */
#error EEP_CONST already defined
#endif /* if (defined EEP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define EEP_CONST

#if (defined EEP_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error EEP_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined EEP_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define EEP_CONST_SAVED_RECOVERY_ZONE

#if (defined EEP_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error EEP_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined EEP_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define EEP_INTERNAL_VAR_NO_INIT

#if (defined EEP_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error EEP_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined EEP_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define EEP_INTERNAL_VAR_CLEARED

#if (defined EEP_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error EEP_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined EEP_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define EEP_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined EEP_INTERNAL_VAR_INIT) /* to prevent double definition */
#error EEP_INTERNAL_VAR_INIT already defined
#endif /* if (defined EEP_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define EEP_INTERNAL_VAR_INIT

#if (defined EEP_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error EEP_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined EEP_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define EEP_INTERNAL_VAR_POWER_ON_INIT

#if (defined EEP_CALIB) /* to prevent double definition */
#error EEP_CALIB already defined
#endif /* if (defined EEP_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define EEP_CALIB

#if (defined EEP_APPL_DATA) /* to prevent double definition */
#error EEP_APPL_DATA already defined
#endif /* if (defined EEP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define EEP_APPL_DATA

#if (defined EEP_APPL_CONST) /* to prevent double definition */
#error EEP_APPL_CONST already defined
#endif /* if (defined EEP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define EEP_APPL_CONST

#if (defined EEP_VAR_NO_INIT) /* to prevent double definition */
#error EEP_VAR_NO_INIT already defined
#endif /* if (defined EEP_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define EEP_VAR_NO_INIT

#if (defined EEP_VAR_CLEARED) /* to prevent double definition */
#error EEP_VAR_CLEARED already defined
#endif /* if (defined EEP_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define EEP_VAR_CLEARED

#if (defined EEP_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error EEP_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined EEP_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define EEP_VAR_POWER_ON_CLEARED

#if (defined EEP_VAR_INIT) /* to prevent double definition */
#error EEP_VAR_INIT already defined
#endif /* if (defined EEP_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define EEP_VAR_INIT

#if (defined EEP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error EEP_VAR_POWER_ON_INIT already defined
#endif /* if (defined EEP_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define EEP_VAR_POWER_ON_INIT

#if (defined EEP_VAR_FAST_NO_INIT) /* to prevent double definition */
#error EEP_VAR_FAST_NO_INIT already defined
#endif /* if (defined EEP_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EEP_VAR_FAST_NO_INIT

#if (defined EEP_VAR_FAST_CLEARED) /* to prevent double definition */
#error EEP_VAR_FAST_CLEARED already defined
#endif /* if (defined EEP_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EEP_VAR_FAST_CLEARED

#if (defined EEP_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error EEP_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined EEP_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EEP_VAR_FAST_POWER_ON_CLEARED

#if (defined EEP_VAR_FAST_INIT) /* to prevent double definition */
#error EEP_VAR_FAST_INIT already defined
#endif /* if (defined EEP_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EEP_VAR_FAST_INIT

#if (defined EEP_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error EEP_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined EEP_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define EEP_VAR_FAST_POWER_ON_INIT

#if (defined EEP_VAR_SAVED_ZONE) /* to prevent double definition */
#error EEP_VAR_SAVED_ZONE already defined
#endif /* if (defined EEP_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define EEP_VAR_SAVED_ZONE

#if (defined EEP_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error EEP_VAR_SLOW_NO_INIT already defined
#endif /* if (defined EEP_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define EEP_VAR_SLOW_NO_INIT

#if (defined EEP_VAR_SLOW_CLEARED) /* to prevent double definition */
#error EEP_VAR_SLOW_CLEARED already defined
#endif /* if (defined EEP_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define EEP_VAR_SLOW_CLEARED

#if (defined EEP_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error EEP_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined EEP_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define EEP_VAR_SLOW_POWER_ON_CLEARED

#if (defined EEP_VAR_SLOW_INIT) /* to prevent double definition */
#error EEP_VAR_SLOW_INIT already defined
#endif /* if (defined EEP_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define EEP_VAR_SLOW_INIT

#if (defined EEP_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error EEP_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined EEP_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define EEP_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FIM]-------------------*/

#if (defined FIM_CODE) /* to prevent double definition */
#error FIM_CODE already defined
#endif /* if (defined FIM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FIM_CODE

#if (defined FIM_CODE_FAST) /* to prevent double definition */
#error FIM_CODE_FAST already defined
#endif /* if (defined FIM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FIM_CODE_FAST

#if (defined FIM_CODE_SLOW) /* to prevent double definition */
#error FIM_CODE_SLOW already defined
#endif /* if (defined FIM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FIM_CODE_SLOW

#if (defined FIM_CONFIG_DATA) /* to prevent double definition */
#error FIM_CONFIG_DATA already defined
#endif /* if (defined FIM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FIM_CONFIG_DATA

#if (defined FIM_CONST) /* to prevent double definition */
#error FIM_CONST already defined
#endif /* if (defined FIM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FIM_CONST

#if (defined FIM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FIM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FIM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FIM_CONST_SAVED_RECOVERY_ZONE

#if (defined FIM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FIM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FIM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FIM_INTERNAL_VAR_NO_INIT

#if (defined FIM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FIM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FIM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FIM_INTERNAL_VAR_CLEARED

#if (defined FIM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FIM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FIM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FIM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FIM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FIM_INTERNAL_VAR_INIT already defined
#endif /* if (defined FIM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FIM_INTERNAL_VAR_INIT

#if (defined FIM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FIM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FIM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FIM_INTERNAL_VAR_POWER_ON_INIT

#if (defined FIM_CALIB) /* to prevent double definition */
#error FIM_CALIB already defined
#endif /* if (defined FIM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FIM_CALIB

#if (defined FIM_APPL_DATA) /* to prevent double definition */
#error FIM_APPL_DATA already defined
#endif /* if (defined FIM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FIM_APPL_DATA

#if (defined FIM_APPL_CONST) /* to prevent double definition */
#error FIM_APPL_CONST already defined
#endif /* if (defined FIM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FIM_APPL_CONST

#if (defined FIM_VAR_NO_INIT) /* to prevent double definition */
#error FIM_VAR_NO_INIT already defined
#endif /* if (defined FIM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FIM_VAR_NO_INIT

#if (defined FIM_VAR_CLEARED) /* to prevent double definition */
#error FIM_VAR_CLEARED already defined
#endif /* if (defined FIM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FIM_VAR_CLEARED

#if (defined FIM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FIM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FIM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FIM_VAR_POWER_ON_CLEARED

#if (defined FIM_VAR_INIT) /* to prevent double definition */
#error FIM_VAR_INIT already defined
#endif /* if (defined FIM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FIM_VAR_INIT

#if (defined FIM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FIM_VAR_POWER_ON_INIT already defined
#endif /* if (defined FIM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FIM_VAR_POWER_ON_INIT

#if (defined FIM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FIM_VAR_FAST_NO_INIT already defined
#endif /* if (defined FIM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FIM_VAR_FAST_NO_INIT

#if (defined FIM_VAR_FAST_CLEARED) /* to prevent double definition */
#error FIM_VAR_FAST_CLEARED already defined
#endif /* if (defined FIM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FIM_VAR_FAST_CLEARED

#if (defined FIM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FIM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FIM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FIM_VAR_FAST_POWER_ON_CLEARED

#if (defined FIM_VAR_FAST_INIT) /* to prevent double definition */
#error FIM_VAR_FAST_INIT already defined
#endif /* if (defined FIM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FIM_VAR_FAST_INIT

#if (defined FIM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FIM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FIM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FIM_VAR_FAST_POWER_ON_INIT

#if (defined FIM_VAR_SAVED_ZONE) /* to prevent double definition */
#error FIM_VAR_SAVED_ZONE already defined
#endif /* if (defined FIM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FIM_VAR_SAVED_ZONE

#if (defined FIM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FIM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FIM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FIM_VAR_SLOW_NO_INIT

#if (defined FIM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FIM_VAR_SLOW_CLEARED already defined
#endif /* if (defined FIM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FIM_VAR_SLOW_CLEARED

#if (defined FIM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FIM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FIM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FIM_VAR_SLOW_POWER_ON_CLEARED

#if (defined FIM_VAR_SLOW_INIT) /* to prevent double definition */
#error FIM_VAR_SLOW_INIT already defined
#endif /* if (defined FIM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FIM_VAR_SLOW_INIT

#if (defined FIM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FIM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FIM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FIM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FR]-------------------*/

#if (defined FR_CODE) /* to prevent double definition */
#error FR_CODE already defined
#endif /* if (defined FR_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FR_CODE

#if (defined FR_CODE_FAST) /* to prevent double definition */
#error FR_CODE_FAST already defined
#endif /* if (defined FR_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FR_CODE_FAST

#if (defined FR_CODE_SLOW) /* to prevent double definition */
#error FR_CODE_SLOW already defined
#endif /* if (defined FR_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FR_CODE_SLOW

#if (defined FR_CONFIG_DATA) /* to prevent double definition */
#error FR_CONFIG_DATA already defined
#endif /* if (defined FR_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FR_CONFIG_DATA

#if (defined FR_CONST) /* to prevent double definition */
#error FR_CONST already defined
#endif /* if (defined FR_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FR_CONST

#if (defined FR_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FR_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FR_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FR_CONST_SAVED_RECOVERY_ZONE

#if (defined FR_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FR_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FR_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FR_INTERNAL_VAR_NO_INIT

#if (defined FR_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FR_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FR_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FR_INTERNAL_VAR_CLEARED

#if (defined FR_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FR_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FR_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FR_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FR_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FR_INTERNAL_VAR_INIT already defined
#endif /* if (defined FR_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FR_INTERNAL_VAR_INIT

#if (defined FR_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FR_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FR_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FR_INTERNAL_VAR_POWER_ON_INIT

#if (defined FR_CALIB) /* to prevent double definition */
#error FR_CALIB already defined
#endif /* if (defined FR_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FR_CALIB

#if (defined FR_APPL_DATA) /* to prevent double definition */
#error FR_APPL_DATA already defined
#endif /* if (defined FR_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FR_APPL_DATA

#if (defined FR_APPL_CONST) /* to prevent double definition */
#error FR_APPL_CONST already defined
#endif /* if (defined FR_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FR_APPL_CONST

#if (defined FR_VAR_NO_INIT) /* to prevent double definition */
#error FR_VAR_NO_INIT already defined
#endif /* if (defined FR_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FR_VAR_NO_INIT

#if (defined FR_VAR_CLEARED) /* to prevent double definition */
#error FR_VAR_CLEARED already defined
#endif /* if (defined FR_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FR_VAR_CLEARED

#if (defined FR_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FR_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FR_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FR_VAR_POWER_ON_CLEARED

#if (defined FR_VAR_INIT) /* to prevent double definition */
#error FR_VAR_INIT already defined
#endif /* if (defined FR_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FR_VAR_INIT

#if (defined FR_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FR_VAR_POWER_ON_INIT already defined
#endif /* if (defined FR_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FR_VAR_POWER_ON_INIT

#if (defined FR_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FR_VAR_FAST_NO_INIT already defined
#endif /* if (defined FR_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FR_VAR_FAST_NO_INIT

#if (defined FR_VAR_FAST_CLEARED) /* to prevent double definition */
#error FR_VAR_FAST_CLEARED already defined
#endif /* if (defined FR_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FR_VAR_FAST_CLEARED

#if (defined FR_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FR_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FR_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FR_VAR_FAST_POWER_ON_CLEARED

#if (defined FR_VAR_FAST_INIT) /* to prevent double definition */
#error FR_VAR_FAST_INIT already defined
#endif /* if (defined FR_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FR_VAR_FAST_INIT

#if (defined FR_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FR_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FR_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FR_VAR_FAST_POWER_ON_INIT

#if (defined FR_VAR_SAVED_ZONE) /* to prevent double definition */
#error FR_VAR_SAVED_ZONE already defined
#endif /* if (defined FR_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FR_VAR_SAVED_ZONE

#if (defined FR_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FR_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FR_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FR_VAR_SLOW_NO_INIT

#if (defined FR_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FR_VAR_SLOW_CLEARED already defined
#endif /* if (defined FR_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FR_VAR_SLOW_CLEARED

#if (defined FR_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FR_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FR_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FR_VAR_SLOW_POWER_ON_CLEARED

#if (defined FR_VAR_SLOW_INIT) /* to prevent double definition */
#error FR_VAR_SLOW_INIT already defined
#endif /* if (defined FR_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FR_VAR_SLOW_INIT

#if (defined FR_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FR_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FR_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FR_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FRIF]-------------------*/

#if (defined FRIF_CODE) /* to prevent double definition */
#error FRIF_CODE already defined
#endif /* if (defined FRIF_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FRIF_CODE

#if (defined FRIF_CODE_FAST) /* to prevent double definition */
#error FRIF_CODE_FAST already defined
#endif /* if (defined FRIF_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FRIF_CODE_FAST

#if (defined FRIF_CODE_SLOW) /* to prevent double definition */
#error FRIF_CODE_SLOW already defined
#endif /* if (defined FRIF_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FRIF_CODE_SLOW

#if (defined FRIF_CONFIG_DATA) /* to prevent double definition */
#error FRIF_CONFIG_DATA already defined
#endif /* if (defined FRIF_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FRIF_CONFIG_DATA

#if (defined FRIF_CONST) /* to prevent double definition */
#error FRIF_CONST already defined
#endif /* if (defined FRIF_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FRIF_CONST

#if (defined FRIF_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FRIF_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FRIF_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FRIF_CONST_SAVED_RECOVERY_ZONE

#if (defined FRIF_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FRIF_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FRIF_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FRIF_INTERNAL_VAR_NO_INIT

#if (defined FRIF_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FRIF_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FRIF_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FRIF_INTERNAL_VAR_CLEARED

#if (defined FRIF_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRIF_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRIF_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FRIF_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FRIF_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FRIF_INTERNAL_VAR_INIT already defined
#endif /* if (defined FRIF_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FRIF_INTERNAL_VAR_INIT

#if (defined FRIF_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRIF_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRIF_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FRIF_INTERNAL_VAR_POWER_ON_INIT

#if (defined FRIF_CALIB) /* to prevent double definition */
#error FRIF_CALIB already defined
#endif /* if (defined FRIF_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FRIF_CALIB

#if (defined FRIF_APPL_DATA) /* to prevent double definition */
#error FRIF_APPL_DATA already defined
#endif /* if (defined FRIF_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FRIF_APPL_DATA

#if (defined FRIF_APPL_CONST) /* to prevent double definition */
#error FRIF_APPL_CONST already defined
#endif /* if (defined FRIF_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FRIF_APPL_CONST

#if (defined FRIF_VAR_NO_INIT) /* to prevent double definition */
#error FRIF_VAR_NO_INIT already defined
#endif /* if (defined FRIF_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FRIF_VAR_NO_INIT

#if (defined FRIF_VAR_CLEARED) /* to prevent double definition */
#error FRIF_VAR_CLEARED already defined
#endif /* if (defined FRIF_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FRIF_VAR_CLEARED

#if (defined FRIF_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRIF_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRIF_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FRIF_VAR_POWER_ON_CLEARED

#if (defined FRIF_VAR_INIT) /* to prevent double definition */
#error FRIF_VAR_INIT already defined
#endif /* if (defined FRIF_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FRIF_VAR_INIT

#if (defined FRIF_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRIF_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRIF_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FRIF_VAR_POWER_ON_INIT

#if (defined FRIF_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FRIF_VAR_FAST_NO_INIT already defined
#endif /* if (defined FRIF_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRIF_VAR_FAST_NO_INIT

#if (defined FRIF_VAR_FAST_CLEARED) /* to prevent double definition */
#error FRIF_VAR_FAST_CLEARED already defined
#endif /* if (defined FRIF_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRIF_VAR_FAST_CLEARED

#if (defined FRIF_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FRIF_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FRIF_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRIF_VAR_FAST_POWER_ON_CLEARED

#if (defined FRIF_VAR_FAST_INIT) /* to prevent double definition */
#error FRIF_VAR_FAST_INIT already defined
#endif /* if (defined FRIF_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRIF_VAR_FAST_INIT

#if (defined FRIF_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FRIF_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FRIF_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRIF_VAR_FAST_POWER_ON_INIT

#if (defined FRIF_VAR_SAVED_ZONE) /* to prevent double definition */
#error FRIF_VAR_SAVED_ZONE already defined
#endif /* if (defined FRIF_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FRIF_VAR_SAVED_ZONE

#if (defined FRIF_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FRIF_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FRIF_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FRIF_VAR_SLOW_NO_INIT

#if (defined FRIF_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FRIF_VAR_SLOW_CLEARED already defined
#endif /* if (defined FRIF_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FRIF_VAR_SLOW_CLEARED

#if (defined FRIF_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FRIF_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FRIF_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FRIF_VAR_SLOW_POWER_ON_CLEARED

#if (defined FRIF_VAR_SLOW_INIT) /* to prevent double definition */
#error FRIF_VAR_SLOW_INIT already defined
#endif /* if (defined FRIF_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FRIF_VAR_SLOW_INIT

#if (defined FRIF_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FRIF_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FRIF_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FRIF_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FRNM]-------------------*/

#if (defined FRNM_CODE) /* to prevent double definition */
#error FRNM_CODE already defined
#endif /* if (defined FRNM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FRNM_CODE

#if (defined FRNM_CODE_FAST) /* to prevent double definition */
#error FRNM_CODE_FAST already defined
#endif /* if (defined FRNM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FRNM_CODE_FAST

#if (defined FRNM_CODE_SLOW) /* to prevent double definition */
#error FRNM_CODE_SLOW already defined
#endif /* if (defined FRNM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FRNM_CODE_SLOW

#if (defined FRNM_CONFIG_DATA) /* to prevent double definition */
#error FRNM_CONFIG_DATA already defined
#endif /* if (defined FRNM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FRNM_CONFIG_DATA

#if (defined FRNM_CONST) /* to prevent double definition */
#error FRNM_CONST already defined
#endif /* if (defined FRNM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FRNM_CONST

#if (defined FRNM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FRNM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FRNM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FRNM_CONST_SAVED_RECOVERY_ZONE

#if (defined FRNM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FRNM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FRNM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FRNM_INTERNAL_VAR_NO_INIT

#if (defined FRNM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FRNM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FRNM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FRNM_INTERNAL_VAR_CLEARED

#if (defined FRNM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRNM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRNM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FRNM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FRNM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FRNM_INTERNAL_VAR_INIT already defined
#endif /* if (defined FRNM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FRNM_INTERNAL_VAR_INIT

#if (defined FRNM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRNM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRNM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FRNM_INTERNAL_VAR_POWER_ON_INIT

#if (defined FRNM_CALIB) /* to prevent double definition */
#error FRNM_CALIB already defined
#endif /* if (defined FRNM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FRNM_CALIB

#if (defined FRNM_APPL_DATA) /* to prevent double definition */
#error FRNM_APPL_DATA already defined
#endif /* if (defined FRNM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FRNM_APPL_DATA

#if (defined FRNM_APPL_CONST) /* to prevent double definition */
#error FRNM_APPL_CONST already defined
#endif /* if (defined FRNM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FRNM_APPL_CONST

#if (defined FRNM_VAR_NO_INIT) /* to prevent double definition */
#error FRNM_VAR_NO_INIT already defined
#endif /* if (defined FRNM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FRNM_VAR_NO_INIT

#if (defined FRNM_VAR_CLEARED) /* to prevent double definition */
#error FRNM_VAR_CLEARED already defined
#endif /* if (defined FRNM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FRNM_VAR_CLEARED

#if (defined FRNM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRNM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRNM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FRNM_VAR_POWER_ON_CLEARED

#if (defined FRNM_VAR_INIT) /* to prevent double definition */
#error FRNM_VAR_INIT already defined
#endif /* if (defined FRNM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FRNM_VAR_INIT

#if (defined FRNM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRNM_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRNM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FRNM_VAR_POWER_ON_INIT

#if (defined FRNM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FRNM_VAR_FAST_NO_INIT already defined
#endif /* if (defined FRNM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRNM_VAR_FAST_NO_INIT

#if (defined FRNM_VAR_FAST_CLEARED) /* to prevent double definition */
#error FRNM_VAR_FAST_CLEARED already defined
#endif /* if (defined FRNM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRNM_VAR_FAST_CLEARED

#if (defined FRNM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FRNM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FRNM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRNM_VAR_FAST_POWER_ON_CLEARED

#if (defined FRNM_VAR_FAST_INIT) /* to prevent double definition */
#error FRNM_VAR_FAST_INIT already defined
#endif /* if (defined FRNM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRNM_VAR_FAST_INIT

#if (defined FRNM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FRNM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FRNM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRNM_VAR_FAST_POWER_ON_INIT

#if (defined FRNM_VAR_SAVED_ZONE) /* to prevent double definition */
#error FRNM_VAR_SAVED_ZONE already defined
#endif /* if (defined FRNM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FRNM_VAR_SAVED_ZONE

#if (defined FRNM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FRNM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FRNM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FRNM_VAR_SLOW_NO_INIT

#if (defined FRNM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FRNM_VAR_SLOW_CLEARED already defined
#endif /* if (defined FRNM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FRNM_VAR_SLOW_CLEARED

#if (defined FRNM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FRNM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FRNM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FRNM_VAR_SLOW_POWER_ON_CLEARED

#if (defined FRNM_VAR_SLOW_INIT) /* to prevent double definition */
#error FRNM_VAR_SLOW_INIT already defined
#endif /* if (defined FRNM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FRNM_VAR_SLOW_INIT

#if (defined FRNM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FRNM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FRNM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FRNM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FRTP]-------------------*/

#if (defined FRTP_CODE) /* to prevent double definition */
#error FRTP_CODE already defined
#endif /* if (defined FRTP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FRTP_CODE

#if (defined FRTP_CODE_FAST) /* to prevent double definition */
#error FRTP_CODE_FAST already defined
#endif /* if (defined FRTP_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FRTP_CODE_FAST

#if (defined FRTP_CODE_SLOW) /* to prevent double definition */
#error FRTP_CODE_SLOW already defined
#endif /* if (defined FRTP_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FRTP_CODE_SLOW

#if (defined FRTP_CONFIG_DATA) /* to prevent double definition */
#error FRTP_CONFIG_DATA already defined
#endif /* if (defined FRTP_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FRTP_CONFIG_DATA

#if (defined FRTP_CONST) /* to prevent double definition */
#error FRTP_CONST already defined
#endif /* if (defined FRTP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FRTP_CONST

#if (defined FRTP_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FRTP_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FRTP_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FRTP_CONST_SAVED_RECOVERY_ZONE

#if (defined FRTP_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FRTP_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FRTP_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FRTP_INTERNAL_VAR_NO_INIT

#if (defined FRTP_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FRTP_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FRTP_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FRTP_INTERNAL_VAR_CLEARED

#if (defined FRTP_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTP_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRTP_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FRTP_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FRTP_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FRTP_INTERNAL_VAR_INIT already defined
#endif /* if (defined FRTP_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FRTP_INTERNAL_VAR_INIT

#if (defined FRTP_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRTP_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRTP_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FRTP_INTERNAL_VAR_POWER_ON_INIT

#if (defined FRTP_CALIB) /* to prevent double definition */
#error FRTP_CALIB already defined
#endif /* if (defined FRTP_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FRTP_CALIB

#if (defined FRTP_APPL_DATA) /* to prevent double definition */
#error FRTP_APPL_DATA already defined
#endif /* if (defined FRTP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FRTP_APPL_DATA

#if (defined FRTP_APPL_CONST) /* to prevent double definition */
#error FRTP_APPL_CONST already defined
#endif /* if (defined FRTP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FRTP_APPL_CONST

#if (defined FRTP_VAR_NO_INIT) /* to prevent double definition */
#error FRTP_VAR_NO_INIT already defined
#endif /* if (defined FRTP_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FRTP_VAR_NO_INIT

#if (defined FRTP_VAR_CLEARED) /* to prevent double definition */
#error FRTP_VAR_CLEARED already defined
#endif /* if (defined FRTP_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FRTP_VAR_CLEARED

#if (defined FRTP_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTP_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRTP_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FRTP_VAR_POWER_ON_CLEARED

#if (defined FRTP_VAR_INIT) /* to prevent double definition */
#error FRTP_VAR_INIT already defined
#endif /* if (defined FRTP_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FRTP_VAR_INIT

#if (defined FRTP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRTP_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRTP_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FRTP_VAR_POWER_ON_INIT

#if (defined FRTP_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FRTP_VAR_FAST_NO_INIT already defined
#endif /* if (defined FRTP_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTP_VAR_FAST_NO_INIT

#if (defined FRTP_VAR_FAST_CLEARED) /* to prevent double definition */
#error FRTP_VAR_FAST_CLEARED already defined
#endif /* if (defined FRTP_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTP_VAR_FAST_CLEARED

#if (defined FRTP_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTP_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FRTP_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTP_VAR_FAST_POWER_ON_CLEARED

#if (defined FRTP_VAR_FAST_INIT) /* to prevent double definition */
#error FRTP_VAR_FAST_INIT already defined
#endif /* if (defined FRTP_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTP_VAR_FAST_INIT

#if (defined FRTP_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FRTP_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FRTP_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTP_VAR_FAST_POWER_ON_INIT

#if (defined FRTP_VAR_SAVED_ZONE) /* to prevent double definition */
#error FRTP_VAR_SAVED_ZONE already defined
#endif /* if (defined FRTP_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FRTP_VAR_SAVED_ZONE

#if (defined FRTP_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FRTP_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FRTP_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FRTP_VAR_SLOW_NO_INIT

#if (defined FRTP_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FRTP_VAR_SLOW_CLEARED already defined
#endif /* if (defined FRTP_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FRTP_VAR_SLOW_CLEARED

#if (defined FRTP_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTP_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FRTP_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FRTP_VAR_SLOW_POWER_ON_CLEARED

#if (defined FRTP_VAR_SLOW_INIT) /* to prevent double definition */
#error FRTP_VAR_SLOW_INIT already defined
#endif /* if (defined FRTP_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FRTP_VAR_SLOW_INIT

#if (defined FRTP_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FRTP_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FRTP_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FRTP_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module FRTRCV]-------------------*/

#if (defined FRTRCV_CODE) /* to prevent double definition */
#error FRTRCV_CODE already defined
#endif /* if (defined FRTRCV_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define FRTRCV_CODE

#if (defined FRTRCV_CODE_FAST) /* to prevent double definition */
#error FRTRCV_CODE_FAST already defined
#endif /* if (defined FRTRCV_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define FRTRCV_CODE_FAST

#if (defined FRTRCV_CODE_SLOW) /* to prevent double definition */
#error FRTRCV_CODE_SLOW already defined
#endif /* if (defined FRTRCV_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define FRTRCV_CODE_SLOW

#if (defined FRTRCV_CONFIG_DATA) /* to prevent double definition */
#error FRTRCV_CONFIG_DATA already defined
#endif /* if (defined FRTRCV_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define FRTRCV_CONFIG_DATA

#if (defined FRTRCV_CONST) /* to prevent double definition */
#error FRTRCV_CONST already defined
#endif /* if (defined FRTRCV_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define FRTRCV_CONST

#if (defined FRTRCV_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error FRTRCV_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined FRTRCV_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define FRTRCV_CONST_SAVED_RECOVERY_ZONE

#if (defined FRTRCV_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error FRTRCV_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined FRTRCV_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define FRTRCV_INTERNAL_VAR_NO_INIT

#if (defined FRTRCV_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error FRTRCV_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined FRTRCV_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define FRTRCV_INTERNAL_VAR_CLEARED

#if (defined FRTRCV_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTRCV_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRTRCV_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define FRTRCV_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined FRTRCV_INTERNAL_VAR_INIT) /* to prevent double definition */
#error FRTRCV_INTERNAL_VAR_INIT already defined
#endif /* if (defined FRTRCV_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define FRTRCV_INTERNAL_VAR_INIT

#if (defined FRTRCV_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRTRCV_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRTRCV_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define FRTRCV_INTERNAL_VAR_POWER_ON_INIT

#if (defined FRTRCV_CALIB) /* to prevent double definition */
#error FRTRCV_CALIB already defined
#endif /* if (defined FRTRCV_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define FRTRCV_CALIB

#if (defined FRTRCV_APPL_DATA) /* to prevent double definition */
#error FRTRCV_APPL_DATA already defined
#endif /* if (defined FRTRCV_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define FRTRCV_APPL_DATA

#if (defined FRTRCV_APPL_CONST) /* to prevent double definition */
#error FRTRCV_APPL_CONST already defined
#endif /* if (defined FRTRCV_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define FRTRCV_APPL_CONST

#if (defined FRTRCV_VAR_NO_INIT) /* to prevent double definition */
#error FRTRCV_VAR_NO_INIT already defined
#endif /* if (defined FRTRCV_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define FRTRCV_VAR_NO_INIT

#if (defined FRTRCV_VAR_CLEARED) /* to prevent double definition */
#error FRTRCV_VAR_CLEARED already defined
#endif /* if (defined FRTRCV_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define FRTRCV_VAR_CLEARED

#if (defined FRTRCV_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTRCV_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined FRTRCV_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define FRTRCV_VAR_POWER_ON_CLEARED

#if (defined FRTRCV_VAR_INIT) /* to prevent double definition */
#error FRTRCV_VAR_INIT already defined
#endif /* if (defined FRTRCV_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define FRTRCV_VAR_INIT

#if (defined FRTRCV_VAR_POWER_ON_INIT) /* to prevent double definition */
#error FRTRCV_VAR_POWER_ON_INIT already defined
#endif /* if (defined FRTRCV_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define FRTRCV_VAR_POWER_ON_INIT

#if (defined FRTRCV_VAR_FAST_NO_INIT) /* to prevent double definition */
#error FRTRCV_VAR_FAST_NO_INIT already defined
#endif /* if (defined FRTRCV_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTRCV_VAR_FAST_NO_INIT

#if (defined FRTRCV_VAR_FAST_CLEARED) /* to prevent double definition */
#error FRTRCV_VAR_FAST_CLEARED already defined
#endif /* if (defined FRTRCV_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTRCV_VAR_FAST_CLEARED

#if (defined FRTRCV_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTRCV_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined FRTRCV_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTRCV_VAR_FAST_POWER_ON_CLEARED

#if (defined FRTRCV_VAR_FAST_INIT) /* to prevent double definition */
#error FRTRCV_VAR_FAST_INIT already defined
#endif /* if (defined FRTRCV_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTRCV_VAR_FAST_INIT

#if (defined FRTRCV_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error FRTRCV_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined FRTRCV_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define FRTRCV_VAR_FAST_POWER_ON_INIT

#if (defined FRTRCV_VAR_SAVED_ZONE) /* to prevent double definition */
#error FRTRCV_VAR_SAVED_ZONE already defined
#endif /* if (defined FRTRCV_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define FRTRCV_VAR_SAVED_ZONE

#if (defined FRTRCV_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error FRTRCV_VAR_SLOW_NO_INIT already defined
#endif /* if (defined FRTRCV_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define FRTRCV_VAR_SLOW_NO_INIT

#if (defined FRTRCV_VAR_SLOW_CLEARED) /* to prevent double definition */
#error FRTRCV_VAR_SLOW_CLEARED already defined
#endif /* if (defined FRTRCV_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define FRTRCV_VAR_SLOW_CLEARED

#if (defined FRTRCV_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error FRTRCV_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined FRTRCV_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define FRTRCV_VAR_SLOW_POWER_ON_CLEARED

#if (defined FRTRCV_VAR_SLOW_INIT) /* to prevent double definition */
#error FRTRCV_VAR_SLOW_INIT already defined
#endif /* if (defined FRTRCV_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define FRTRCV_VAR_SLOW_INIT

#if (defined FRTRCV_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error FRTRCV_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined FRTRCV_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define FRTRCV_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module IOHWAB]-------------------*/

#if (defined IOHWAB_CODE) /* to prevent double definition */
#error IOHWAB_CODE already defined
#endif /* if (defined IOHWAB_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define IOHWAB_CODE

#if (defined IOHWAB_CODE_FAST) /* to prevent double definition */
#error IOHWAB_CODE_FAST already defined
#endif /* if (defined IOHWAB_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define IOHWAB_CODE_FAST

#if (defined IOHWAB_CODE_SLOW) /* to prevent double definition */
#error IOHWAB_CODE_SLOW already defined
#endif /* if (defined IOHWAB_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define IOHWAB_CODE_SLOW

#if (defined IOHWAB_CONFIG_DATA) /* to prevent double definition */
#error IOHWAB_CONFIG_DATA already defined
#endif /* if (defined IOHWAB_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define IOHWAB_CONFIG_DATA

#if (defined IOHWAB_CONST) /* to prevent double definition */
#error IOHWAB_CONST already defined
#endif /* if (defined IOHWAB_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define IOHWAB_CONST

#if (defined IOHWAB_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error IOHWAB_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined IOHWAB_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define IOHWAB_CONST_SAVED_RECOVERY_ZONE

#if (defined IOHWAB_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error IOHWAB_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined IOHWAB_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define IOHWAB_INTERNAL_VAR_NO_INIT

#if (defined IOHWAB_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error IOHWAB_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined IOHWAB_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define IOHWAB_INTERNAL_VAR_CLEARED

#if (defined IOHWAB_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error IOHWAB_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined IOHWAB_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define IOHWAB_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined IOHWAB_INTERNAL_VAR_INIT) /* to prevent double definition */
#error IOHWAB_INTERNAL_VAR_INIT already defined
#endif /* if (defined IOHWAB_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define IOHWAB_INTERNAL_VAR_INIT

#if (defined IOHWAB_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error IOHWAB_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined IOHWAB_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define IOHWAB_INTERNAL_VAR_POWER_ON_INIT

#if (defined IOHWAB_CALIB) /* to prevent double definition */
#error IOHWAB_CALIB already defined
#endif /* if (defined IOHWAB_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define IOHWAB_CALIB

#if (defined IOHWAB_APPL_DATA) /* to prevent double definition */
#error IOHWAB_APPL_DATA already defined
#endif /* if (defined IOHWAB_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define IOHWAB_APPL_DATA

#if (defined IOHWAB_APPL_CONST) /* to prevent double definition */
#error IOHWAB_APPL_CONST already defined
#endif /* if (defined IOHWAB_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define IOHWAB_APPL_CONST

#if (defined IOHWAB_VAR_NO_INIT) /* to prevent double definition */
#error IOHWAB_VAR_NO_INIT already defined
#endif /* if (defined IOHWAB_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define IOHWAB_VAR_NO_INIT

#if (defined IOHWAB_VAR_CLEARED) /* to prevent double definition */
#error IOHWAB_VAR_CLEARED already defined
#endif /* if (defined IOHWAB_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define IOHWAB_VAR_CLEARED

#if (defined IOHWAB_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error IOHWAB_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined IOHWAB_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define IOHWAB_VAR_POWER_ON_CLEARED

#if (defined IOHWAB_VAR_INIT) /* to prevent double definition */
#error IOHWAB_VAR_INIT already defined
#endif /* if (defined IOHWAB_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define IOHWAB_VAR_INIT

#if (defined IOHWAB_VAR_POWER_ON_INIT) /* to prevent double definition */
#error IOHWAB_VAR_POWER_ON_INIT already defined
#endif /* if (defined IOHWAB_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define IOHWAB_VAR_POWER_ON_INIT

#if (defined IOHWAB_VAR_FAST_NO_INIT) /* to prevent double definition */
#error IOHWAB_VAR_FAST_NO_INIT already defined
#endif /* if (defined IOHWAB_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IOHWAB_VAR_FAST_NO_INIT

#if (defined IOHWAB_VAR_FAST_CLEARED) /* to prevent double definition */
#error IOHWAB_VAR_FAST_CLEARED already defined
#endif /* if (defined IOHWAB_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IOHWAB_VAR_FAST_CLEARED

#if (defined IOHWAB_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error IOHWAB_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined IOHWAB_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IOHWAB_VAR_FAST_POWER_ON_CLEARED

#if (defined IOHWAB_VAR_FAST_INIT) /* to prevent double definition */
#error IOHWAB_VAR_FAST_INIT already defined
#endif /* if (defined IOHWAB_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IOHWAB_VAR_FAST_INIT

#if (defined IOHWAB_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error IOHWAB_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined IOHWAB_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IOHWAB_VAR_FAST_POWER_ON_INIT

#if (defined IOHWAB_VAR_SAVED_ZONE) /* to prevent double definition */
#error IOHWAB_VAR_SAVED_ZONE already defined
#endif /* if (defined IOHWAB_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define IOHWAB_VAR_SAVED_ZONE

#if (defined IOHWAB_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error IOHWAB_VAR_SLOW_NO_INIT already defined
#endif /* if (defined IOHWAB_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define IOHWAB_VAR_SLOW_NO_INIT

#if (defined IOHWAB_VAR_SLOW_CLEARED) /* to prevent double definition */
#error IOHWAB_VAR_SLOW_CLEARED already defined
#endif /* if (defined IOHWAB_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define IOHWAB_VAR_SLOW_CLEARED

#if (defined IOHWAB_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error IOHWAB_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined IOHWAB_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define IOHWAB_VAR_SLOW_POWER_ON_CLEARED

#if (defined IOHWAB_VAR_SLOW_INIT) /* to prevent double definition */
#error IOHWAB_VAR_SLOW_INIT already defined
#endif /* if (defined IOHWAB_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define IOHWAB_VAR_SLOW_INIT

#if (defined IOHWAB_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error IOHWAB_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined IOHWAB_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define IOHWAB_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module IPDUM]-------------------*/

#if (defined IPDUM_CODE) /* to prevent double definition */
#error IPDUM_CODE already defined
#endif /* if (defined IPDUM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define IPDUM_CODE

#if (defined IPDUM_CODE_FAST) /* to prevent double definition */
#error IPDUM_CODE_FAST already defined
#endif /* if (defined IPDUM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define IPDUM_CODE_FAST

#if (defined IPDUM_CODE_SLOW) /* to prevent double definition */
#error IPDUM_CODE_SLOW already defined
#endif /* if (defined IPDUM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define IPDUM_CODE_SLOW

#if (defined IPDUM_CONFIG_DATA) /* to prevent double definition */
#error IPDUM_CONFIG_DATA already defined
#endif /* if (defined IPDUM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define IPDUM_CONFIG_DATA

#if (defined IPDUM_CONST) /* to prevent double definition */
#error IPDUM_CONST already defined
#endif /* if (defined IPDUM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define IPDUM_CONST

#if (defined IPDUM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error IPDUM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined IPDUM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define IPDUM_CONST_SAVED_RECOVERY_ZONE

#if (defined IPDUM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error IPDUM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined IPDUM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define IPDUM_INTERNAL_VAR_NO_INIT

#if (defined IPDUM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error IPDUM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined IPDUM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define IPDUM_INTERNAL_VAR_CLEARED

#if (defined IPDUM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error IPDUM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined IPDUM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define IPDUM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined IPDUM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error IPDUM_INTERNAL_VAR_INIT already defined
#endif /* if (defined IPDUM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define IPDUM_INTERNAL_VAR_INIT

#if (defined IPDUM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error IPDUM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined IPDUM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define IPDUM_INTERNAL_VAR_POWER_ON_INIT

#if (defined IPDUM_CALIB) /* to prevent double definition */
#error IPDUM_CALIB already defined
#endif /* if (defined IPDUM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define IPDUM_CALIB

#if (defined IPDUM_APPL_DATA) /* to prevent double definition */
#error IPDUM_APPL_DATA already defined
#endif /* if (defined IPDUM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define IPDUM_APPL_DATA

#if (defined IPDUM_APPL_CONST) /* to prevent double definition */
#error IPDUM_APPL_CONST already defined
#endif /* if (defined IPDUM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define IPDUM_APPL_CONST

#if (defined IPDUM_VAR_NO_INIT) /* to prevent double definition */
#error IPDUM_VAR_NO_INIT already defined
#endif /* if (defined IPDUM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define IPDUM_VAR_NO_INIT

#if (defined IPDUM_VAR_CLEARED) /* to prevent double definition */
#error IPDUM_VAR_CLEARED already defined
#endif /* if (defined IPDUM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define IPDUM_VAR_CLEARED

#if (defined IPDUM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error IPDUM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined IPDUM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define IPDUM_VAR_POWER_ON_CLEARED

#if (defined IPDUM_VAR_INIT) /* to prevent double definition */
#error IPDUM_VAR_INIT already defined
#endif /* if (defined IPDUM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define IPDUM_VAR_INIT

#if (defined IPDUM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error IPDUM_VAR_POWER_ON_INIT already defined
#endif /* if (defined IPDUM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define IPDUM_VAR_POWER_ON_INIT

#if (defined IPDUM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error IPDUM_VAR_FAST_NO_INIT already defined
#endif /* if (defined IPDUM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IPDUM_VAR_FAST_NO_INIT

#if (defined IPDUM_VAR_FAST_CLEARED) /* to prevent double definition */
#error IPDUM_VAR_FAST_CLEARED already defined
#endif /* if (defined IPDUM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IPDUM_VAR_FAST_CLEARED

#if (defined IPDUM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error IPDUM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined IPDUM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IPDUM_VAR_FAST_POWER_ON_CLEARED

#if (defined IPDUM_VAR_FAST_INIT) /* to prevent double definition */
#error IPDUM_VAR_FAST_INIT already defined
#endif /* if (defined IPDUM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IPDUM_VAR_FAST_INIT

#if (defined IPDUM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error IPDUM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined IPDUM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define IPDUM_VAR_FAST_POWER_ON_INIT

#if (defined IPDUM_VAR_SAVED_ZONE) /* to prevent double definition */
#error IPDUM_VAR_SAVED_ZONE already defined
#endif /* if (defined IPDUM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define IPDUM_VAR_SAVED_ZONE

#if (defined IPDUM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error IPDUM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined IPDUM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define IPDUM_VAR_SLOW_NO_INIT

#if (defined IPDUM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error IPDUM_VAR_SLOW_CLEARED already defined
#endif /* if (defined IPDUM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define IPDUM_VAR_SLOW_CLEARED

#if (defined IPDUM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error IPDUM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined IPDUM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define IPDUM_VAR_SLOW_POWER_ON_CLEARED

#if (defined IPDUM_VAR_SLOW_INIT) /* to prevent double definition */
#error IPDUM_VAR_SLOW_INIT already defined
#endif /* if (defined IPDUM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define IPDUM_VAR_SLOW_INIT

#if (defined IPDUM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error IPDUM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined IPDUM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define IPDUM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module LINIF]-------------------*/

#if (defined LINIF_CODE) /* to prevent double definition */
#error LINIF_CODE already defined
#endif /* if (defined LINIF_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define LINIF_CODE

#if (defined LINIF_CODE_FAST) /* to prevent double definition */
#error LINIF_CODE_FAST already defined
#endif /* if (defined LINIF_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define LINIF_CODE_FAST

#if (defined LINIF_CODE_SLOW) /* to prevent double definition */
#error LINIF_CODE_SLOW already defined
#endif /* if (defined LINIF_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define LINIF_CODE_SLOW

#if (defined LINIF_CONFIG_DATA) /* to prevent double definition */
#error LINIF_CONFIG_DATA already defined
#endif /* if (defined LINIF_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define LINIF_CONFIG_DATA

#if (defined LINIF_CONST) /* to prevent double definition */
#error LINIF_CONST already defined
#endif /* if (defined LINIF_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define LINIF_CONST

#if (defined LINIF_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error LINIF_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined LINIF_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define LINIF_CONST_SAVED_RECOVERY_ZONE

#if (defined LINIF_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error LINIF_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined LINIF_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define LINIF_INTERNAL_VAR_NO_INIT

#if (defined LINIF_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error LINIF_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined LINIF_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define LINIF_INTERNAL_VAR_CLEARED

#if (defined LINIF_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error LINIF_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined LINIF_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define LINIF_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined LINIF_INTERNAL_VAR_INIT) /* to prevent double definition */
#error LINIF_INTERNAL_VAR_INIT already defined
#endif /* if (defined LINIF_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define LINIF_INTERNAL_VAR_INIT

#if (defined LINIF_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error LINIF_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined LINIF_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define LINIF_INTERNAL_VAR_POWER_ON_INIT

#if (defined LINIF_CALIB) /* to prevent double definition */
#error LINIF_CALIB already defined
#endif /* if (defined LINIF_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define LINIF_CALIB

#if (defined LINIF_APPL_DATA) /* to prevent double definition */
#error LINIF_APPL_DATA already defined
#endif /* if (defined LINIF_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define LINIF_APPL_DATA

#if (defined LINIF_APPL_CONST) /* to prevent double definition */
#error LINIF_APPL_CONST already defined
#endif /* if (defined LINIF_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define LINIF_APPL_CONST

#if (defined LINIF_VAR_NO_INIT) /* to prevent double definition */
#error LINIF_VAR_NO_INIT already defined
#endif /* if (defined LINIF_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define LINIF_VAR_NO_INIT

#if (defined LINIF_VAR_CLEARED) /* to prevent double definition */
#error LINIF_VAR_CLEARED already defined
#endif /* if (defined LINIF_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define LINIF_VAR_CLEARED

#if (defined LINIF_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error LINIF_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined LINIF_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define LINIF_VAR_POWER_ON_CLEARED

#if (defined LINIF_VAR_INIT) /* to prevent double definition */
#error LINIF_VAR_INIT already defined
#endif /* if (defined LINIF_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define LINIF_VAR_INIT

#if (defined LINIF_VAR_POWER_ON_INIT) /* to prevent double definition */
#error LINIF_VAR_POWER_ON_INIT already defined
#endif /* if (defined LINIF_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define LINIF_VAR_POWER_ON_INIT

#if (defined LINIF_VAR_FAST_NO_INIT) /* to prevent double definition */
#error LINIF_VAR_FAST_NO_INIT already defined
#endif /* if (defined LINIF_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LINIF_VAR_FAST_NO_INIT

#if (defined LINIF_VAR_FAST_CLEARED) /* to prevent double definition */
#error LINIF_VAR_FAST_CLEARED already defined
#endif /* if (defined LINIF_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LINIF_VAR_FAST_CLEARED

#if (defined LINIF_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error LINIF_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined LINIF_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LINIF_VAR_FAST_POWER_ON_CLEARED

#if (defined LINIF_VAR_FAST_INIT) /* to prevent double definition */
#error LINIF_VAR_FAST_INIT already defined
#endif /* if (defined LINIF_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LINIF_VAR_FAST_INIT

#if (defined LINIF_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error LINIF_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined LINIF_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define LINIF_VAR_FAST_POWER_ON_INIT

#if (defined LINIF_VAR_SAVED_ZONE) /* to prevent double definition */
#error LINIF_VAR_SAVED_ZONE already defined
#endif /* if (defined LINIF_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define LINIF_VAR_SAVED_ZONE

#if (defined LINIF_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error LINIF_VAR_SLOW_NO_INIT already defined
#endif /* if (defined LINIF_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define LINIF_VAR_SLOW_NO_INIT

#if (defined LINIF_VAR_SLOW_CLEARED) /* to prevent double definition */
#error LINIF_VAR_SLOW_CLEARED already defined
#endif /* if (defined LINIF_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define LINIF_VAR_SLOW_CLEARED

#if (defined LINIF_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error LINIF_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined LINIF_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define LINIF_VAR_SLOW_POWER_ON_CLEARED

#if (defined LINIF_VAR_SLOW_INIT) /* to prevent double definition */
#error LINIF_VAR_SLOW_INIT already defined
#endif /* if (defined LINIF_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define LINIF_VAR_SLOW_INIT

#if (defined LINIF_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error LINIF_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined LINIF_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define LINIF_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module MEMIF]-------------------*/

#if (defined MEMIF_CODE) /* to prevent double definition */
#error MEMIF_CODE already defined
#endif /* if (defined MEMIF_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define MEMIF_CODE

#if (defined MEMIF_CODE_FAST) /* to prevent double definition */
#error MEMIF_CODE_FAST already defined
#endif /* if (defined MEMIF_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define MEMIF_CODE_FAST

#if (defined MEMIF_CODE_SLOW) /* to prevent double definition */
#error MEMIF_CODE_SLOW already defined
#endif /* if (defined MEMIF_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define MEMIF_CODE_SLOW

#if (defined MEMIF_CONFIG_DATA) /* to prevent double definition */
#error MEMIF_CONFIG_DATA already defined
#endif /* if (defined MEMIF_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define MEMIF_CONFIG_DATA

#if (defined MEMIF_CONST) /* to prevent double definition */
#error MEMIF_CONST already defined
#endif /* if (defined MEMIF_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define MEMIF_CONST

#if (defined MEMIF_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error MEMIF_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined MEMIF_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define MEMIF_CONST_SAVED_RECOVERY_ZONE

#if (defined MEMIF_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error MEMIF_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined MEMIF_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define MEMIF_INTERNAL_VAR_NO_INIT

#if (defined MEMIF_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error MEMIF_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined MEMIF_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define MEMIF_INTERNAL_VAR_CLEARED

#if (defined MEMIF_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error MEMIF_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined MEMIF_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define MEMIF_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined MEMIF_INTERNAL_VAR_INIT) /* to prevent double definition */
#error MEMIF_INTERNAL_VAR_INIT already defined
#endif /* if (defined MEMIF_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define MEMIF_INTERNAL_VAR_INIT

#if (defined MEMIF_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error MEMIF_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined MEMIF_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define MEMIF_INTERNAL_VAR_POWER_ON_INIT

#if (defined MEMIF_CALIB) /* to prevent double definition */
#error MEMIF_CALIB already defined
#endif /* if (defined MEMIF_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define MEMIF_CALIB

#if (defined MEMIF_APPL_DATA) /* to prevent double definition */
#error MEMIF_APPL_DATA already defined
#endif /* if (defined MEMIF_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define MEMIF_APPL_DATA

#if (defined MEMIF_APPL_CONST) /* to prevent double definition */
#error MEMIF_APPL_CONST already defined
#endif /* if (defined MEMIF_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define MEMIF_APPL_CONST

#if (defined MEMIF_VAR_NO_INIT) /* to prevent double definition */
#error MEMIF_VAR_NO_INIT already defined
#endif /* if (defined MEMIF_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define MEMIF_VAR_NO_INIT

#if (defined MEMIF_VAR_CLEARED) /* to prevent double definition */
#error MEMIF_VAR_CLEARED already defined
#endif /* if (defined MEMIF_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define MEMIF_VAR_CLEARED

#if (defined MEMIF_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error MEMIF_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined MEMIF_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define MEMIF_VAR_POWER_ON_CLEARED

#if (defined MEMIF_VAR_INIT) /* to prevent double definition */
#error MEMIF_VAR_INIT already defined
#endif /* if (defined MEMIF_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define MEMIF_VAR_INIT

#if (defined MEMIF_VAR_POWER_ON_INIT) /* to prevent double definition */
#error MEMIF_VAR_POWER_ON_INIT already defined
#endif /* if (defined MEMIF_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define MEMIF_VAR_POWER_ON_INIT

#if (defined MEMIF_VAR_FAST_NO_INIT) /* to prevent double definition */
#error MEMIF_VAR_FAST_NO_INIT already defined
#endif /* if (defined MEMIF_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MEMIF_VAR_FAST_NO_INIT

#if (defined MEMIF_VAR_FAST_CLEARED) /* to prevent double definition */
#error MEMIF_VAR_FAST_CLEARED already defined
#endif /* if (defined MEMIF_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MEMIF_VAR_FAST_CLEARED

#if (defined MEMIF_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error MEMIF_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined MEMIF_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MEMIF_VAR_FAST_POWER_ON_CLEARED

#if (defined MEMIF_VAR_FAST_INIT) /* to prevent double definition */
#error MEMIF_VAR_FAST_INIT already defined
#endif /* if (defined MEMIF_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MEMIF_VAR_FAST_INIT

#if (defined MEMIF_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error MEMIF_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined MEMIF_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define MEMIF_VAR_FAST_POWER_ON_INIT

#if (defined MEMIF_VAR_SAVED_ZONE) /* to prevent double definition */
#error MEMIF_VAR_SAVED_ZONE already defined
#endif /* if (defined MEMIF_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define MEMIF_VAR_SAVED_ZONE

#if (defined MEMIF_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error MEMIF_VAR_SLOW_NO_INIT already defined
#endif /* if (defined MEMIF_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define MEMIF_VAR_SLOW_NO_INIT

#if (defined MEMIF_VAR_SLOW_CLEARED) /* to prevent double definition */
#error MEMIF_VAR_SLOW_CLEARED already defined
#endif /* if (defined MEMIF_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define MEMIF_VAR_SLOW_CLEARED

#if (defined MEMIF_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error MEMIF_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined MEMIF_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define MEMIF_VAR_SLOW_POWER_ON_CLEARED

#if (defined MEMIF_VAR_SLOW_INIT) /* to prevent double definition */
#error MEMIF_VAR_SLOW_INIT already defined
#endif /* if (defined MEMIF_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define MEMIF_VAR_SLOW_INIT

#if (defined MEMIF_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error MEMIF_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined MEMIF_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define MEMIF_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module NM]-------------------*/

#if (defined NM_CODE) /* to prevent double definition */
#error NM_CODE already defined
#endif /* if (defined NM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define NM_CODE

#if (defined NM_CODE_FAST) /* to prevent double definition */
#error NM_CODE_FAST already defined
#endif /* if (defined NM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define NM_CODE_FAST

#if (defined NM_CODE_SLOW) /* to prevent double definition */
#error NM_CODE_SLOW already defined
#endif /* if (defined NM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define NM_CODE_SLOW

#if (defined NM_CONFIG_DATA) /* to prevent double definition */
#error NM_CONFIG_DATA already defined
#endif /* if (defined NM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define NM_CONFIG_DATA

#if (defined NM_CONST) /* to prevent double definition */
#error NM_CONST already defined
#endif /* if (defined NM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define NM_CONST

#if (defined NM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error NM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined NM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define NM_CONST_SAVED_RECOVERY_ZONE

#if (defined NM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error NM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined NM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define NM_INTERNAL_VAR_NO_INIT

#if (defined NM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error NM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined NM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define NM_INTERNAL_VAR_CLEARED

#if (defined NM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error NM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined NM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define NM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined NM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error NM_INTERNAL_VAR_INIT already defined
#endif /* if (defined NM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define NM_INTERNAL_VAR_INIT

#if (defined NM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error NM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined NM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define NM_INTERNAL_VAR_POWER_ON_INIT

#if (defined NM_CALIB) /* to prevent double definition */
#error NM_CALIB already defined
#endif /* if (defined NM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define NM_CALIB

#if (defined NM_APPL_DATA) /* to prevent double definition */
#error NM_APPL_DATA already defined
#endif /* if (defined NM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define NM_APPL_DATA

#if (defined NM_APPL_CONST) /* to prevent double definition */
#error NM_APPL_CONST already defined
#endif /* if (defined NM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define NM_APPL_CONST

#if (defined NM_VAR_NO_INIT) /* to prevent double definition */
#error NM_VAR_NO_INIT already defined
#endif /* if (defined NM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define NM_VAR_NO_INIT

#if (defined NM_VAR_CLEARED) /* to prevent double definition */
#error NM_VAR_CLEARED already defined
#endif /* if (defined NM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define NM_VAR_CLEARED

#if (defined NM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error NM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined NM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define NM_VAR_POWER_ON_CLEARED

#if (defined NM_VAR_INIT) /* to prevent double definition */
#error NM_VAR_INIT already defined
#endif /* if (defined NM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define NM_VAR_INIT

#if (defined NM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error NM_VAR_POWER_ON_INIT already defined
#endif /* if (defined NM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define NM_VAR_POWER_ON_INIT

#if (defined NM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error NM_VAR_FAST_NO_INIT already defined
#endif /* if (defined NM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NM_VAR_FAST_NO_INIT

#if (defined NM_VAR_FAST_CLEARED) /* to prevent double definition */
#error NM_VAR_FAST_CLEARED already defined
#endif /* if (defined NM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NM_VAR_FAST_CLEARED

#if (defined NM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error NM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined NM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NM_VAR_FAST_POWER_ON_CLEARED

#if (defined NM_VAR_FAST_INIT) /* to prevent double definition */
#error NM_VAR_FAST_INIT already defined
#endif /* if (defined NM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NM_VAR_FAST_INIT

#if (defined NM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error NM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined NM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NM_VAR_FAST_POWER_ON_INIT

#if (defined NM_VAR_SAVED_ZONE) /* to prevent double definition */
#error NM_VAR_SAVED_ZONE already defined
#endif /* if (defined NM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define NM_VAR_SAVED_ZONE

#if (defined NM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error NM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined NM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define NM_VAR_SLOW_NO_INIT

#if (defined NM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error NM_VAR_SLOW_CLEARED already defined
#endif /* if (defined NM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define NM_VAR_SLOW_CLEARED

#if (defined NM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error NM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined NM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define NM_VAR_SLOW_POWER_ON_CLEARED

#if (defined NM_VAR_SLOW_INIT) /* to prevent double definition */
#error NM_VAR_SLOW_INIT already defined
#endif /* if (defined NM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define NM_VAR_SLOW_INIT

#if (defined NM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error NM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined NM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define NM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module NVM]-------------------*/

#if (defined NVM_CODE) /* to prevent double definition */
#error NVM_CODE already defined
#endif /* if (defined NVM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define NVM_CODE

#if (defined NVM_CODE_FAST) /* to prevent double definition */
#error NVM_CODE_FAST already defined
#endif /* if (defined NVM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define NVM_CODE_FAST

#if (defined NVM_CODE_SLOW) /* to prevent double definition */
#error NVM_CODE_SLOW already defined
#endif /* if (defined NVM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define NVM_CODE_SLOW

#if (defined NVM_CONFIG_DATA) /* to prevent double definition */
#error NVM_CONFIG_DATA already defined
#endif /* if (defined NVM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define NVM_CONFIG_DATA

#if (defined NVM_CONST) /* to prevent double definition */
#error NVM_CONST already defined
#endif /* if (defined NVM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define NVM_CONST

#if (defined NVM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error NVM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined NVM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define NVM_CONST_SAVED_RECOVERY_ZONE

#if (defined NVM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error NVM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined NVM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define NVM_INTERNAL_VAR_NO_INIT

#if (defined NVM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error NVM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined NVM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define NVM_INTERNAL_VAR_CLEARED

#if (defined NVM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error NVM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined NVM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define NVM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined NVM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error NVM_INTERNAL_VAR_INIT already defined
#endif /* if (defined NVM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define NVM_INTERNAL_VAR_INIT

#if (defined NVM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error NVM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined NVM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define NVM_INTERNAL_VAR_POWER_ON_INIT

#if (defined NVM_CALIB) /* to prevent double definition */
#error NVM_CALIB already defined
#endif /* if (defined NVM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define NVM_CALIB

#if (defined NVM_APPL_DATA) /* to prevent double definition */
#error NVM_APPL_DATA already defined
#endif /* if (defined NVM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define NVM_APPL_DATA

#if (defined NVM_APPL_CONST) /* to prevent double definition */
#error NVM_APPL_CONST already defined
#endif /* if (defined NVM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define NVM_APPL_CONST

#if (defined NVM_VAR_NO_INIT) /* to prevent double definition */
#error NVM_VAR_NO_INIT already defined
#endif /* if (defined NVM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define NVM_VAR_NO_INIT

#if (defined NVM_VAR_CLEARED) /* to prevent double definition */
#error NVM_VAR_CLEARED already defined
#endif /* if (defined NVM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define NVM_VAR_CLEARED

#if (defined NVM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error NVM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined NVM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define NVM_VAR_POWER_ON_CLEARED

#if (defined NVM_VAR_INIT) /* to prevent double definition */
#error NVM_VAR_INIT already defined
#endif /* if (defined NVM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define NVM_VAR_INIT

#if (defined NVM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error NVM_VAR_POWER_ON_INIT already defined
#endif /* if (defined NVM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define NVM_VAR_POWER_ON_INIT

#if (defined NVM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error NVM_VAR_FAST_NO_INIT already defined
#endif /* if (defined NVM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NVM_VAR_FAST_NO_INIT

#if (defined NVM_VAR_FAST_CLEARED) /* to prevent double definition */
#error NVM_VAR_FAST_CLEARED already defined
#endif /* if (defined NVM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NVM_VAR_FAST_CLEARED

#if (defined NVM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error NVM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined NVM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NVM_VAR_FAST_POWER_ON_CLEARED

#if (defined NVM_VAR_FAST_INIT) /* to prevent double definition */
#error NVM_VAR_FAST_INIT already defined
#endif /* if (defined NVM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NVM_VAR_FAST_INIT

#if (defined NVM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error NVM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined NVM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define NVM_VAR_FAST_POWER_ON_INIT

#if (defined NVM_VAR_SAVED_ZONE) /* to prevent double definition */
#error NVM_VAR_SAVED_ZONE already defined
#endif /* if (defined NVM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define NVM_VAR_SAVED_ZONE

#if (defined NVM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error NVM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined NVM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define NVM_VAR_SLOW_NO_INIT

#if (defined NVM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error NVM_VAR_SLOW_CLEARED already defined
#endif /* if (defined NVM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define NVM_VAR_SLOW_CLEARED

#if (defined NVM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error NVM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined NVM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define NVM_VAR_SLOW_POWER_ON_CLEARED

#if (defined NVM_VAR_SLOW_INIT) /* to prevent double definition */
#error NVM_VAR_SLOW_INIT already defined
#endif /* if (defined NVM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define NVM_VAR_SLOW_INIT

#if (defined NVM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error NVM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined NVM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define NVM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module PDUR]-------------------*/

#if (defined PDUR_CODE) /* to prevent double definition */
#error PDUR_CODE already defined
#endif /* if (defined PDUR_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define PDUR_CODE

#if (defined PDUR_CODE_FAST) /* to prevent double definition */
#error PDUR_CODE_FAST already defined
#endif /* if (defined PDUR_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define PDUR_CODE_FAST

#if (defined PDUR_CODE_SLOW) /* to prevent double definition */
#error PDUR_CODE_SLOW already defined
#endif /* if (defined PDUR_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define PDUR_CODE_SLOW

#if (defined PDUR_CONFIG_DATA) /* to prevent double definition */
#error PDUR_CONFIG_DATA already defined
#endif /* if (defined PDUR_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define PDUR_CONFIG_DATA

#if (defined PDUR_CONST) /* to prevent double definition */
#error PDUR_CONST already defined
#endif /* if (defined PDUR_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define PDUR_CONST

#if (defined PDUR_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error PDUR_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined PDUR_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define PDUR_CONST_SAVED_RECOVERY_ZONE

#if (defined PDUR_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error PDUR_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined PDUR_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define PDUR_INTERNAL_VAR_NO_INIT

#if (defined PDUR_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error PDUR_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined PDUR_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define PDUR_INTERNAL_VAR_CLEARED

#if (defined PDUR_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error PDUR_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined PDUR_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define PDUR_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined PDUR_INTERNAL_VAR_INIT) /* to prevent double definition */
#error PDUR_INTERNAL_VAR_INIT already defined
#endif /* if (defined PDUR_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define PDUR_INTERNAL_VAR_INIT

#if (defined PDUR_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error PDUR_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined PDUR_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define PDUR_INTERNAL_VAR_POWER_ON_INIT

#if (defined PDUR_CALIB) /* to prevent double definition */
#error PDUR_CALIB already defined
#endif /* if (defined PDUR_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define PDUR_CALIB

#if (defined PDUR_APPL_DATA) /* to prevent double definition */
#error PDUR_APPL_DATA already defined
#endif /* if (defined PDUR_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define PDUR_APPL_DATA

#if (defined PDUR_APPL_CONST) /* to prevent double definition */
#error PDUR_APPL_CONST already defined
#endif /* if (defined PDUR_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define PDUR_APPL_CONST

#if (defined PDUR_VAR_NO_INIT) /* to prevent double definition */
#error PDUR_VAR_NO_INIT already defined
#endif /* if (defined PDUR_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define PDUR_VAR_NO_INIT

#if (defined PDUR_VAR_CLEARED) /* to prevent double definition */
#error PDUR_VAR_CLEARED already defined
#endif /* if (defined PDUR_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define PDUR_VAR_CLEARED

#if (defined PDUR_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error PDUR_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined PDUR_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define PDUR_VAR_POWER_ON_CLEARED

#if (defined PDUR_VAR_INIT) /* to prevent double definition */
#error PDUR_VAR_INIT already defined
#endif /* if (defined PDUR_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define PDUR_VAR_INIT

#if (defined PDUR_VAR_POWER_ON_INIT) /* to prevent double definition */
#error PDUR_VAR_POWER_ON_INIT already defined
#endif /* if (defined PDUR_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define PDUR_VAR_POWER_ON_INIT

#if (defined PDUR_VAR_FAST_NO_INIT) /* to prevent double definition */
#error PDUR_VAR_FAST_NO_INIT already defined
#endif /* if (defined PDUR_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PDUR_VAR_FAST_NO_INIT

#if (defined PDUR_VAR_FAST_CLEARED) /* to prevent double definition */
#error PDUR_VAR_FAST_CLEARED already defined
#endif /* if (defined PDUR_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PDUR_VAR_FAST_CLEARED

#if (defined PDUR_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error PDUR_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined PDUR_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PDUR_VAR_FAST_POWER_ON_CLEARED

#if (defined PDUR_VAR_FAST_INIT) /* to prevent double definition */
#error PDUR_VAR_FAST_INIT already defined
#endif /* if (defined PDUR_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PDUR_VAR_FAST_INIT

#if (defined PDUR_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error PDUR_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined PDUR_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define PDUR_VAR_FAST_POWER_ON_INIT

#if (defined PDUR_VAR_SAVED_ZONE) /* to prevent double definition */
#error PDUR_VAR_SAVED_ZONE already defined
#endif /* if (defined PDUR_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define PDUR_VAR_SAVED_ZONE

#if (defined PDUR_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error PDUR_VAR_SLOW_NO_INIT already defined
#endif /* if (defined PDUR_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define PDUR_VAR_SLOW_NO_INIT

#if (defined PDUR_VAR_SLOW_CLEARED) /* to prevent double definition */
#error PDUR_VAR_SLOW_CLEARED already defined
#endif /* if (defined PDUR_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define PDUR_VAR_SLOW_CLEARED

#if (defined PDUR_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error PDUR_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined PDUR_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define PDUR_VAR_SLOW_POWER_ON_CLEARED

#if (defined PDUR_VAR_SLOW_INIT) /* to prevent double definition */
#error PDUR_VAR_SLOW_INIT already defined
#endif /* if (defined PDUR_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define PDUR_VAR_SLOW_INIT

#if (defined PDUR_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error PDUR_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined PDUR_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define PDUR_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module RTE]-------------------*/

#if (defined RTE_CODE) /* to prevent double definition */
#error RTE_CODE already defined
#endif /* if (defined RTE_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define RTE_CODE

#if (defined RTE_CODE_FAST) /* to prevent double definition */
#error RTE_CODE_FAST already defined
#endif /* if (defined RTE_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define RTE_CODE_FAST

#if (defined RTE_CODE_SLOW) /* to prevent double definition */
#error RTE_CODE_SLOW already defined
#endif /* if (defined RTE_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define RTE_CODE_SLOW

#if (defined RTE_CONFIG_DATA) /* to prevent double definition */
#error RTE_CONFIG_DATA already defined
#endif /* if (defined RTE_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define RTE_CONFIG_DATA

#if (defined RTE_CONST) /* to prevent double definition */
#error RTE_CONST already defined
#endif /* if (defined RTE_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define RTE_CONST

#if (defined RTE_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error RTE_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined RTE_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define RTE_CONST_SAVED_RECOVERY_ZONE

#if (defined RTE_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error RTE_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined RTE_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define RTE_INTERNAL_VAR_NO_INIT

#if (defined RTE_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error RTE_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined RTE_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define RTE_INTERNAL_VAR_CLEARED

#if (defined RTE_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error RTE_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined RTE_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define RTE_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined RTE_INTERNAL_VAR_INIT) /* to prevent double definition */
#error RTE_INTERNAL_VAR_INIT already defined
#endif /* if (defined RTE_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define RTE_INTERNAL_VAR_INIT

#if (defined RTE_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error RTE_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined RTE_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define RTE_INTERNAL_VAR_POWER_ON_INIT

#if (defined RTE_CALIB) /* to prevent double definition */
#error RTE_CALIB already defined
#endif /* if (defined RTE_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define RTE_CALIB

#if (defined RTE_APPL_DATA) /* to prevent double definition */
#error RTE_APPL_DATA already defined
#endif /* if (defined RTE_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define RTE_APPL_DATA

#if (defined RTE_APPL_CONST) /* to prevent double definition */
#error RTE_APPL_CONST already defined
#endif /* if (defined RTE_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define RTE_APPL_CONST

#if (defined RTE_VAR_NO_INIT) /* to prevent double definition */
#error RTE_VAR_NO_INIT already defined
#endif /* if (defined RTE_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define RTE_VAR_NO_INIT

#if (defined RTE_VAR_CLEARED) /* to prevent double definition */
#error RTE_VAR_CLEARED already defined
#endif /* if (defined RTE_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define RTE_VAR_CLEARED

#if (defined RTE_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error RTE_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined RTE_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define RTE_VAR_POWER_ON_CLEARED

#if (defined RTE_VAR_INIT) /* to prevent double definition */
#error RTE_VAR_INIT already defined
#endif /* if (defined RTE_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define RTE_VAR_INIT

#if (defined RTE_VAR_POWER_ON_INIT) /* to prevent double definition */
#error RTE_VAR_POWER_ON_INIT already defined
#endif /* if (defined RTE_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define RTE_VAR_POWER_ON_INIT

#if (defined RTE_VAR_FAST_NO_INIT) /* to prevent double definition */
#error RTE_VAR_FAST_NO_INIT already defined
#endif /* if (defined RTE_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTE_VAR_FAST_NO_INIT

#if (defined RTE_VAR_FAST_CLEARED) /* to prevent double definition */
#error RTE_VAR_FAST_CLEARED already defined
#endif /* if (defined RTE_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTE_VAR_FAST_CLEARED

#if (defined RTE_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error RTE_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined RTE_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTE_VAR_FAST_POWER_ON_CLEARED

#if (defined RTE_VAR_FAST_INIT) /* to prevent double definition */
#error RTE_VAR_FAST_INIT already defined
#endif /* if (defined RTE_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTE_VAR_FAST_INIT

#if (defined RTE_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error RTE_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined RTE_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTE_VAR_FAST_POWER_ON_INIT

#if (defined RTE_VAR_SAVED_ZONE) /* to prevent double definition */
#error RTE_VAR_SAVED_ZONE already defined
#endif /* if (defined RTE_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define RTE_VAR_SAVED_ZONE

#if (defined RTE_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error RTE_VAR_SLOW_NO_INIT already defined
#endif /* if (defined RTE_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define RTE_VAR_SLOW_NO_INIT

#if (defined RTE_VAR_SLOW_CLEARED) /* to prevent double definition */
#error RTE_VAR_SLOW_CLEARED already defined
#endif /* if (defined RTE_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define RTE_VAR_SLOW_CLEARED

#if (defined RTE_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error RTE_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined RTE_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define RTE_VAR_SLOW_POWER_ON_CLEARED

#if (defined RTE_VAR_SLOW_INIT) /* to prevent double definition */
#error RTE_VAR_SLOW_INIT already defined
#endif /* if (defined RTE_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define RTE_VAR_SLOW_INIT

#if (defined RTE_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error RTE_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined RTE_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define RTE_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module WDGIF]-------------------*/

#if (defined WDGIF_CODE) /* to prevent double definition */
#error WDGIF_CODE already defined
#endif /* if (defined WDGIF_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define WDGIF_CODE

#if (defined WDGIF_CODE_FAST) /* to prevent double definition */
#error WDGIF_CODE_FAST already defined
#endif /* if (defined WDGIF_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define WDGIF_CODE_FAST

#if (defined WDGIF_CODE_SLOW) /* to prevent double definition */
#error WDGIF_CODE_SLOW already defined
#endif /* if (defined WDGIF_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define WDGIF_CODE_SLOW

#if (defined WDGIF_CONFIG_DATA) /* to prevent double definition */
#error WDGIF_CONFIG_DATA already defined
#endif /* if (defined WDGIF_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define WDGIF_CONFIG_DATA

#if (defined WDGIF_CONST) /* to prevent double definition */
#error WDGIF_CONST already defined
#endif /* if (defined WDGIF_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define WDGIF_CONST

#if (defined WDGIF_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error WDGIF_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined WDGIF_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define WDGIF_CONST_SAVED_RECOVERY_ZONE

#if (defined WDGIF_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error WDGIF_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined WDGIF_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define WDGIF_INTERNAL_VAR_NO_INIT

#if (defined WDGIF_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error WDGIF_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined WDGIF_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define WDGIF_INTERNAL_VAR_CLEARED

#if (defined WDGIF_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGIF_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined WDGIF_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define WDGIF_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined WDGIF_INTERNAL_VAR_INIT) /* to prevent double definition */
#error WDGIF_INTERNAL_VAR_INIT already defined
#endif /* if (defined WDGIF_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define WDGIF_INTERNAL_VAR_INIT

#if (defined WDGIF_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error WDGIF_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined WDGIF_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define WDGIF_INTERNAL_VAR_POWER_ON_INIT

#if (defined WDGIF_CALIB) /* to prevent double definition */
#error WDGIF_CALIB already defined
#endif /* if (defined WDGIF_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define WDGIF_CALIB

#if (defined WDGIF_APPL_DATA) /* to prevent double definition */
#error WDGIF_APPL_DATA already defined
#endif /* if (defined WDGIF_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define WDGIF_APPL_DATA

#if (defined WDGIF_APPL_CONST) /* to prevent double definition */
#error WDGIF_APPL_CONST already defined
#endif /* if (defined WDGIF_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define WDGIF_APPL_CONST

#if (defined WDGIF_VAR_NO_INIT) /* to prevent double definition */
#error WDGIF_VAR_NO_INIT already defined
#endif /* if (defined WDGIF_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define WDGIF_VAR_NO_INIT

#if (defined WDGIF_VAR_CLEARED) /* to prevent double definition */
#error WDGIF_VAR_CLEARED already defined
#endif /* if (defined WDGIF_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define WDGIF_VAR_CLEARED

#if (defined WDGIF_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGIF_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined WDGIF_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define WDGIF_VAR_POWER_ON_CLEARED

#if (defined WDGIF_VAR_INIT) /* to prevent double definition */
#error WDGIF_VAR_INIT already defined
#endif /* if (defined WDGIF_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define WDGIF_VAR_INIT

#if (defined WDGIF_VAR_POWER_ON_INIT) /* to prevent double definition */
#error WDGIF_VAR_POWER_ON_INIT already defined
#endif /* if (defined WDGIF_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define WDGIF_VAR_POWER_ON_INIT

#if (defined WDGIF_VAR_FAST_NO_INIT) /* to prevent double definition */
#error WDGIF_VAR_FAST_NO_INIT already defined
#endif /* if (defined WDGIF_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGIF_VAR_FAST_NO_INIT

#if (defined WDGIF_VAR_FAST_CLEARED) /* to prevent double definition */
#error WDGIF_VAR_FAST_CLEARED already defined
#endif /* if (defined WDGIF_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGIF_VAR_FAST_CLEARED

#if (defined WDGIF_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGIF_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined WDGIF_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGIF_VAR_FAST_POWER_ON_CLEARED

#if (defined WDGIF_VAR_FAST_INIT) /* to prevent double definition */
#error WDGIF_VAR_FAST_INIT already defined
#endif /* if (defined WDGIF_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGIF_VAR_FAST_INIT

#if (defined WDGIF_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error WDGIF_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined WDGIF_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGIF_VAR_FAST_POWER_ON_INIT

#if (defined WDGIF_VAR_SAVED_ZONE) /* to prevent double definition */
#error WDGIF_VAR_SAVED_ZONE already defined
#endif /* if (defined WDGIF_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define WDGIF_VAR_SAVED_ZONE

#if (defined WDGIF_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error WDGIF_VAR_SLOW_NO_INIT already defined
#endif /* if (defined WDGIF_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define WDGIF_VAR_SLOW_NO_INIT

#if (defined WDGIF_VAR_SLOW_CLEARED) /* to prevent double definition */
#error WDGIF_VAR_SLOW_CLEARED already defined
#endif /* if (defined WDGIF_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define WDGIF_VAR_SLOW_CLEARED

#if (defined WDGIF_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGIF_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined WDGIF_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define WDGIF_VAR_SLOW_POWER_ON_CLEARED

#if (defined WDGIF_VAR_SLOW_INIT) /* to prevent double definition */
#error WDGIF_VAR_SLOW_INIT already defined
#endif /* if (defined WDGIF_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define WDGIF_VAR_SLOW_INIT

#if (defined WDGIF_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error WDGIF_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined WDGIF_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define WDGIF_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module WDGM]-------------------*/

#if (defined WDGM_CODE) /* to prevent double definition */
#error WDGM_CODE already defined
#endif /* if (defined WDGM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define WDGM_CODE

#if (defined WDGM_CODE_FAST) /* to prevent double definition */
#error WDGM_CODE_FAST already defined
#endif /* if (defined WDGM_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define WDGM_CODE_FAST

#if (defined WDGM_CODE_SLOW) /* to prevent double definition */
#error WDGM_CODE_SLOW already defined
#endif /* if (defined WDGM_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define WDGM_CODE_SLOW

#if (defined WDGM_CONFIG_DATA) /* to prevent double definition */
#error WDGM_CONFIG_DATA already defined
#endif /* if (defined WDGM_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define WDGM_CONFIG_DATA

#if (defined WDGM_CONST) /* to prevent double definition */
#error WDGM_CONST already defined
#endif /* if (defined WDGM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define WDGM_CONST

#if (defined WDGM_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error WDGM_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined WDGM_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define WDGM_CONST_SAVED_RECOVERY_ZONE

#if (defined WDGM_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error WDGM_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined WDGM_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define WDGM_INTERNAL_VAR_NO_INIT

#if (defined WDGM_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error WDGM_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined WDGM_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define WDGM_INTERNAL_VAR_CLEARED

#if (defined WDGM_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGM_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined WDGM_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define WDGM_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined WDGM_INTERNAL_VAR_INIT) /* to prevent double definition */
#error WDGM_INTERNAL_VAR_INIT already defined
#endif /* if (defined WDGM_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define WDGM_INTERNAL_VAR_INIT

#if (defined WDGM_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error WDGM_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined WDGM_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define WDGM_INTERNAL_VAR_POWER_ON_INIT

#if (defined WDGM_CALIB) /* to prevent double definition */
#error WDGM_CALIB already defined
#endif /* if (defined WDGM_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define WDGM_CALIB

#if (defined WDGM_APPL_DATA) /* to prevent double definition */
#error WDGM_APPL_DATA already defined
#endif /* if (defined WDGM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define WDGM_APPL_DATA

#if (defined WDGM_APPL_CONST) /* to prevent double definition */
#error WDGM_APPL_CONST already defined
#endif /* if (defined WDGM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define WDGM_APPL_CONST

#if (defined WDGM_VAR_NO_INIT) /* to prevent double definition */
#error WDGM_VAR_NO_INIT already defined
#endif /* if (defined WDGM_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define WDGM_VAR_NO_INIT

#if (defined WDGM_VAR_CLEARED) /* to prevent double definition */
#error WDGM_VAR_CLEARED already defined
#endif /* if (defined WDGM_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define WDGM_VAR_CLEARED

#if (defined WDGM_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGM_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined WDGM_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define WDGM_VAR_POWER_ON_CLEARED

#if (defined WDGM_VAR_INIT) /* to prevent double definition */
#error WDGM_VAR_INIT already defined
#endif /* if (defined WDGM_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define WDGM_VAR_INIT

#if (defined WDGM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error WDGM_VAR_POWER_ON_INIT already defined
#endif /* if (defined WDGM_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define WDGM_VAR_POWER_ON_INIT

#if (defined WDGM_VAR_FAST_NO_INIT) /* to prevent double definition */
#error WDGM_VAR_FAST_NO_INIT already defined
#endif /* if (defined WDGM_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGM_VAR_FAST_NO_INIT

#if (defined WDGM_VAR_FAST_CLEARED) /* to prevent double definition */
#error WDGM_VAR_FAST_CLEARED already defined
#endif /* if (defined WDGM_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGM_VAR_FAST_CLEARED

#if (defined WDGM_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGM_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined WDGM_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGM_VAR_FAST_POWER_ON_CLEARED

#if (defined WDGM_VAR_FAST_INIT) /* to prevent double definition */
#error WDGM_VAR_FAST_INIT already defined
#endif /* if (defined WDGM_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGM_VAR_FAST_INIT

#if (defined WDGM_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error WDGM_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined WDGM_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define WDGM_VAR_FAST_POWER_ON_INIT

#if (defined WDGM_VAR_SAVED_ZONE) /* to prevent double definition */
#error WDGM_VAR_SAVED_ZONE already defined
#endif /* if (defined WDGM_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define WDGM_VAR_SAVED_ZONE

#if (defined WDGM_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error WDGM_VAR_SLOW_NO_INIT already defined
#endif /* if (defined WDGM_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define WDGM_VAR_SLOW_NO_INIT

#if (defined WDGM_VAR_SLOW_CLEARED) /* to prevent double definition */
#error WDGM_VAR_SLOW_CLEARED already defined
#endif /* if (defined WDGM_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define WDGM_VAR_SLOW_CLEARED

#if (defined WDGM_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error WDGM_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined WDGM_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define WDGM_VAR_SLOW_POWER_ON_CLEARED

#if (defined WDGM_VAR_SLOW_INIT) /* to prevent double definition */
#error WDGM_VAR_SLOW_INIT already defined
#endif /* if (defined WDGM_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define WDGM_VAR_SLOW_INIT

#if (defined WDGM_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error WDGM_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined WDGM_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define WDGM_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module XCP]-------------------*/

#if (defined XCP_CODE) /* to prevent double definition */
#error XCP_CODE already defined
#endif /* if (defined XCP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define XCP_CODE

#if (defined XCP_CODE_FAST) /* to prevent double definition */
#error XCP_CODE_FAST already defined
#endif /* if (defined XCP_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define XCP_CODE_FAST

#if (defined XCP_CODE_SLOW) /* to prevent double definition */
#error XCP_CODE_SLOW already defined
#endif /* if (defined XCP_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define XCP_CODE_SLOW

#if (defined XCP_CONFIG_DATA) /* to prevent double definition */
#error XCP_CONFIG_DATA already defined
#endif /* if (defined XCP_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define XCP_CONFIG_DATA

#if (defined XCP_CONST) /* to prevent double definition */
#error XCP_CONST already defined
#endif /* if (defined XCP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define XCP_CONST

#if (defined XCP_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error XCP_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined XCP_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define XCP_CONST_SAVED_RECOVERY_ZONE

#if (defined XCP_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error XCP_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined XCP_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define XCP_INTERNAL_VAR_NO_INIT

#if (defined XCP_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error XCP_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined XCP_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define XCP_INTERNAL_VAR_CLEARED

#if (defined XCP_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error XCP_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined XCP_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define XCP_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined XCP_INTERNAL_VAR_INIT) /* to prevent double definition */
#error XCP_INTERNAL_VAR_INIT already defined
#endif /* if (defined XCP_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define XCP_INTERNAL_VAR_INIT

#if (defined XCP_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error XCP_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined XCP_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define XCP_INTERNAL_VAR_POWER_ON_INIT

#if (defined XCP_CALIB) /* to prevent double definition */
#error XCP_CALIB already defined
#endif /* if (defined XCP_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define XCP_CALIB

#if (defined XCP_APPL_DATA) /* to prevent double definition */
#error XCP_APPL_DATA already defined
#endif /* if (defined XCP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define XCP_APPL_DATA

#if (defined XCP_APPL_CONST) /* to prevent double definition */
#error XCP_APPL_CONST already defined
#endif /* if (defined XCP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define XCP_APPL_CONST

#if (defined XCP_VAR_NO_INIT) /* to prevent double definition */
#error XCP_VAR_NO_INIT already defined
#endif /* if (defined XCP_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define XCP_VAR_NO_INIT

#if (defined XCP_VAR_CLEARED) /* to prevent double definition */
#error XCP_VAR_CLEARED already defined
#endif /* if (defined XCP_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define XCP_VAR_CLEARED

#if (defined XCP_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error XCP_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined XCP_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define XCP_VAR_POWER_ON_CLEARED

#if (defined XCP_VAR_INIT) /* to prevent double definition */
#error XCP_VAR_INIT already defined
#endif /* if (defined XCP_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define XCP_VAR_INIT

#if (defined XCP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error XCP_VAR_POWER_ON_INIT already defined
#endif /* if (defined XCP_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define XCP_VAR_POWER_ON_INIT

#if (defined XCP_VAR_FAST_NO_INIT) /* to prevent double definition */
#error XCP_VAR_FAST_NO_INIT already defined
#endif /* if (defined XCP_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define XCP_VAR_FAST_NO_INIT

#if (defined XCP_VAR_FAST_CLEARED) /* to prevent double definition */
#error XCP_VAR_FAST_CLEARED already defined
#endif /* if (defined XCP_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define XCP_VAR_FAST_CLEARED

#if (defined XCP_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error XCP_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined XCP_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define XCP_VAR_FAST_POWER_ON_CLEARED

#if (defined XCP_VAR_FAST_INIT) /* to prevent double definition */
#error XCP_VAR_FAST_INIT already defined
#endif /* if (defined XCP_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define XCP_VAR_FAST_INIT

#if (defined XCP_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error XCP_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined XCP_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define XCP_VAR_FAST_POWER_ON_INIT

#if (defined XCP_VAR_SAVED_ZONE) /* to prevent double definition */
#error XCP_VAR_SAVED_ZONE already defined
#endif /* if (defined XCP_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define XCP_VAR_SAVED_ZONE

#if (defined XCP_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error XCP_VAR_SLOW_NO_INIT already defined
#endif /* if (defined XCP_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define XCP_VAR_SLOW_NO_INIT

#if (defined XCP_VAR_SLOW_CLEARED) /* to prevent double definition */
#error XCP_VAR_SLOW_CLEARED already defined
#endif /* if (defined XCP_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define XCP_VAR_SLOW_CLEARED

#if (defined XCP_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error XCP_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined XCP_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define XCP_VAR_SLOW_POWER_ON_CLEARED

#if (defined XCP_VAR_SLOW_INIT) /* to prevent double definition */
#error XCP_VAR_SLOW_INIT already defined
#endif /* if (defined XCP_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define XCP_VAR_SLOW_INIT

#if (defined XCP_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error XCP_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined XCP_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define XCP_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module I2C]-------------------*/

#if (defined I2C_CODE) /* to prevent double definition */
#error I2C_CODE already defined
#endif /* if (defined I2C_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define I2C_CODE

#if (defined I2C_CODE_FAST) /* to prevent double definition */
#error I2C_CODE_FAST already defined
#endif /* if (defined I2C_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define I2C_CODE_FAST

#if (defined I2C_CODE_SLOW) /* to prevent double definition */
#error I2C_CODE_SLOW already defined
#endif /* if (defined I2C_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define I2C_CODE_SLOW

#if (defined I2C_CONFIG_DATA) /* to prevent double definition */
#error I2C_CONFIG_DATA already defined
#endif /* if (defined I2C_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define I2C_CONFIG_DATA

#if (defined I2C_CONST) /* to prevent double definition */
#error I2C_CONST already defined
#endif /* if (defined I2C_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define I2C_CONST

#if (defined I2C_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error I2C_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined I2C_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define I2C_CONST_SAVED_RECOVERY_ZONE

#if (defined I2C_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error I2C_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined I2C_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define I2C_INTERNAL_VAR_NO_INIT

#if (defined I2C_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error I2C_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined I2C_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define I2C_INTERNAL_VAR_CLEARED

#if (defined I2C_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error I2C_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined I2C_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define I2C_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined I2C_INTERNAL_VAR_INIT) /* to prevent double definition */
#error I2C_INTERNAL_VAR_INIT already defined
#endif /* if (defined I2C_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define I2C_INTERNAL_VAR_INIT

#if (defined I2C_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error I2C_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined I2C_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define I2C_INTERNAL_VAR_POWER_ON_INIT

#if (defined I2C_CALIB) /* to prevent double definition */
#error I2C_CALIB already defined
#endif /* if (defined I2C_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define I2C_CALIB

#if (defined I2C_APPL_DATA) /* to prevent double definition */
#error I2C_APPL_DATA already defined
#endif /* if (defined I2C_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define I2C_APPL_DATA

#if (defined I2C_APPL_CONST) /* to prevent double definition */
#error I2C_APPL_CONST already defined
#endif /* if (defined I2C_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define I2C_APPL_CONST

#if (defined I2C_VAR_NO_INIT) /* to prevent double definition */
#error I2C_VAR_NO_INIT already defined
#endif /* if (defined I2C_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define I2C_VAR_NO_INIT

#if (defined I2C_VAR_CLEARED) /* to prevent double definition */
#error I2C_VAR_CLEARED already defined
#endif /* if (defined I2C_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define I2C_VAR_CLEARED

#if (defined I2C_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error I2C_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined I2C_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define I2C_VAR_POWER_ON_CLEARED

#if (defined I2C_VAR_INIT) /* to prevent double definition */
#error I2C_VAR_INIT already defined
#endif /* if (defined I2C_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define I2C_VAR_INIT

#if (defined I2C_VAR_POWER_ON_INIT) /* to prevent double definition */
#error I2C_VAR_POWER_ON_INIT already defined
#endif /* if (defined I2C_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define I2C_VAR_POWER_ON_INIT

#if (defined I2C_VAR_FAST_NO_INIT) /* to prevent double definition */
#error I2C_VAR_FAST_NO_INIT already defined
#endif /* if (defined I2C_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define I2C_VAR_FAST_NO_INIT

#if (defined I2C_VAR_FAST_CLEARED) /* to prevent double definition */
#error I2C_VAR_FAST_CLEARED already defined
#endif /* if (defined I2C_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define I2C_VAR_FAST_CLEARED

#if (defined I2C_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error I2C_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined I2C_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define I2C_VAR_FAST_POWER_ON_CLEARED

#if (defined I2C_VAR_FAST_INIT) /* to prevent double definition */
#error I2C_VAR_FAST_INIT already defined
#endif /* if (defined I2C_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define I2C_VAR_FAST_INIT

#if (defined I2C_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error I2C_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined I2C_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define I2C_VAR_FAST_POWER_ON_INIT

#if (defined I2C_VAR_SAVED_ZONE) /* to prevent double definition */
#error I2C_VAR_SAVED_ZONE already defined
#endif /* if (defined I2C_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define I2C_VAR_SAVED_ZONE

#if (defined I2C_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error I2C_VAR_SLOW_NO_INIT already defined
#endif /* if (defined I2C_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define I2C_VAR_SLOW_NO_INIT

#if (defined I2C_VAR_SLOW_CLEARED) /* to prevent double definition */
#error I2C_VAR_SLOW_CLEARED already defined
#endif /* if (defined I2C_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define I2C_VAR_SLOW_CLEARED

#if (defined I2C_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error I2C_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined I2C_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define I2C_VAR_SLOW_POWER_ON_CLEARED

#if (defined I2C_VAR_SLOW_INIT) /* to prevent double definition */
#error I2C_VAR_SLOW_INIT already defined
#endif /* if (defined I2C_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define I2C_VAR_SLOW_INIT

#if (defined I2C_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error I2C_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined I2C_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define I2C_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module RTC]-------------------*/

#if (defined RTC_CODE) /* to prevent double definition */
#error RTC_CODE already defined
#endif /* if (defined RTC_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define RTC_CODE

#if (defined RTC_CODE_FAST) /* to prevent double definition */
#error RTC_CODE_FAST already defined
#endif /* if (defined RTC_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define RTC_CODE_FAST

#if (defined RTC_CODE_SLOW) /* to prevent double definition */
#error RTC_CODE_SLOW already defined
#endif /* if (defined RTC_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define RTC_CODE_SLOW

#if (defined RTC_CONFIG_DATA) /* to prevent double definition */
#error RTC_CONFIG_DATA already defined
#endif /* if (defined RTC_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define RTC_CONFIG_DATA

#if (defined RTC_CONST) /* to prevent double definition */
#error RTC_CONST already defined
#endif /* if (defined RTC_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define RTC_CONST

#if (defined RTC_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error RTC_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined RTC_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define RTC_CONST_SAVED_RECOVERY_ZONE

#if (defined RTC_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error RTC_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined RTC_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define RTC_INTERNAL_VAR_NO_INIT

#if (defined RTC_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error RTC_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined RTC_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define RTC_INTERNAL_VAR_CLEARED

#if (defined RTC_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error RTC_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined RTC_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define RTC_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined RTC_INTERNAL_VAR_INIT) /* to prevent double definition */
#error RTC_INTERNAL_VAR_INIT already defined
#endif /* if (defined RTC_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define RTC_INTERNAL_VAR_INIT

#if (defined RTC_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error RTC_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined RTC_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define RTC_INTERNAL_VAR_POWER_ON_INIT

#if (defined RTC_CALIB) /* to prevent double definition */
#error RTC_CALIB already defined
#endif /* if (defined RTC_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define RTC_CALIB

#if (defined RTC_APPL_DATA) /* to prevent double definition */
#error RTC_APPL_DATA already defined
#endif /* if (defined RTC_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define RTC_APPL_DATA

#if (defined RTC_APPL_CONST) /* to prevent double definition */
#error RTC_APPL_CONST already defined
#endif /* if (defined RTC_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define RTC_APPL_CONST

#if (defined RTC_VAR_NO_INIT) /* to prevent double definition */
#error RTC_VAR_NO_INIT already defined
#endif /* if (defined RTC_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define RTC_VAR_NO_INIT

#if (defined RTC_VAR_CLEARED) /* to prevent double definition */
#error RTC_VAR_CLEARED already defined
#endif /* if (defined RTC_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define RTC_VAR_CLEARED

#if (defined RTC_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error RTC_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined RTC_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define RTC_VAR_POWER_ON_CLEARED

#if (defined RTC_VAR_INIT) /* to prevent double definition */
#error RTC_VAR_INIT already defined
#endif /* if (defined RTC_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define RTC_VAR_INIT

#if (defined RTC_VAR_POWER_ON_INIT) /* to prevent double definition */
#error RTC_VAR_POWER_ON_INIT already defined
#endif /* if (defined RTC_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define RTC_VAR_POWER_ON_INIT

#if (defined RTC_VAR_FAST_NO_INIT) /* to prevent double definition */
#error RTC_VAR_FAST_NO_INIT already defined
#endif /* if (defined RTC_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTC_VAR_FAST_NO_INIT

#if (defined RTC_VAR_FAST_CLEARED) /* to prevent double definition */
#error RTC_VAR_FAST_CLEARED already defined
#endif /* if (defined RTC_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTC_VAR_FAST_CLEARED

#if (defined RTC_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error RTC_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined RTC_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTC_VAR_FAST_POWER_ON_CLEARED

#if (defined RTC_VAR_FAST_INIT) /* to prevent double definition */
#error RTC_VAR_FAST_INIT already defined
#endif /* if (defined RTC_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTC_VAR_FAST_INIT

#if (defined RTC_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error RTC_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined RTC_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define RTC_VAR_FAST_POWER_ON_INIT

#if (defined RTC_VAR_SAVED_ZONE) /* to prevent double definition */
#error RTC_VAR_SAVED_ZONE already defined
#endif /* if (defined RTC_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define RTC_VAR_SAVED_ZONE

#if (defined RTC_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error RTC_VAR_SLOW_NO_INIT already defined
#endif /* if (defined RTC_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define RTC_VAR_SLOW_NO_INIT

#if (defined RTC_VAR_SLOW_CLEARED) /* to prevent double definition */
#error RTC_VAR_SLOW_CLEARED already defined
#endif /* if (defined RTC_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define RTC_VAR_SLOW_CLEARED

#if (defined RTC_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error RTC_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined RTC_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define RTC_VAR_SLOW_POWER_ON_CLEARED

#if (defined RTC_VAR_SLOW_INIT) /* to prevent double definition */
#error RTC_VAR_SLOW_INIT already defined
#endif /* if (defined RTC_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define RTC_VAR_SLOW_INIT

#if (defined RTC_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error RTC_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined RTC_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define RTC_VAR_SLOW_POWER_ON_INIT

/*------------------[memory and pointer class of module UART]-------------------*/

#if (defined UART_CODE) /* to prevent double definition */
#error UART_CODE already defined
#endif /* if (defined UART_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define UART_CODE

#if (defined UART_CODE_FAST) /* to prevent double definition */
#error UART_CODE_FAST already defined
#endif /* if (defined UART_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define UART_CODE_FAST

#if (defined UART_CODE_SLOW) /* to prevent double definition */
#error UART_CODE_SLOW already defined
#endif /* if (defined UART_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define UART_CODE_SLOW

#if (defined UART_CONFIG_DATA) /* to prevent double definition */
#error UART_CONFIG_DATA already defined
#endif /* if (defined UART_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define UART_CONFIG_DATA

#if (defined UART_CONST) /* to prevent double definition */
#error UART_CONST already defined
#endif /* if (defined UART_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define UART_CONST

#if (defined UART_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error UART_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined UART_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define UART_CONST_SAVED_RECOVERY_ZONE

#if (defined UART_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error UART_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined UART_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define UART_INTERNAL_VAR_NO_INIT

#if (defined UART_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error UART_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined UART_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define UART_INTERNAL_VAR_CLEARED

#if (defined UART_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error UART_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined UART_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define UART_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined UART_INTERNAL_VAR_INIT) /* to prevent double definition */
#error UART_INTERNAL_VAR_INIT already defined
#endif /* if (defined UART_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define UART_INTERNAL_VAR_INIT

#if (defined UART_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error UART_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined UART_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define UART_INTERNAL_VAR_POWER_ON_INIT

#if (defined UART_CALIB) /* to prevent double definition */
#error UART_CALIB already defined
#endif /* if (defined UART_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define UART_CALIB

#if (defined UART_APPL_DATA) /* to prevent double definition */
#error UART_APPL_DATA already defined
#endif /* if (defined UART_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define UART_APPL_DATA

#if (defined UART_APPL_CONST) /* to prevent double definition */
#error UART_APPL_CONST already defined
#endif /* if (defined UART_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define UART_APPL_CONST

#if (defined UART_VAR_NO_INIT) /* to prevent double definition */
#error UART_VAR_NO_INIT already defined
#endif /* if (defined UART_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define UART_VAR_NO_INIT

#if (defined UART_VAR_CLEARED) /* to prevent double definition */
#error UART_VAR_CLEARED already defined
#endif /* if (defined UART_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define UART_VAR_CLEARED

#if (defined UART_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error UART_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined UART_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define UART_VAR_POWER_ON_CLEARED

#if (defined UART_VAR_INIT) /* to prevent double definition */
#error UART_VAR_INIT already defined
#endif /* if (defined UART_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define UART_VAR_INIT

#if (defined UART_VAR_POWER_ON_INIT) /* to prevent double definition */
#error UART_VAR_POWER_ON_INIT already defined
#endif /* if (defined UART_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define UART_VAR_POWER_ON_INIT

#if (defined UART_VAR_FAST_NO_INIT) /* to prevent double definition */
#error UART_VAR_FAST_NO_INIT already defined
#endif /* if (defined UART_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define UART_VAR_FAST_NO_INIT

#if (defined UART_VAR_FAST_CLEARED) /* to prevent double definition */
#error UART_VAR_FAST_CLEARED already defined
#endif /* if (defined UART_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define UART_VAR_FAST_CLEARED

#if (defined UART_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error UART_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined UART_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define UART_VAR_FAST_POWER_ON_CLEARED

#if (defined UART_VAR_FAST_INIT) /* to prevent double definition */
#error UART_VAR_FAST_INIT already defined
#endif /* if (defined UART_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define UART_VAR_FAST_INIT

#if (defined UART_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error UART_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined UART_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define UART_VAR_FAST_POWER_ON_INIT

#if (defined UART_VAR_SAVED_ZONE) /* to prevent double definition */
#error UART_VAR_SAVED_ZONE already defined
#endif /* if (defined UART_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define UART_VAR_SAVED_ZONE

#if (defined UART_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error UART_VAR_SLOW_NO_INIT already defined
#endif /* if (defined UART_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define UART_VAR_SLOW_NO_INIT

#if (defined UART_VAR_SLOW_CLEARED) /* to prevent double definition */
#error UART_VAR_SLOW_CLEARED already defined
#endif /* if (defined UART_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define UART_VAR_SLOW_CLEARED

#if (defined UART_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error UART_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined UART_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define UART_VAR_SLOW_POWER_ON_CLEARED

#if (defined UART_VAR_SLOW_INIT) /* to prevent double definition */
#error UART_VAR_SLOW_INIT already defined
#endif /* if (defined UART_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define UART_VAR_SLOW_INIT

#if (defined UART_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error UART_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined UART_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define UART_VAR_SLOW_POWER_ON_INIT
/*------------------[memory and pointer class of module VUART]-------------------*/

#if (defined VUART_CODE) /* to prevent double definition */
#error VUART_CODE already defined
#endif /* if (defined VUART_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define VUART_CODE

#if (defined VUART_CODE_FAST) /* to prevent double definition */
#error VUART_CODE_FAST already defined
#endif /* if (defined VUART_CODE_FAST) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into fast code memory segments. */
#define VUART_CODE_FAST

#if (defined VUART_CODE_SLOW) /* to prevent double definition */
#error VUART_CODE_SLOW already defined
#endif /* if (defined VUART_CODE_SLOW) */

/** \brief definition of the code memory class
 **
 ** To be used for code that shall go into slow code memory segments. */
#define VUART_CODE_SLOW

#if (defined VUART_CONFIG_DATA) /* to prevent double definition */
#error VUART_CONFIG_DATA already defined
#endif /* if (defined VUART_CONFIG_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for module configuration constants. */
#define VUART_CONFIG_DATA

#if (defined VUART_CONST) /* to prevent double definition */
#error VUART_CONST already defined
#endif /* if (defined VUART_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define VUART_CONST

#if (defined VUART_CONST_SAVED_RECOVERY_ZONE) /* to prevent double definition */
#error VUART_CONST_SAVED_RECOVERY_ZONE already defined
#endif /* if (defined VUART_CONST_SAVED_RECOVERY_ZONE) */

/** \brief definition of the constant memory class
 **
 ** To be used for ROM buffers of variables saved in non-volatile memory. */
#define VUART_CONST_SAVED_RECOVERY_ZONE

#if (defined VUART_INTERNAL_VAR_NO_INIT) /* to prevent double definition */
#error VUART_INTERNAL_VAR_NO_INIT already defined
#endif /* if (defined VUART_INTERNAL_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are never cleared and never initialized. */
#define VUART_INTERNAL_VAR_NO_INIT

#if (defined VUART_INTERNAL_VAR_CLEARED) /* to prevent double definition */
#error VUART_INTERNAL_VAR_CLEARED already defined
#endif /* if (defined VUART_INTERNAL_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero after every reset. */
#define VUART_INTERNAL_VAR_CLEARED

#if (defined VUART_INTERNAL_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error VUART_INTERNAL_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined VUART_INTERNAL_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are cleared to zero only after power on reset. */
#define VUART_INTERNAL_VAR_POWER_ON_CLEARED

#if (defined VUART_INTERNAL_VAR_INIT) /* to prevent double definition */
#error VUART_INTERNAL_VAR_INIT already defined
#endif /* if (defined VUART_INTERNAL_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values after every reset. */
#define VUART_INTERNAL_VAR_INIT

#if (defined VUART_INTERNAL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error VUART_INTERNAL_VAR_POWER_ON_INIT already defined
#endif /* if (defined VUART_INTERNAL_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for global or static variables which are accessible from a calibration
 ** tool, which are initialized with values only after power on reset. */
#define VUART_INTERNAL_VAR_POWER_ON_INIT

#if (defined VUART_CALIB) /* to prevent double definition */
#error VUART_CALIB already defined
#endif /* if (defined VUART_CALIB) */

/** \brief definition of the constant memory class
 **
 ** To be used for calibration constants. */
#define VUART_CALIB

#if (defined VUART_APPL_DATA) /* to prevent double definition */
#error VUART_APPL_DATA already defined
#endif /* if (defined VUART_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define VUART_APPL_DATA

#if (defined VUART_APPL_CONST) /* to prevent double definition */
#error VUART_APPL_CONST already defined
#endif /* if (defined VUART_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define VUART_APPL_CONST

#if (defined VUART_VAR_NO_INIT) /* to prevent double definition */
#error VUART_VAR_NO_INIT already defined
#endif /* if (defined VUART_VAR_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are never cleared and never
 ** initialized. */
#define VUART_VAR_NO_INIT

#if (defined VUART_VAR_CLEARED) /* to prevent double definition */
#error VUART_VAR_CLEARED already defined
#endif /* if (defined VUART_VAR_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero after
 ** every reset. */
#define VUART_VAR_CLEARED

#if (defined VUART_VAR_POWER_ON_CLEARED) /* to prevent double definition */
#error VUART_VAR_POWER_ON_CLEARED already defined
#endif /* if (defined VUART_VAR_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are cleared to zero only
 ** after power on reset.*/
#define VUART_VAR_POWER_ON_CLEARED

#if (defined VUART_VAR_INIT) /* to prevent double definition */
#error VUART_VAR_INIT already defined
#endif /* if (defined VUART_VAR_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** after every reset.*/
#define VUART_VAR_INIT

#if (defined VUART_VAR_POWER_ON_INIT) /* to prevent double definition */
#error VUART_VAR_POWER_ON_INIT already defined
#endif /* if (defined VUART_VAR_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables that are initialized with values
 ** only after power on reset.*/
#define VUART_VAR_POWER_ON_INIT

#if (defined VUART_VAR_FAST_NO_INIT) /* to prevent double definition */
#error VUART_VAR_FAST_NO_INIT already defined
#endif /* if (defined VUART_VAR_FAST_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are never cleared and never initialized.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define VUART_VAR_FAST_NO_INIT

#if (defined VUART_VAR_FAST_CLEARED) /* to prevent double definition */
#error VUART_VAR_FAST_CLEARED already defined
#endif /* if (defined VUART_VAR_FAST_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define VUART_VAR_FAST_CLEARED

#if (defined VUART_VAR_FAST_POWER_ON_CLEARED) /* to prevent double definition */
#error VUART_VAR_FAST_POWER_ON_CLEARED already defined
#endif /* if (defined VUART_VAR_FAST_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are cleared to zero only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define VUART_VAR_FAST_POWER_ON_CLEARED

#if (defined VUART_VAR_FAST_INIT) /* to prevent double definition */
#error VUART_VAR_FAST_INIT already defined
#endif /* if (defined VUART_VAR_FAST_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values after every reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define VUART_VAR_FAST_INIT

#if (defined VUART_VAR_FAST_POWER_ON_INIT) /* to prevent double definition */
#error VUART_VAR_FAST_POWER_ON_INIT already defined
#endif /* if (defined VUART_VAR_FAST_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all global or static variables	that have at least one of the
 ** following properties and are initialized with values only after power on reset.
 **   accessed bitwise
 **   frequently used
 **   high number of accesses in source code */
#define VUART_VAR_FAST_POWER_ON_INIT

#if (defined VUART_VAR_SAVED_ZONE) /* to prevent double definition */
#error VUART_VAR_SAVED_ZONE already defined
#endif /* if (defined VUART_VAR_SAVED_ZONE) */

/** \brief definition of the variable memory class
 **
 ** To be used for RAM buffers of variables saved oin non-volatile memory. */
#define VUART_VAR_SAVED_ZONE

#if (defined VUART_VAR_SLOW_NO_INIT) /* to prevent double definition */
#error VUART_VAR_SLOW_NO_INIT already defined
#endif /* if (defined VUART_VAR_SLOW_NO_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** never cleared and never initialized. */
#define VUART_VAR_SLOW_NO_INIT

#if (defined VUART_VAR_SLOW_CLEARED) /* to prevent double definition */
#error VUART_VAR_SLOW_CLEARED already defined
#endif /* if (defined VUART_VAR_SLOW_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero after every reset. */
#define VUART_VAR_SLOW_CLEARED

#if (defined VUART_VAR_SLOW_POWER_ON_CLEARED) /* to prevent double definition */
#error VUART_VAR_SLOW_POWER_ON_CLEARED already defined
#endif /* if (defined VUART_VAR_SLOW_POWER_ON_CLEARED) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** cleared to zero only after power on reset. */
#define VUART_VAR_SLOW_POWER_ON_CLEARED

#if (defined VUART_VAR_SLOW_INIT) /* to prevent double definition */
#error VUART_VAR_SLOW_INIT already defined
#endif /* if (defined VUART_VAR_SLOW_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values after every reset. */
#define VUART_VAR_SLOW_INIT

#if (defined VUART_VAR_SLOW_POWER_ON_INIT) /* to prevent double definition */
#error VUART_VAR_SLOW_POWER_ON_INIT already defined
#endif /* if (defined VUART_VAR_SLOW_POWER_ON_INIT) */

/** \brief definition of the variable memory class
 **
 ** To be used for all infrequently accessed global or static variables that are
 ** initialized with values only after power on reset. */
#define VUART_VAR_SLOW_POWER_ON_INIT
/*------------------[memory and pointer class of a module]-------------------*/

#if (defined AUTOSAR_COMSTACKDATA) /* to prevent double definition */
#error AUTOSAR_COMSTACKDATA already defined
#endif /* if (defined AUTOSAR_COMSTACKDATA) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define AUTOSAR_COMSTACKDATA

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined REGSPACE) /* to prevent double definition */
#error REGSPACE already defined
#endif /* if (defined REGSPACE) */

/** \brief definition of the pointer class for registers
 **
 ** To be used for code. */
#define REGSPACE

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CSM_VAR) /* to prevent double definition */
#error CSM_VAR already defined
#endif /* if (defined CSM_VAR) */

/** \brief definition of the pointer class for registers
 **
 ** To be used for code. */
#define CSM_VAR
#define CSM_CODE
#define CSM_VAR_NOINIT
#define CSM_VAR_FAST
#define CSM_VAR_INIT
#define CSM_VAR_NO_INIT
#define CSM_VAR_POWER_ON_INIT
#define CSM_VAR_CLEARED
#define CSM_VAR_POWER_ON_CLEARED
#define CSM_VAR_SLOW_INIT
#define CSM_VAR_SLOW_NO_INIT
#define CSM_VAR_SLOW_POWER_ON_INIT
#define CSM_VAR_SLOW_CLEARED
#define CSM_VAR_SLOW_POWER_ON_CLEARED
#define CSM_VAR_FAST_INIT
#define CSM_VAR_FAST_NO_INIT
#define CSM_VAR_FAST_POWER_ON_INIT
#define CSM_VAR_FAST_CLEARED
#define CSM_VAR_FAST_POWER_ON_CLEARED
#define CSM_INTERNAL_VAR_INIT
#define CSM_INTERNAL_VAR_NO_INIT
#define CSM_INTERNAL_VAR_POWER_ON_INIT
#define CSM_INTERNAL_VAR_CLEARED
#define CSM_VAR_SAVED_ZONE8
#define CSM_VAR_SAVED_ZONE16
#define CSM_VAR_SAVED_ZONE32
#define CSM_APPL_CODE
#define CSM_APPL_CONST
#define CSM_APPL_DATA
#define CSM_CONFIG_DATA
#define CSM_CONST
#define CSM_CALLOUT_CODE

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined KEYM_VAR) /* to prevent double definition */
#error KEYM_VAR already defined
#endif /* if (defined REGSPACE) */

/** \brief definition of the pointer class for registers
 **
 ** To be used for code. */
#define KEYM_VAR
#define KEYM_CODE
#define KEYM_VAR_NOINIT
#define KEYM_VAR_FAST
#define KEYM_VAR_INIT
#define KEYM_VAR_NO_INIT
#define KEYM_VAR_POWER_ON_INIT
#define KEYM_VAR_CLEARED
#define KEYM_VAR_POWER_ON_CLEARED
#define KEYM_VAR_SLOW_INIT
#define KEYM_VAR_SLOW_NO_INIT
#define KEYM_VAR_SLOW_POWER_ON_INIT
#define KEYM_VAR_SLOW_CLEARED
#define KEYM_VAR_SLOW_POWER_ON_CLEARED
#define KEYM_VAR_FAST_INIT
#define KEYM_VAR_FAST_NO_INIT
#define KEYM_VAR_FAST_POWER_ON_INIT
#define KEYM_VAR_FAST_CLEARED
#define KEYM_VAR_FAST_POWER_ON_CLEARED
#define KEYM_INTERNAL_VAR_INIT
#define KEYM_INTERNAL_VAR_NO_INIT
#define KEYM_INTERNAL_VAR_POWER_ON_INIT
#define KEYM_INTERNAL_VAR_CLEARED
#define KEYM_VAR_SAVED_ZONE8
#define KEYM_VAR_SAVED_ZONE16
#define KEYM_VAR_SAVED_ZONE32
#define KEYM_APPL_CODE
#define KEYM_APPL_CONST
#define KEYM_APPL_DATA
#define KEYM_CONFIG_DATA
#define KEYM_CONST

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined SECOC_VAR) /* to prevent double definition */
#error SECOC_VAR already defined
#endif /* if (defined SECOC_VAR) */

/** \brief definition of the pointer class for registers
 **
 ** To be used for code. */
#define SECOC_VAR
#define SECOC_CODE
#define SECOC_VAR_NOINIT
#define SECOC_VAR_FAST
#define SECOC_VAR_INIT
#define SECOC_VAR_NO_INIT
#define SECOC_VAR_POWER_ON_INIT
#define SECOC_VAR_CLEARED
#define SECOC_VAR_POWER_ON_CLEARED
#define SECOC_VAR_SLOW_INIT
#define SECOC_VAR_SLOW_NO_INIT
#define SECOC_VAR_SLOW_POWER_ON_INIT
#define SECOC_VAR_SLOW_CLEARED
#define SECOC_VAR_SLOW_POWER_ON_CLEARED
#define SECOC_VAR_FAST_INIT
#define SECOC_VAR_FAST_NO_INIT
#define SECOC_VAR_FAST_POWER_ON_INIT
#define SECOC_VAR_FAST_CLEARED
#define SECOC_VAR_FAST_POWER_ON_CLEARED
#define SECOC_INTERNAL_VAR_INIT
#define SECOC_INTERNAL_VAR_NO_INIT
#define SECOC_INTERNAL_VAR_POWER_ON_INIT
#define SECOC_INTERNAL_VAR_CLEARED
#define SECOC_VAR_SAVED_ZONE8
#define SECOC_VAR_SAVED_ZONE16
#define SECOC_VAR_SAVED_ZONE32
#define SECOC_APPL_CODE
#define SECOC_APPL_CONST
#define SECOC_APPL_DATA
#define SECOC_CONFIG_DATA
#define SECOC_CONST
#define SECOC_CALLOUT_CODE

/*------------------[memory and pointer class of a module]-------------------*/
#if (defined CRYPTO_76_HAESWLIB_CODE) /* to prevent double definition */
#error CRYPTO_76_HAESWLIB_CODE already defined
#endif /* if (defined REGSPACE) */

/** \brief definition of the pointer class for registers
 **
 ** To be used for code. */
#define CRYPTO_76_HAESWLIB_CODE                /* API functions               */
#define CRYPTO_76_HAESWLIB_VAR_POWER_ON_INIT
#define CRYPTO_76_HAESWLIB_VAR_NOINIT
#define CRYPTO_76_HAESWLIB_VAR_CLEARED
#define CRYPTO_76_HAESWLIB_CONST
#define CRYPTO_76_HAESWLIB_VAR_INIT
#define CRYPTO_76_HAESWLIB_APPL_DATA /* Applications' RAM Data */

/*------------------[memory and pointer class of a module]-------------------*/
#if (defined CRYIF_CODE) /* to prevent double definition */
#error CRYIF_CODE already defined
#endif /* if (defined REGSPACE) */

/** \brief definition of the pointer class for registers
 **
 ** To be used for code. */
#define CRYIF_CODE                /* API functions                        */
#define CRYIF_APPL_DATA           /* Applications' RAM Data            */
#define CRYIF_APPL_CONST          /* Applications' ROM Data            */
#define CRYIF_VAR_CLEARED         /* Data which is initialized with ZERO */
#define CRYIF_CONFIG_DATA         /* Data segment for module configuration */

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#endif /* ifndef COMPILER_CFG_H */
/*==================[end of file]============================================*/
