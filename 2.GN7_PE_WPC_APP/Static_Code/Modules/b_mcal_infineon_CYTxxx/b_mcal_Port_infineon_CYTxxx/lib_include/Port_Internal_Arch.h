#ifndef PORT_INTERNAL_ARCH_H
#define PORT_INTERNAL_ARCH_H

/** \brief AUTOSAR Port Port Driver
 **
 ** This file define interface of internal architecture function of Port driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Port.h>

/*==================[macros]=================================================*/
/* Mask and Shift value of HSIOM.AMUX_SPLIT_CTL register */
#define PORT_HSIOM_AMUX_BUSA_SL_MASK            0x00000001U
#define PORT_HSIOM_AMUX_BUSA_SR_MASK            0x00000002U
#define PORT_HSIOM_AMUX_BUSA_S0_MASK            0x00000004U
#define PORT_HSIOM_AMUX_BUSB_SL_MASK            0x00000010U
#define PORT_HSIOM_AMUX_BUSB_SR_MASK            0x00000020U
#define PORT_HSIOM_AMUX_BUSB_S0_MASK            0x00000040U
#define PORT_HSIOM_AMUX_BUSA_SR_SHIFT           1U
#define PORT_HSIOM_AMUX_BUSA_S0_SHIFT           2U
#define PORT_HSIOM_AMUX_BUSB_SL_SHIFT           4U
#define PORT_HSIOM_AMUX_BUSB_SR_SHIFT           5U
#define PORT_HSIOM_AMUX_BUSB_S0_SHIFT           6U

/* Mask and Shift value of HSIOM.PORT_SEL register */
#define PORT_HSIOM_PORT_SEL_MASK                0x0000001FU
#define PORT_HSIOM_PORT_SEL_PIN_SHIFT           8U

/* Mask and Shift value of SMARTIO.CTL register */
#define PORT_SMARTIO_CTL_BYPASS_MASK            0x00000001U
#define PORT_SMARTIO_CTL_CLOCK_SRC_MASK         0x0000001FU
#define PORT_SMARTIO_CTL_CLOCK_SRC_SHIFT        8U
#define PORT_SMARTIO_CTL_HLD_OVR_MASK           0x00000001U
#define PORT_SMARTIO_CTL_HLD_OVR_SHIFT          24U
#define PORT_SMARTIO_CTL_PIPELINE_EN_MASK       0x00000001U
#define PORT_SMARTIO_CTL_PIPELINE_EN_SHIFT      25U
#define PORT_SMARTIO_CTL_ENABLED_SHIFT          31U

/* Mask and Shift value of SMARTIO.SYNC_CTL register */
#define PORT_SMARTIO_SYNC_CTL_IO_EN_MASK        0x00000001U
#define PORT_SMARTIO_SYNC_CTL_CHIP_EN_MASK      0x00000001U
#define PORT_SMARTIO_SYNC_CTL_CHIP_EN_SHIFT     8U

/* Mask and Shift value of SMARTIO.LUT_SEL register */
#define PORT_SMARTIO_LUT_TR_SEL_MASK            0x0000000FU
#define PORT_SMARTIO_LUT_TR1_SEL_SHIFT          8U
#define PORT_SMARTIO_LUT_TR2_SEL_SHIFT          16U

/* Mask and Shift value of SMARTIO.LUT_CTL register */
#define PORT_SMARTIO_LUT_CTL_LUT_MASK           0x000000FFU
#define PORT_SMARTIO_LUT_CTL_LUT_OPC_MASK       0x00000003U
#define PORT_SMARTIO_LUT_CTL_LUT_OPC_SHIFT      8U

/* Mask and Shift value of SMARTIO.DU_SEL register */
#define PORT_SMARTIO_DU_SEL_TR_SEL_MASK         0x0000000FU
#define PORT_SMARTIO_DU_SEL_TR1_SEL_SHIFT       8U
#define PORT_SMARTIO_DU_SEL_TR2_SEL_SHIFT       16U
#define PORT_SMARTIO_DU_SEL_DATA_SEL_MASK       0x00000003U
#define PORT_SMARTIO_DU_SEL_DATA0_SEL_SHIFT     24U
#define PORT_SMARTIO_DU_SEL_DATA1_SEL_SHIFT     28U

/* Mask and Shift value of SMARTIO.DU_CTL register */
#define PORT_SMARTIO_DU_CTL_DU_SIZE_MASK        0x00000007U
#define PORT_SMARTIO_DU_CTL_DU_OPC_MASK         0x0000000FU
#define PORT_SMARTIO_DU_CTL_DU_OPC_SHIFT        8U

/* Mask and Shift value of SMARTIO.DATA register */
#define PORT_SMARTIO_DU_DATA_DATA_MASK          0x000000FFU

/* Mask and Shift value of GPIO_PRT.CFG register */
#define PORT_GPIO_CFG_DRIVEMODE_MASK            0x00000007U
#define PORT_GPIO_CFG_IN_EN_MASK                0x00000001U
#define PORT_GPIO_CFG_IN_EN_SHIFT               3U
#define PORT_GPIO_CFG_PIN_SHIFT                 4U

/* Mask and Shift value of GPIO_PRT.CFG_IN register */
#define PORT_GPIO_CFG_IN_VTRIP_SEL_MASK         0x00000001U

/* Mask and Shift value of GPIO_PRT.CFG_OUT register */
#define PORT_GPIO_CFG_OUT_SLOW_MASK             0x00000001U
#define PORT_GPIO_CFG_OUT_DRIVE_SEL_MASK        0x00000003U
#define PORT_GPIO_CFG_OUT_DRIVE_SEL_SHIFT       16U
#define PORT_GPIO_CFG_OUT_DRIVE_SEL_PIN_SHIFT   2U

/* Mask and Shift value of GPIO_PRT.CFG_SIO register */
#define PORT_GPIO_CFG_SIO_VREG_EN_MASK          0x00000001U
#define PORT_GPIO_CFG_SIO_IBUF_VTRIP_SEL_MASK   0x00000003U
#define PORT_GPIO_CFG_SIO_IBUF_VTRIP_SEL_SHIFT  1U
#define PORT_GPIO_CFG_SIO_VREF_SEL_MASK         0x00000003U
#define PORT_GPIO_CFG_SIO_VREF_SEL_SHIFT        3U
#define PORT_GPIO_CFG_SIO_VOH_SEL_MASK          0x00000007U
#define PORT_GPIO_CFG_SIO_VOH_SEL_SHIFT         5U
#define PORT_GPIO_CFG_SIO_PINS_SHIFT            8U

/* Mask and Shift value of GPIO_PRT.DFT_SIO register */
#define PORT_GPIO_DFT_SIO_DFT_REFGEN_MASK       0x00000001U

/* Mask and Shift value of GPIO_PRT.CFG_IN_GPIO5V register */
#define PORT_GPIO_CFG_IN_GPIO5V_MASK            0x00000001U

/* Mask and Shift value of GPIO_PRT.CFG_OUT2 register */
#define PORT_GPIO_CFG_OUT2_DS_TRIM_MASK         0x00000007U
#define PORT_GPIO_CFG_OUT2_DS_TRIM_SHIFT        3U

/* Mask and Shift value of GPIO_PRT.CFG_SLEW_EXT register */
#define PORT_GPIO_CFG_SLEW_EXT_SLEW_MASK        0x00000007U
#define PORT_GPIO_CFG_SLEW_EXT_SLEW_SHIFT       4U

/* Mask and Shift value of GPIO_PRT.CFG_DRIVE_EXT register */
#define PORT_GPIO_CFG_DRIVE_EXT_DRIVE_SEL_EXT_MASK  0x0000001FU
#define PORT_GPIO_CFG_DRIVE_EXT_DRIVE_SEL_EXT_SHIFT 8U

/* Mask and Shift value of TR_CMD register */
#define PORT_TR_CMD_TR_SEL_MASK                 0x000000FFU
#define PORT_TR_CMD_GROUP_SEL_MASK              0x0000001FU
#define PORT_TR_CMD_GROUP_SEL_SHIFT             8U
#define PORT_TR_CMD_TR_EDGE_MASK                0x00000001U
#define PORT_TR_CMD_TR_EDGE_SHIFT               29U
#define PORT_TR_CMD_OUT_SEL_MASK                0x00000001U
#define PORT_TR_CMD_OUT_SEL_SHIFT               30U
#define PORT_TR_CMD_ACTIVATE_MASK               0x00000001U
#define PORT_TR_CMD_ACTIVATE_SHIFT              31U

/* Mask and Shift value of TR_CTL register */
#define PORT_TR_CTL_TR_SEL_MASK                 0x000000FFU
#define PORT_TR_CTL_TR_INV_MASK                 0x00000001U
#define PORT_TR_CTL_TR_INV_SHIFT                8U
#define PORT_TR_CTL_TR_EDGE_MASK                0x00000001U
#define PORT_TR_CTL_TR_EDGE_SHIFT               9U
#define PORT_TR_CTL_DBG_FREEZE_EN_MASK          0x00000001U
#define PORT_TR_CTL_DBG_FREEZE_EN_SHIFT         12U

/* Mask and Shift value of 1-to-1 group TR_CTL register */
#define PORT_TR_1TO1_CTL_TR_SEL_MASK            0x00000001U


/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/
#define PORT_START_SEC_CODE_ASIL_B
#include <Port_MemMap.h>

/** \brief Port_Arch_Init() initialization of port driver
 **
 ** This function initialize all ports.
 **
 ** \param[in]  ConfigDataPtr pointer of data stored configuration information
 ** \param[in]  EnvDataPtr    pointer of data stored environment information
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_Init
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr
);

/** \brief Port_Arch_RefreshPortDirection() refresh port direction
 **
 ** This function refresh the direction of all ports that are configured as
 ** direction not changeable.
 **
 ** \param[in]  ConfigDataPtr pointer of data stored configuration information
 ** \param[in]  EnvDataPtr    pointer of data stored environment information
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_RefreshPortDirection
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr
);

/** \brief Port_Arch_SetPinDirection() set port direction
 **
 ** This function sets the direction of port pin to the new direction.
 **
 ** \param[in]  ConfigDataPtr pointer of data stored configuration information
 ** \param[in]  EnvDataPtr    pointer of data stored environment information
 ** \param[in]  pin_id        The ID of port pin
 ** \param[in]  pin_direction The direction to be set for port pin
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_SetPinDirection
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr,
    Port_PinType          pin_id,
    Port_PinDirectionType pin_direction
);

/** \brief Port_Arch_SetPinMode() set port pin mode
 **
 ** This function sets the mode of port pin the new mode.
 **
 ** \param[in]  ConfigDataPtr pointer of data stored configuration information
 ** \param[in]  EnvDataPtr    pointer of data stored environment information
 ** \param[in]  pin_id        The ID of port pin
 ** \param[in]  pin_mode      The new mode of the pin
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_SetPinMode
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr,
    Port_PinType     pin_id,
    Port_PinModeType pin_mode
);

/** \brief Port_Arch_CheckConfigPtr() cheack config pointer
 **
 ** This function check the configration pointer adress.
 **
 ** \param[in]  ConfigDataPtr pointer of data stored configuration information
 ** \param[in]  EnvDataPtr    pointer of data stored environment information
 ** \return result of check (PORT_TRUE:OK / PORT_FALSE:NG)
 ** */
extern FUNC(boolean,PORT_CODE) Port_Arch_CheckConfigPtr
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr
);

/** \brief Port_Arch_GetPinStatus() get port pin status
 **
 ** This function gets the status of port pin.
 **
 ** \param[in]  ConfigDataPtr       pointer of data stored configuration information
 ** \param[in]  EnvDataPtr          pointer of data stored environment information
 ** \param[in]  pin_id              The ID of port pin
 ** \param[out] PortStatusInfoPtr   pointer of status of port pins
 ** \return the status of the port pin in a Port_StatusType structure.
 ** \return result of temporary data check (PORT_TRUE:OK / PORT_FALSE:NG)
 ** */
extern FUNC(boolean,PORT_CODE) Port_Arch_GetPinStatus
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr,
    Port_PinType          pin_id,
    P2VAR(Port_StatusType, AUTOMATIC, PORT_APPL_DATA) PortStatusInfoPtr
);

/** \brief Port_Arch_GetAmuxSplitCtlStatus() get Amux splitter cell control status
 **
 ** This function gets the status of Amux splitter cell.
 **
 ** \param[in]  ConfigDataPtr               pointer of data stored configuration information
 ** \param[in]  EnvDataPtr                  pointer of data stored environment information
 ** \param[in]  cell_id                     The id of AMUX splitter cell
 ** \param[out] AmuxSplitCtlStatusInfoPtr   pointer of status of AMUX cells
 ** \return the status of the AMUX splitter cell in a Port_AmuxSplitCtlStatusType structure.
 ** \return result of temporary data check (PORT_TRUE:OK / PORT_FALSE:NG)
 ** */
extern FUNC(boolean,PORT_CODE) Port_Arch_GetAmuxSplitCtlStatus
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr,
    Port_AmuxCellType     cell_id,
    P2VAR(Port_AmuxSplitCtlStatusType, AUTOMATIC, PORT_APPL_DATA) AmuxSplitCtlStatusInfoPtr
);

/** \brief Port_Arch_SetToDioMode() set port pin mode to DIO mode
 **
 ** This function sets port pin mode to DIO mode.
 **
 ** \param[in]  ConfigDataPtr pointer of data stored configuration information
 ** \param[in]  EnvDataPtr    pointer of data stored environment information
 ** \param[in]  pin_id        The ID of port pin
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_SetToDioMode
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr,
    Port_PinType     pin_id
);

/** \brief Port_Arch_SetToAlternateMode() set port pin mode to the configured mode
 **
 ** This function sets port pin mode to the configured mode.
 **
 ** \param[in]  ConfigDataPtr pointer of data stored configuration information
 ** \param[in]  EnvDataPtr    pointer of data stored environment information
 ** \param[in]  pin_id        The ID of port pin
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_SetToAlternateMode
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST)    ConfigDataPtr,
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)      EnvDataPtr,
    Port_PinType     pin_id
);

/** \brief Port_Arch_SetTrigger() set the trigger
 **
 ** Sets the configuration for specified trigger.
 **
 ** \param[in]  EnvDataPtr      Pointer of data stored environment information
 ** \param[in]  group_id        Trigger Group ID number
 ** \param[in]  out_trg         Output Trigger ID number
 ** \param[in]  in_trg          Input Trigger ID number
 ** \param[in]  inv_flg         Trigger Invert Flag
 ** \param[in]  sensitive_type  Trigger Sensitive Type
 ** \param[in]  dbg_freeze_flg  Debug Freeze Flag
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_SetTrigger
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr,
    Port_TriggerGroupIdType     group_id,
    Port_TriggerIdType          out_trg,
    Port_TriggerIdType          in_trg,
    boolean                     inv_flg,
    Port_TriggerSensitiveType   sensitive_type,
    boolean                     dbg_freeze_flg
);

/** \brief Port_Arch_ActTrigger() activate the trigger command
 **
 ** Activate the specified trigger.
 **
 ** \param[in]  EnvDataPtr      Pointer of data stored environment information
 ** \param[in]  group_id        Trigger Group ID number
 ** \param[in]  trg_id          Trigger ID number
 ** \param[in]  act_type        Trigger activation type
 ** \param[in]  sensitive_type  Trigger Sensitive Type
 ** */
extern FUNC(boolean,PORT_CODE) Port_Arch_ActTrigger
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr,
    Port_TriggerGroupIdType     group_id,
    Port_TriggerIdType          trg_id,
    Port_TriggerActivationType  act_type,
    Port_TriggerSensitiveType   sensitive_type
);

/** \brief Port_Arch_DeactTrigger() deactivate the trigger command
 **
 ** Deactivates the trigger activated by Port_ActTrigger.
 **
 ** \param[in]  EnvDataPtr    Pointer of data stored environment information
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_DeactTrigger
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr
);

/** \brief Port_Arch_GetTriggerIdStatus() get the trigger status
 **
 ** Gets the status of specified trigger.
 **
 ** \param[in]  EnvDataPtr              Pointer of data stored environment information
 ** \param[in]  group_id                Trigger Group ID number
 ** \param[in]  out_trg                 Output Trigger ID number
 ** \param[out] TrigIdStatusInfoPtr     Pointer to where to store the trigger status information
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_GetTriggerIdStatus
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr,
    Port_TriggerGroupIdType group_id,
    Port_TriggerIdType      out_trg,
    P2VAR(Port_TriggerIdStatusType, AUTOMATIC, PORT_APPL_DATA)  TrigIdStatusInfoPtr
);

/** \brief Port_Arch_GetTriggerCmdStatus() get the trigger command status
 **
 ** Gets the status of trigger command.
 **
 ** \param[in]  EnvDataPtr              Pointer of data stored environment information
 ** \param[out] TrigCmdStatusInfoPtr    Pointer to where to store the trigger command status information
 ** */
extern FUNC(void,PORT_CODE) Port_Arch_GetTriggerCmdStatus
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr,
    P2VAR(Port_TriggerCmdStatusType, AUTOMATIC, PORT_APPL_DATA) TrigCmdStatusInfoPtr
);

/** \brief Port_Arch_CheckTrCmdSet() cheack trigger command for set trigger
 **
 ** This function check the trigger command status for setting trigger control.
 **
 ** \param[in]  EnvDataPtr  Pointer of data stored environment information
 ** \param[in]  group_id    Trigger Group ID number
 ** \return result of check (PORT_TRUE:OK / PORT_FALSE:NG)
 ** */
extern FUNC(boolean,PORT_CODE) Port_Arch_CheckTrCmdSet
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr,
    Port_TriggerGroupIdType group_id
);

/** \brief Port_Arch_CheckTrCmdAct() cheack trigger command for act trigger
 **
 ** This function check the trigger command status for activating trigger command.
 **
 ** \param[in]  EnvDataPtr    Pointer of data stored environment information
 ** \return result of check (PORT_TRUE:OK / PORT_FALSE:NG)
 ** */
extern FUNC(boolean,PORT_CODE) Port_Arch_CheckTrCmdAct
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr
);

/** \brief Port_Arch_CheckTrCmdDeact() cheack trigger command for deact trigger
 **
 ** This function check the trigger command status for deactivating trigger command.
 **
 ** \param[in]  EnvDataPtr    Pointer of data stored environment information
 ** \return result of check (PORT_TRUE:OK / PORT_FALSE:NG)
 ** */
extern FUNC(boolean,PORT_CODE) Port_Arch_CheckTrCmdDeact
(
    P2CONST(Port_DriverEnvType,AUTOMATIC,PORT_CONST)    EnvDataPtr
);

#define PORT_STOP_SEC_CODE_ASIL_B
#include <Port_MemMap.h>

/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* PORT_INTERNAL_ARCH_H  */
/*==================[end of file]============================================*/
