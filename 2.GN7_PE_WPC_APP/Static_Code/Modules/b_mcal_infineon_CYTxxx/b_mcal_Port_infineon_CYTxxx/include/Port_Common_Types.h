#ifndef PORT_COMMON_TYPES_H
#define PORT_COMMON_TYPES_H

/** \brief AUTOSAR Port Port Driver
 **
 ** This file defines the type definition of Port driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Std_Types.h>           /* AUTOSAR standard types */

/*==================[macros]=================================================*/
/*==================[type definitions]=======================================*/
/*------------------[Definition of type Port_PinDirectionType]---------------*/
/** \brief Enumeration type for the direction of a pin
 **
 ** This enumeration type holds values which represent the direction of a pin.
 */
typedef enum
{
    PORT_PIN_IN  = 0,             /* Sets port pin as input.  */
    PORT_PIN_OUT = 1,             /* Sets port pin as output. */
    PORT_PIN_IN_OUT_DISABLED = 2  /* Sets port pin as input/output disabled. */
} Port_PinDirectionType;

/*------------------[Definition of type Port_PinLevelValueType]--------------*/
/** \brief Enumeration type for the level value of a pin
 **
 ** This enumeration type holds values which represent the level value of a pin.
 */
typedef enum
{
    PORT_PIN_LEVEL_LOW  = 0,     /* Sets port pin as low.  */
    PORT_PIN_LEVEL_HIGH = 1      /* Sets port pin as high. */
} Port_PinLevelValueType;

/*------------------[Definition of type Port_TriggerSensitiveType]-----------*/
/** \brief Enumeration type for the trigger sensitive type
 **
 ** The activated trigger is treated as a level sensitive or edge sensitive
 ** sensitive trigger.
 */
typedef enum
{
    PORT_TR_SENSITIVE_LEVEL = 0,   /* Level sensitive. */
    PORT_TR_SENSITIVE_EDGE  = 1    /* Edge sensitive.  */
} Port_TriggerSensitiveType;

/*------------------[Definition of type Port_TriggerActivationType]----------*/
/** \brief Enumeration type for the trigger activation type
 **
 ** The trigger activation for a specific input or output trigger of the trigger
 ** multiplexer.
 */
typedef enum
{
    PORT_TR_ACTIVATION_INPUT  = 0,  /* Input trigger.  */
    PORT_TR_ACTIVATION_OUTPUT = 1   /* Output trigger. */
} Port_TriggerActivationType;

/*------------------[Definition of type Port_PinChannelConfigType]-----------*/
/** \brief Channel configuration type
 **
 ** This type holds all values needed for each channel to perform the
 ** functionallity.
 ** Splitted into architecture dependend/independend and fix (not changed by
 ** user configuration) and dynamic part.
 ** The order of declaration is: common fix, arch fix, common dynamic followed
 ** by arch dynamic.
 */
typedef struct
{
    uint32  availablePins;          /* bitmask for available pins in the port               */
    uint32  PORT_SEL0_Data;         /* Port selection 0 configuration                       */
    uint32  PORT_SEL1_Data;         /* Port selection 1 configuration                       */
    uint32  OUT_Data;               /* Port output data configuration                       */
    uint32  CFG_Data;               /* Port configuration                                   */
    uint32  CFG_IN_Data;            /* Port input buffer configuration                      */
    uint32  CFG_OUT_Data;           /* Port output buffer configuration                     */
    uint32  CFG_SIO_Data;           /* Port SIO configuration                               */
    uint32  DFT_SIO_Data;           /* Port SIO DfT control configuration                   */
    uint32  CFG_IN_GPIO5V_Data;     /* Port GPIO5V input buffer configuration               */
    uint32  CFG_OUT2_Data;          /* Port output buffer 2 configuration                   */
    uint32  CFG_SLEW_EXT_Data;      /* Port extra slew rate control configuration           */
    uint32  CFG_DRIVE_EXT0_Data;    /* Port extra drive strength control 0 configuration    */
    uint32  CFG_DRIVE_EXT1_Data;    /* Port extra drive strength control 1 configuration    */
    uint32  CTL_Data;               /* Smartio control register configuration               */
    uint32  SYNC_CTL_Data;          /* Smartio synchronization control configuration        */
    uint32  LUT_SEL_Data[8];        /* Smartio LUT component input configuration            */
    uint32  LUT_CTL_Data[8];        /* Smartio LUT component control configuration          */
    uint32  DU_SEL_Data;            /* Smartio data unit component input configuration      */
    uint32  DU_CTL_Data;            /* Smartio data unit component control configuration    */
    uint32  DATA_Data;              /* Smartio data unit input data configuration           */
    uint32  directionChangeable;    /* Data Direction changeable                            */
    uint32  modeChangeable;         /* Mode changeable                                      */
    uint8   outputDrive[8];         /* GPIO output drive mode                               */
    uint8   portNumber;             /* number of the port                                   */
    boolean hasDsCtrl;              /* Indicates port has DS_CTRL function or not           */
    boolean hasSio;                 /* Indicates port has SIO function or not               */
    boolean hasSmartIo;             /* Indicates port has SMARTIO function or not           */
    boolean hasSlewExt;             /* Indicates port has SLEW_EXT function or not          */
    boolean hasDriveExt;            /* Indicates port has DRIVE_EXT function or not         */
} Port_PinChannelConfigType;

/*------------------[Definition of type Port_AmuxSplitCtlConfigType]---------*/
/** \brief AMUX splitter cell configuration type
 **
 ** This type holds all values needed for each channel to perform the
 ** functionallity.
 ** Splitted into architecture dependend/independend and fix (not changed by
 ** user configuration) and dynamic part.
 ** The order of declaration is: common fix, arch fix, common dynamic followed
 ** by arch dynamic.
 */
typedef struct
{
    uint8   amuxSplitCtlNumber;     /* Number of the AMUX splitter cell control             */
    uint32  AMUX_SPLIT_CTL_Data;    /* AMUX splitter cell control configuration             */
} Port_AmuxSplitCtlConfigType;

/*---------------[Definition of type Port_TriggerConfigDataType]-------------*/
/** \brief Type definition for trigger configuration data
 **
 ** This type stores the trigger configuration data in a uint32.
 */
typedef uint32 Port_TriggerConfigDataType;

/*---------------[Definition of type Port_TriggerGroupIdType]----------------*/
/** \brief Type definition for trigger group id
 **
 ** This type stores the trigger group id in a uint8.
 ** 0-15: Trigger group, 16-31: Trigger 1-to-1 Group.
 ** Max value is dependent on HW.
 */
typedef uint8 Port_TriggerGroupIdType;

/*---------------[Definition of type Port_TriggerIdType]---------------------*/
/** \brief Type definition for trigger id
 **
 ** This type stores the trigger id in a uint8.
 ** Max value is dependent on HW.
 */
typedef uint8 Port_TriggerIdType;

/*---------------[Definition of type Port_TriggerGroupType]------------------*/
/** \brief Driver environment data structure
 **
 ** This structure contains the environment data for the PORT driver. 
 */
typedef struct
{
    Port_TriggerGroupIdType     groupId;    /* Trigger group id. 0-15: Trigger group, 16-31: Trigger 1-to-1 group. */
    uint16                      trOutNr;    /* Number of output triggers                                           */
} Port_TriggerGroupType;

/*------------[additional definitions for Port_PinType]----------------------*/
/** \brief  Type definition for Pin ID
 **
 ** This type stores the port pin ID in a uint16.
 */
typedef uint16 Port_PinType;

/*------------------[Definition of type Port_PinModeType]--------------------*/
/** \brief port pin mode type
 **
 ** arithmentic type big enough to save architecture specific range for
 ** supported modes.
 ** Note: Group of modes are reduced to the same value by reason of
 **       optimized implementation.
 */
typedef uint8 Port_PinModeType;

/*------------------[Definition of type Port_PortType]------===--------------*/
/** \brief Type definition for Port ID
 **
 ** This type stores the port ID in a uint8.
 */
typedef uint8 Port_PortType;

/*------------------[Definition of type Port_AmuxCellType]-------------------*/
/** \brief Type definition for AMUX splitter cell
 **
 ** This type stores the AMUX splitter cell in a uint8.
 */
typedef uint8 Port_AmuxCellType;

/*------------------[Definition of type Port_AmuxSplitCtlStatusType]---------*/
/** \brief AMUX splitter cell status data structure
 **
 ** This structure contains the AMUX splitter cell data for the PORT driver. 
 */
typedef struct
{
    uint8       amuxBusaSwitchSL;           /* T-switch control for Left AMUXBUSA switch  */
    uint8       amuxBusaSwitchSR;           /* T-switch control for Right AMUXBUSA switch */
    uint8       amuxBusaSwitchS0;           /* T-switch control for AMUXBUSA vssa/ground switch */
    uint8       amuxBusbSwitchSL;           /* T-switch control for Left AMUXBUSB switch */
    uint8       amuxBusbSwitchSR;           /* T-switch control for Right AMUXBUSB switch */
    uint8       amuxBusbSwitchS0;           /* T-switch control for AMUXBUSB vssa/ground switch */
} Port_AmuxSplitCtlStatusType;

/*------------------------[Register definitions]-----------------------------*/
/** \brief GPIO_PRT Register Address structure
 **
 ** This structure is the GPIO_PRT Register Map. 
 */
typedef struct
{
    uint32  PORT_OUT;           /* OUT Register */
    uint32  PORT_OUT_CLR;       /* OUT_CLR Register */
    uint32  PORT_OUT_SET;       /* OUT_SET Register */
    uint32  PORT_OUT_INV;       /* OUT_INV Register */
    uint32  PORT_IN;            /* IN Register */
    uint32  PORT_INTR;          /* INTR Register */
    uint32  PORT_INTR_MASK;     /* INTR_MASK Register */
    uint32  PORT_INTR_MASKED;   /* INTR_MASKED Register */
    uint32  PORT_INTR_SET;      /* INTR_SET Register */
    uint32  reserve1[7];        /* reserved */
    uint32  PORT_INTR_CFG;      /* INTR_CFG Register */
    uint32  PORT_CFG;           /* CFG Register */
    uint32  PORT_CFG_IN;        /* CFG_IN Register */
    uint32  PORT_CFG_OUT;       /* CFG_OUT Register */
    uint32  PORT_CFG_SIO;       /* CFG_SIO Register */
    uint32  PORT_DFT_SIO;       /* DFT_SIO Register */
    uint32  PORT_CFG_IN_GPIO5V; /* CFG_IN_GPIO5V Register */
    uint32  reserve2;           /* reserved */
    uint32  PORT_CFG_OUT2;      /* CFG_OUT2 Register */
    uint32  PORT_CFG_SLEW_EXT;      /* CFG_SLEW_EXT Register */
    uint32  PORT_CFG_DRIVE_EXT0;    /* CFG_DRIVE_EXT0 Register */
    uint32  PORT_CFG_DRIVE_EXT1;    /* CFG_DRIVE_EXT1 Register */
    uint32  reserve3[4];        /* reserved */
} Port_GpioPrtRegisterType;

/** \brief HSIOM_PRT.AMUX_SPLIT_CTL Register Address structure
 **
 ** This structure is the HSIOM_PRT.AMUX_SPLIT_CTL Register Map. 
 */
typedef struct
{
    uint32  PORT_AMUX_SPLIT_CTL;    /* AMUX_SPLIT_CTL Register */
} Port_HsiomAmuxSplitCtlRegisterType;

/** \brief HSIOM_PRT Register Address structure
 **
 ** This structure is the HSIOM_PRT Register Map. 
 */
typedef struct
{
    uint32  PORT_PORT_SEL0;     /* PORT_SEL0 Register */
    uint32  PORT_PORT_SEL1;     /* PORT_SEL1 Register */
    uint32  reserve[2];         /* reserved */
} Port_HsiomPrtRegisterType;

/** \brief SMARTIO_PRT Register Address structure
 **
 ** This structure is the SMARTIO_PRT Register Map. 
 */
typedef struct
{
    uint32  PORT_CTL;           /* CTL Register */
    uint32  reserve1[3];        /* reserved */
    uint32  PORT_SYNC_CTL;      /* SYNC_CTL Register */
    uint32  reserve2[3];        /* reserved */
    uint32  PORT_LUT_SEL[8];    /* LUT_SEL Register */
    uint32  PORT_LUT_CTL[8];    /* LUT_CTL Register */
    uint32  reserve3[24];       /* reserved */
    uint32  PORT_DU_SEL;        /* DU_SEL Register */
    uint32  PORT_DU_CTL;        /* DU_CTL Register */
    uint32  reserve4[10];       /* reserved */
    uint32  PORT_DATA_SOURCE;   /* DATA Register */
    uint32  reserve5[3];        /* reserved */
} Port_SmartioPrtRegisterType;

/*---------------[Definition of type Port_PeriTrGroupRegisterType]-----------*/
/** \brief Type definition for the TR_CTL register access
 **
 ** This structure contains the TR_CTL register information.
 */
typedef struct
{
    uint32  PORT_TR_CTL[256];   /* TR_CTL register */
} Port_PeriTrGroupRegisterType;

/*------------------[Definition of type Port_IOPortAddressType]--------------*/
/** \brief IO Port Register Address structure
 **
 ** This structure contains the information for IO Port register address. 
 */
typedef struct
{
    volatile CONSTP2VAR(Port_HsiomPrtRegisterType,PORT_CONST,REGSPACE)          hsiomPtr;
                                /* HSIOM_PRT0 register address      */
    volatile CONSTP2VAR(Port_HsiomAmuxSplitCtlRegisterType,PORT_CONST,REGSPACE) amuxSplitCtlPtr;
                                /* AMUX_SPLIT_CTL0 register address */
    volatile CONSTP2VAR(Port_GpioPrtRegisterType,PORT_CONST,REGSPACE)           gpioPtr;
                                /* GPIO_PRT0 register address       */
    volatile CONSTP2VAR(Port_SmartioPrtRegisterType,PORT_CONST,REGSPACE)        smartioPtr;
                                /* SMART_IO0 register address       */
    volatile CONSTP2VAR(uint32,PORT_CONST,REGSPACE)                             periTrCmdPtr;
                                /* TR_CMD register address          */
    volatile CONSTP2VAR(Port_PeriTrGroupRegisterType,PORT_CONST,REGSPACE)       trGroupPtr;
                                /* TR_CTL register address of trigger group#0 */
} Port_IOPortAddressType;

/*------------------[Definition of type Port_StatusType]------------------*/
/** \brief Port pin status data structure
 **
 ** This structure contains the port pin data for the PORT driver. 
 */
typedef struct
{
    uint8   direction;                          /* Direction setting of the pin */
    uint8   mode;                               /* Output mode setting of the pin */
    uint8   outputDrive;                        /* GPIO output drive mode */
    uint8   inputBufferMode;                    /* Input buffer mode (trip points and hysteresis) */
    uint8   outputSlowSlewRateEnable;           /* Enables slow slew rate */
    uint8   outputDriveStrength;                /* GPIO drive strength */
    uint8   inputBufferMode5VPin;               /* Input buffer mode (trip points and hysteresis)
                                                   for GPIO5V upper bit */
    uint8   outputDriveSelectTrim;              /* GPIO drive select trim */
    uint8   outputSlewRateExt;                  /* GPIO extra slew rate */
    uint8   outputDriveStrengthExt;             /* GPIO extra drive strength */
    uint8   sioPinsOutputBufferMode;            /* Output buffer mode */
    uint8   sioPinsInputBufferMode;             /* Input buffer trip-point in single ended input buffer mode */
    uint8   sioPinsInputBufferVrefTripPoint;    /* Reference voltage (Vref) trip-point of the input buffer setting */
    uint8   sioPinsInputBufferVohOutputLevel;   /* Regulated Voh output level and trip point of the input buffer
                                                   for a specific SIO pin pair */
    uint8   sioPinsAnalogDftEnable;             /* Enables ADFT switches of SIO pads */
    uint8   smartioBypassEnable;                /* Bypass of the programmable IO */
    uint8   smartioClockSource;                 /* Clock ("clk_fabric") and reset ("rst_fabric_n") source selection */
    uint8   smartioHoldOverrideEnable;          /* IO cell hold override functionality */
    uint8   smartioPipelineEnable;              /* Enable for pipeline register */
    uint8   smartioEnable;                      /* Enable for programmable IO */
    uint8   smartioSyncIoEnable;                /* Synchronization of the IO pin input signals to "clk_fabric" */
    uint8   smartioSyncChipEnable;              /* Synchronization of the chip input signals to "clk_fabric" */
    uint8   smartioLutTr0Source;                /* LUT input signal "tr0_in" source selection */
    uint8   smartioLutTr1Source;                /* LUT input signal "tr1_in" source selection */
    uint8   smartioLutTr2Source;                /* LUT input signal "tr2_in" source selection */
    uint8   smartioLut;                         /* LUT configuration */
    uint8   smartioLutOperation;                /* Specifies the LUT operation */
    uint8   smartioDataUnitTr0Source;           /* Data unit input signal "tr0_in" source selection */
    uint8   smartioDataUnitTr1Source;           /* Data unit input signal "tr1_in" source selection */
    uint8   smartioDataUnitTr2Source;           /* Data unit input signal "tr2_in" source selection */
    uint8   smartioDataUnitData0Source;         /* Data unit input data "data0_in" source selection */
    uint8   smartioDataUnitData1Source;         /* Data unit input data "data1_in" source selection */
    uint8   smartioDataUnitBitSize;             /* Size/width of the data unit data operands (in bits) */
    uint8   smartioDataUnitOperation;           /* Specifies the data unit operation */
    uint8   smartioDataUnitSource;              /* Data unit input data source */
} Port_StatusType;

/*---------------[Definition of type Port_TriggerCmdStatusType]--------------*/
/** \brief Type definition for trigger command status information
 **
 ** This structure contains the trigger command status information. 
 */
typedef struct
{
    Port_TriggerGroupIdType     group_id;           /* Trigger group id. 0-15: Trigger group, 16-31: Trigger 1-to-1 group. */
    Port_TriggerIdType          trg_id;             /* Trigger id                         */
    Port_TriggerActivationType  act_type;           /* Trigger activation type            */
    Port_TriggerSensitiveType   sensitive_type;     /* Trigger sensitive type             */
    uint8                       activate;           /* Trigger command activation status  */
} Port_TriggerCmdStatusType;

/*---------------[Definition of type Port_TriggerIdStatusType]---------------*/
/** \brief Type definition for trigger status information
 **
 ** This structure contains the trigger status information.
 */
typedef struct
{
    Port_TriggerIdType          trInput;            /* Input trigger id          */
    boolean                     trInvertEnable;     /* Trigger invert flag       */
    Port_TriggerSensitiveType   trSensitiveType;    /* Trigger sensitive type    */
    boolean                     trDbgFreezeEnable;  /* Trigger debug freeze flag */
} Port_TriggerIdStatusType;


/*==================[external function declarations]=========================*/
/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* PORT_COMMON_TYPES_H  */
/*==================[end of file]============================================*/
