#ifndef DIO_INTERNAL_H
#define DIO_INTERNAL_H

/** \brief AUTOSAR Dio DIO Driver
 **
 ** This file defines interface of internal function of Dio driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Dio_Types.h>         /* DIO driver types */
#include <Dio_Version.h>       /* version check */

/*==================[macros]=================================================*/

/*==================[type definitions]=======================================*/

/*==================[internal constants]=====================================*/

/*==================[external function declarations]=========================*/

/* some toolchains really need this memory abstraction */
#define DIO_START_SEC_CODE_ASIL_B
#include <Dio_MemMap.h>

/** \brief Dio_ReadChannel_Internal
 **
 ** This function returns the value of the specified DIO channel.
 **
 ** \param[in]  ChannelId  The ID of the DIO channel.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     Channel level.
 **             STD_HIGH:The physical level of the corresponding Pin is high.
 **             STD_LOW:The physical level of the corresponding Pin is low.
 ** */
extern FUNC(Dio_LevelType, DIO_CODE) Dio_ReadChannel_Internal(
    Dio_ChannelType ChannelId,
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_WriteChannel_Internal
 **
 ** This function write the value of the specified DIO channel.
 **
 ** \param[in]  ChannelId  The ID of the DIO channel.
 ** \param[in]  Level      The value to write.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE) Dio_WriteChannel_Internal(
    Dio_ChannelType ChannelId, Dio_LevelType Level,
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_ReadPort_Internal
 **
 ** This function returns the value of the specified DIO port.
 **
 ** \param[in]  PortId  The ID of the DIO port.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     Level of all channels of that port.
 ** */
extern FUNC(Dio_PortLevelType, DIO_CODE) Dio_ReadPort_Internal(
    Dio_PortType PortId, 
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_WritePort_Internal
 **
 ** This function write the value of the specified DIO port.
 **
 ** \param[in]  PortId  The ID of the DIO port.
 ** \param[in]  Level   The value to write.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE) Dio_WritePort_Internal(
    Dio_PortType PortId, Dio_PortLevelType Level,
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_MaskedWritePort_Internal
 **
 ** This function write the masked value of the specified DIO port.
 **
 ** \param[in]  PortId  The ID of the DIO port.
 ** \param[in]  Level   The value to write.
 ** \param[in]  Mask    The value of mask.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE) Dio_MaskedWritePort_Internal(
    Dio_PortType PortId, Dio_PortLevelType Level, Dio_PortLevelType Mask,
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_ReadChannelGroup_Internal
 **
 ** This function returns the value of the specified DIO channel group.
 **
 ** \param[in]  ChannelGroupIdPtr  Pointer to Channel Group.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     Level of channel groups.
 ** */
extern FUNC(Dio_PortLevelType, DIO_CODE) Dio_ReadChannelGroup_Internal(
    P2CONST(Dio_ChannelGroupType, AUTOMATIC, DIO_CONST) ChannelGroupIdPtr,
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_WriteChannelGroup_Internal
 **
 ** This function write the value of the specified DIO channel group.
 **
 ** \param[in]  ChannelGroupIdPtr  Pointer to Channel Group.
 ** \param[in]  Level   The value to write.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE) Dio_WriteChannelGroup_Internal(
    P2CONST(Dio_ChannelGroupType, AUTOMATIC, DIO_CONST) ChannelGroupIdPtr,
    Dio_PortLevelType Level,
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_FlipChannel_Internal
 **
 ** This function flip (change from 1 to 0 or from 0 to 1) the level 
 ** of a channel and return the level of the channel after flip.
 **
 ** \param[in]  ChannelId  The ID of the DIO channel.
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 **
 ** \retval     Channel level.
 **             STD_HIGH:The physical level of the corresponding Pin is high.
 **             STD_LOW:The physical level of the corresponding Pin is low.
 ** */
extern FUNC(Dio_LevelType, DIO_CODE) Dio_FlipChannel_Internal(
    Dio_ChannelType ChannelId,
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr
    );

/** \brief Dio_isValidChannel
 **
 ** This function checks the validity of a specified channel.
 **
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 ** \param[in]  ChannelId  The ID of the DIO channel.
 **
 ** \retval     Validity of a ChannelId.
 **             TRUE  : valid ChannelId.
 **             FALSE : invalid ChannelId.
 ** */
extern FUNC(boolean, DIO_CODE) Dio_isValidChannel(
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr,
    Dio_ChannelType ChannelId
    );

/** \brief Dio_isValidPort
 **
 ** This function checks the validity of a specified port.
 **
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 ** \param[in]  PortId  The ID of the DIO port.
 **
 ** \retval     Validity of a PortId.
 **             TRUE  : valid PortId.
 **             FALSE : invalid PortId.
 ** */
extern FUNC(boolean, DIO_CODE) Dio_isValidPort(
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr,
    Dio_PortType PortId
    );

/** \brief Dio_isValidChannelGroup
 **
 ** This function checks the validity of a specified channel group.
 **
 ** \param[in]  Dio_DriverConfigPtr  This structure contains all post-build
 **             configurable parameters of the DIO driver.
 ** \param[in]  ChannelGroupIdPtr  Pointer to Channel Group.
 **
 ** \retval     Validity of a channel group.
 **             TRUE  : valid channel group.
 **             FALSE : invalid channel group.
 ** */
extern FUNC(boolean, DIO_CODE) Dio_isValidChannelGroup(
    P2CONST(Dio_ConfigType, AUTOMATIC, DIO_CONST) Dio_DriverConfigPtr,
    P2CONST(Dio_ChannelGroupType, AUTOMATIC, DIO_CONST) ChannelGroupIdPtr
    );

#define DIO_STOP_SEC_CODE_ASIL_B
#include <Dio_MemMap.h>
/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#endif /* DIO_INTERNAL_H */
/*==================[end of file]============================================*/
