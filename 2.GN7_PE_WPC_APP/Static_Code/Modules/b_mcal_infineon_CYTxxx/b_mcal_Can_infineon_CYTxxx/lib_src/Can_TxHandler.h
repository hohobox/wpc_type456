/** \brief Can_TxHandler.h
 **
 ** The Tx handler is responsible for sending messages, including
 ** confirmation and cancellation.
 **
 ** The functions declared by this interface are driver internal and expect
 ** to be called with valid parameters.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef CAN_TXHANDLER_H_INCLUDED
#define CAN_TXHANDLER_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Can_ControllerManager.h>

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define CAN_START_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

/** \brief Can_TxInit
 **
 ** Initializes the TX path of one CAN controller.
 **
 ** \param [in] ControllerCfgPtr   Pointer to the controller cfg.
 **
 */
extern FUNC(void, AUTOMATIC) Can_TxInit
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr
);

/** \brief Can_TxSetup
 **
 ** Setup the TX function of one CAN controller.
 **
 ** \param [in] ControllerCfgPtr   Pointer to the controller cfg.
 **
 */
extern FUNC(void, AUTOMATIC) Can_TxSetup
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr
);

/** \brief Can_TxWrite
 **
 ** Try to write the message to TX buffer of FIFO. The function also checks for
 ** busy and performs cancellation of necessary.
 ** 
 ** Precondition: critical section.
 **
 ** \param [in] ControllerCfgPtr   Pointer to the controller configuration 
 **                                structure.
 ** \param [in] ControllerStatePtr   Pointer to the controller state data
 **                                  structure.
 ** \param [in] PduIdBufferIndex   The PduIdBufferIndex that shall be used for
 **                                transmission.
 ** \param [in] PduInfoPtr   Pointer to PduInfo structure for CanId, data length
 **                          and SDU data pointer.
 ** \param [in] TxHandle   Gives the dedicated Tx Buffer number used for
 **                        transmission or that the FIFO is used for transmission.
 **                        0..31 stays for a dedicated Tx buffer, values higher
 **                        than 31 stays for FIFO in use.
 ** \param [in] PaddingValue   Value to add for padding bytes in CAN message.
 **
 */
extern FUNC(void, AUTOMATIC) Can_TxWrite
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr,
  P2CONST(Can_ControllerStateDataType, AUTOMATIC, AUTOMATIC) ControllerStatePtr,
  VAR(Can_ControllerPduIdBufferIndexType, AUTOMATIC) PduIdBufferIndex,
  P2CONST(Can_ControllerPduInfoType, AUTOMATIC, AUTOMATIC) PduInfoPtr,
  VAR(uint8, AUTOMATIC) TxHandle,
  VAR(uint8, AUTOMATIC) PaddingValue
);

/** \brief Can_TxHandleTx
 **
 ** Analyze transmitted and canceled events.
 ** 
 ** Checks all TX buffer entries for canceled messages on cancel event and works
 ** through all items in the TX event FIFO on TX events. The function is intended
 ** to be called on TX cancel IRQ, TX event IRQ or Can_MainFunction_Write.
 ** 
 ** The function can handle the situation if there is no message pending for cancel.
 ** 
 ** Each TX buffer that is canceled (hw flag set) is freed (ready for next message)
 ** and the TX cancellation notification is sent.
 ** 
 ** The function can handle the situation if there is no TX message pending.
 ** Each TX event is processed so that the TX buffer is freed (ready for next
 ** message) and the TX confirmation notification is sent.
 **
 ** \param [in] ControllerCfgPtr   Pointer to the controller cfg.
 **
 */
extern FUNC(void, AUTOMATIC) Can_TxHandleTx
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr
);

/** \brief Can_TxSetTxCancelRequest
 **
 ** Operation to set the cancel request in HW registers.
 **
 ** \param [in] ControllerCfgPtr   Pointer to controller configuration structure.
 ** \param [in] BufferIndex        Index of the TX buffer to cancel.
 ** \param [in] NormalizedNewCanId
 ** \param [in] IsCancelSameId
 **
 */
extern FUNC(void, AUTOMATIC) Can_TxSetTxCancelRequest
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr,
  VAR(uint8, AUTOMATIC) BufferIndex,
  VAR(uint32, AUTOMATIC) NormalizedNewCanId,
  VAR(boolean, AUTOMATIC) IsCancelSameId
);

/** \brief Can_TxClearTxData
 **
 ** Clear Tx Data.
 **
 ** \param [in] ControllerCfgPtr   Pointer to controller configuration structure.
 **
 */
extern FUNC(void, AUTOMATIC) Can_TxClearTxData
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr
);

#define CAN_STOP_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

#endif /**defined(CAN_TXHANDLER_H_INCLUDED)*/

/*==================[end of file]===========================================*/
