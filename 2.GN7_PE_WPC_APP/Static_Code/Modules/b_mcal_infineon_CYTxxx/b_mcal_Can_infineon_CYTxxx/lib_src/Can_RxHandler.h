/** \brief Can_RxHandler.h
 **
 ** The Rx handler is responsible for setting up and maintaining message
 ** reception including notification.
 **
  * The functions declared by this interface are driver internal and expect
 ** to be called with valid parameters.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef CAN_RXHANDLER_H_INCLUDED
#define CAN_RXHANDLER_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Can_ControllerManager.h>

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define CAN_START_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

/** \brief Can_RxGetNewMessageStatus
 **
 ** Checks if there is a new message pending.
 **
 ** \return   TRUE: There is at least one received message.
 **           FALSE: There is no received message.
 ** \param [in] ControllerCfgPtr   Pointer to the controller cfg.
 ** \param [in] ControllerStateDataPtr   Pointer to the controller state data.
 **
 */
extern FUNC(boolean, AUTOMATIC) Can_RxGetNewMessageStatus
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr,
  P2CONST(Can_ControllerStateDataType, AUTOMATIC, AUTOMATIC) ControllerStateDataPtr
);

/** \brief Can_RxHandleReceived
 **
 ** Works through all items in the RX FIFOs and dedicated message buffers. The
 ** function is intended to be called on RX IRQ or Can_MainFunction_Read.
 ** 
 ** The function can handle the situation if there is no new message.
 ** Each RX event is processed so that the RX buffer is freed (ready for next
 ** message) and the RX confirmation notification is sent.
 **
 ** \return   E_OK: No error was detected,
 **           E_NOT_OK: Message lost error was detected. (Reception was still
 **           conducted.)
 ** \param [in] ControllerCfgPtr   Pointer to the controller cfg.
 ** \param [inout] ControllerStateDataPtr   Pointer to the controller state data.
 ** \param [in] ApiId   Id of the service that detected the error.
 **
 */
FUNC(Std_ReturnType, AUTOMATIC) Can_RxHandleReceived
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr,
  P2VAR(Can_ControllerStateDataType, AUTOMATIC, AUTOMATIC) ControllerStateDataPtr,
  VAR(uint8, AUTOMATIC) ApiId
);

/** \brief Can_RxInit
 **
 ** Initializes the RX path of one CAN controller.
 **
 ** \param [in] ControllerCfgPtr   Pointer to the controller cfg.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RxInit
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr
);

/** \brief Can_RxSetup
 **
 ** Initializes the RX function of one CAN controller.
 **
 ** \param [in] ControllerCfgPtr   Pointer to the controller cfg.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RxSetup
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr
);

#define CAN_STOP_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

#endif /**defined(CAN_RXHANDLER_H_INCLUDED)*/

/*==================[end of file]===========================================*/
