#ifndef GPT_H
#define GPT_H

/** \brief AUTOSAR Gpt GPT Driver
 **
 ** This file contains the implementation of the AUTOSAR module Gpt
 ** function Gpt_DeInit and Gpt_Init, Gpt_GetTimeElapsed, Gpt_GetTimeRemaining, 
 ** Gpt_StartTimer, Gpt_StopTimer, Gpt_EnableNotification, Gpt_DisableNotification, 
 ** Gpt_SetMode, Gpt_DisableWakeup, Gpt_EnableWakeup, Gpt_GetVersionInfo, 
 ** Gpt_CheckWakeup, Gpt_ReportWakeupSource
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Std_Types.h>    /* AUTOSAR standard types */
#include <Gpt_Public.h>   /* Gpt Public types */
#include <Gpt_Cfg.h>      /* Gpt configuration types */
#include <Gpt_PBcfg.h>    /* Gpt Post-build configuration types */
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
#include <EcuM.h>         /* EcuM types */
#endif
/*==================[macros]================================================*/
/* AUTOSAR version number check */
#if (!defined GPT_AR_RELEASE_MAJOR_VERSION)           /* Autosar release major version check */
#error GPT_AR_RELEASE_MAJOR_VERSION must be defined
#elif (GPT_AR_RELEASE_MAJOR_VERSION != 4U)
#error "AUTOSAR AR release major number mismatch"
#endif

#if (!defined GPT_AR_RELEASE_MINOR_VERSION)           /* Autosar release minor version check */
#error GPT_AR_RELEASE_MINOR_VERSION must be defined
#elif (GPT_AR_RELEASE_MINOR_VERSION != 2U)
#error "AUTOSAR AR release minor number mismatch"
#endif

#if (!defined GPT_AR_RELEASE_REVISION_VERSION)        /* Autosar release revision version check */
#error GPT_AR_RELEASE_REVISION_VERSION must be defined
#elif (GPT_AR_RELEASE_REVISION_VERSION != 2U)
#error "AUTOSAR AR release revision number mismatch"
#endif

#if (!defined GPT_SW_MAJOR_VERSION)                   /* Software major version check */
#error GPT_SW_MAJOR_VERSION must be defined
#elif (GPT_SW_MAJOR_VERSION != 1U)
#error "AUTOSAR SW major number mismatch"
#endif

#if (!defined GPT_SW_MINOR_VERSION)                   /* Software minor version check */
#error GPT_SW_MINOR_VERSION must be defined
#elif (GPT_SW_MINOR_VERSION != 13U)
#error "AUTOSAR SW minor number mismatch"
#endif

#if (!defined GPT_SW_PATCH_VERSION)                   /* Software patch version check */
#error GPT_SW_PATCH_VERSION must be defined
#elif !(GPT_SW_PATCH_VERSION >= 0U)
#error "AUTOSAR SW patch version number mismatch"
#endif


/* AUTOSAR configuration version number check */
#if !defined(GPT_GEN_MODULE_ID)
#error "GPT_GEN_MODULE_ID is not defined"
#elif (GPT_GEN_MODULE_ID != GPT_MODULE_ID)
#error "AUTOSAR configuration module id mismatch"
#endif

#if !defined(GPT_GEN_VENDOR_ID)
#error "GPT_GEN_VENDOR_ID is not defined"
#elif (GPT_GEN_VENDOR_ID != GPT_VENDOR_ID)
#error "AUTOSAR configuration vendor id mismatch"
#endif

#if !defined(GPT_GEN_AR_RELEASE_MAJOR_VERSION)
#error "GPT_GEN_AR_RELEASE_MAJOR_VERSION is not defined"
#elif (GPT_GEN_AR_RELEASE_MAJOR_VERSION != GPT_AR_RELEASE_MAJOR_VERSION)
#error "AUTOSAR configuration AR release major number mismatch"
#endif

#if !defined(GPT_GEN_AR_RELEASE_MINOR_VERSION)
#error "GPT_GEN_AR_RELEASE_MINOR_VERSION is not defined"
#elif (GPT_GEN_AR_RELEASE_MINOR_VERSION != GPT_AR_RELEASE_MINOR_VERSION)
#error "AUTOSAR configuration AR release minor number mismatch"
#endif

#if !defined(GPT_GEN_AR_RELEASE_REVISION_VERSION)
#error "GPT_GEN_AR_RELEASE_REVISION_VERSION is not defined"
#elif (GPT_GEN_AR_RELEASE_REVISION_VERSION != GPT_AR_RELEASE_REVISION_VERSION)
#error "AUTOSAR configuration AR release revision number mismatch"
#endif

#if !defined(GPT_GEN_SW_MAJOR_VERSION)
#error "GPT_GEN_SW_MAJOR_VERSION is not defined"
#elif (GPT_GEN_SW_MAJOR_VERSION != GPT_SW_MAJOR_VERSION)
#error "AUTOSAR configuration SW major number mismatch"
#endif

#if !defined(GPT_GEN_SW_MINOR_VERSION)
#error "GPT_GEN_SW_MINOR_VERSION is not defined"
#elif (GPT_GEN_SW_MINOR_VERSION != GPT_SW_MINOR_VERSION)
#error "AUTOSAR configuration SW minor number mismatch"
#endif

#if !defined(GPT_GEN_SW_PATCH_VERSION)
#error "GPT_GEN_SW_PATCH_VERSION is not defined"
#elif !(GPT_GEN_SW_PATCH_VERSION >= 0)
#error "AUTOSAR configuration SW patch number mismatch"
#endif

/* Module and service identification */
#define GPT_GETVERSIONINFO        0x00U
#define GPT_INIT                  0x01U
#define GPT_DEINIT                0x02U
#define GPT_GETTIMEELAPSED        0x03U
#define GPT_GETTIMEREMAINING      0x04U
#define GPT_STARTTIMER            0x05U
#define GPT_STOPTIMER             0x06U
#define GPT_ENABLENOTIFICATION    0x07U
#define GPT_DISABLENOTIFICATION   0x08U
#define GPT_SETMODE               0x09U
#define GPT_DISABLEWAKEUP         0x0AU
#define GPT_ENABLEWAKEUP          0x0BU
#define GPT_CHECKWAKEUP           0x0CU
#define GPT_GETPREDEFTIMERVALUE   0x0DU
#define GPT_CHECKPREDEFTIMERSTATUS 0xFBU
#define GPT_SETPRESCALER          0xFCU
#define GPT_SETPREDEFTIMERPRESCALER 0xFDU
#define GPT_CHECKCHANNELSTATUS    0xFEU
#define GPT_TIMEREXPIRE           0xFFU     /* interrupt service routine */

/* \brief Development error codes */
#define GPT_E_UNINIT              0x0AU
#define GPT_E_BUSY                0x0BU
#define GPT_E_MODE                0x0CU
#define GPT_E_ALREADY_INITIALIZED 0x0DU
#define GPT_E_PARAM_CHANNEL       0x14U
#define GPT_E_PARAM_VALUE         0x15U
#define GPT_E_PARAM_POINTER       0x16U
#define GPT_E_PARAM_PREDEF_TIMER  0x17U
#define GPT_E_INIT_FAILED         0x0EU
#define GPT_E_PARAM_MODE          0x1FU
#define GPT_E_INTERNAL            0x22U    /* interrupt occurred on uninit driver */
#define GPT_E_PARAM_CLOCK         0x30U

/*==================[type definitions]======================================*/
/*==================[external function declarations]========================*/
#define GPT_START_SEC_CODE_ASIL_B
#include <Gpt_MemMap.h>

/** \brief Gpt_Init()
 **
 ** This function initializes the GPT driver.
 ** 
 ** \param[in] ConfigPtr  Pointer to a selected configuration structure.
*/
extern FUNC(void, GPT_CODE) Gpt_Init
(
  P2CONST(Gpt_ConfigType, AUTOMATIC, GPT_CONST) ConfigPtr
);

/** \brief Gpt_GetVersionInfo()
 **
 ** This function returns the version information of this module.
 **
 ** \param[out] VersionInfoPtr  Pointer to where to store the version information of this module.
*/
#if (GPT_VERSION_INFO_API == STD_ON)
extern FUNC(void, GPT_CODE) Gpt_GetVersionInfo
(
  P2VAR(Std_VersionInfoType, AUTOMATIC, GPT_APPL_DATA) VersionInfoPtr
);
#endif

/** \brief Gpt_DeInit()
 **
 ** This function deinitializes the GPT driver.
*/
#if (GPT_DEINIT_API == STD_ON)
extern FUNC(void, GPT_CODE) Gpt_DeInit(void);
#endif

/** \brief Gpt_GetTimeElapsed()
 **
 ** This function returns the time already elapsed.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return  Elapsed timer value (in number of ticks).
*/
#if (GPT_TIME_ELAPSED_API == STD_ON)
extern FUNC(Gpt_ValueType, GPT_CODE) Gpt_GetTimeElapsed(Gpt_ChannelType Channel);
#endif

/** \brief Gpt_GetTimeRemaining()
 **
 ** This function returns the time remaining until the target time is reached.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return Remaining timer value (in number of ticks).
*/
#if (GPT_TIME_REMAINING_API == STD_ON)
extern FUNC(Gpt_ValueType, GPT_CODE) Gpt_GetTimeRemaining(Gpt_ChannelType Channel);
#endif

/** \brief Gpt_StartTimer()
 **
 ** This function starts a timer channel.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Value    Target time in number of ticks.
*/
extern FUNC(void, GPT_CODE) Gpt_StartTimer(Gpt_ChannelType Channel, Gpt_ValueType Value);

/** \brief Gpt_StopTimer()
 **
 ** This function stops a timer channel.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
*/
extern FUNC(void, GPT_CODE) Gpt_StopTimer(Gpt_ChannelType Channel);

#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
/** \brief Gpt_EnableNotification()
 **
 ** This function enables the interrupt notification for a channel (relevant in normal mode).
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
*/
extern FUNC(void, GPT_CODE) Gpt_EnableNotification(Gpt_ChannelType Channel);

/** \brief Gpt_DisableNotification() 
 **
 ** This function disables the interrupt notification for a channel (relevant in normal mode).
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
*/
extern FUNC(void, GPT_CODE) Gpt_DisableNotification(Gpt_ChannelType Channel);
#endif

#if (GPT_WAKEUP_FUNCTIONALITY_API == STD_ON)
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
/** \brief Gpt_SetMode()
 **
 ** This function sets the operation mode of the GPT.
 **
 ** \param[in] Mode  GPT_MODE_NORMAL: Normal operation mode of the GPT driver. 
 **                  GPT_MODE_SLEEP : Sleep mode of the GPT driver (wakeup capable).
*/
extern FUNC(void, GPT_CODE) Gpt_SetMode(Gpt_ModeType Mode);

/** \brief Gpt_DisableWakeup()
 **
 ** This function disables the wakeup interrupt of a channel (relevant in sleep mode).
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
*/
extern FUNC(void, GPT_CODE) Gpt_DisableWakeup(Gpt_ChannelType Channel);

/** \brief Gpt_EnableWakeup()
 **
 ** This function enables the wakeup interrupt of a channel (relevant in sleep mode).
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
*/
extern FUNC(void, GPT_CODE) Gpt_EnableWakeup(Gpt_ChannelType Channel);

/** \brief Gpt_CheckWakeup()
 **
 ** This function checks if a wakeup capable GPT channel is the source for a wakeup event 
 ** and calls the ECU state manager service EcuM_SetWakeupEvent in case of a valid GPT. channel wakeup event. 
 **
 ** \param[in] WakeupSource  Information on wakeup source to be checked. The associated GPT channel can be determined from configuration data.
*/
extern FUNC(void, GPT_CODE) Gpt_CheckWakeup(EcuM_WakeupSourceType WakeupSource);
#endif
#endif

#if (GPT_SAFETY_FUNCTION_API == STD_ON)
/** \brief Gpt_CheckChannelStatus()
 **
 ** This function checks the register value, and gets the status.
 **
 ** \param[out] DriverStatusPtr  Pointer of driver status data.
 ** \param[out] ChannelStatusPtr Pointer of Channel status data.
 ** \param[in]  Channel          Numeric identifier of the GPT channel.
 ** \retval E_OK      no error has been detected.
 **         E_NOT_OK aborted due to errors.
*/
extern FUNC(Std_ReturnType, GPT_CODE) Gpt_CheckChannelStatus
(
  P2VAR(Gpt_DriverStateType, AUTOMATIC, GPT_APPL_DATA)  DriverStatusPtr,
  P2VAR(Gpt_ChannelStateType, AUTOMATIC, GPT_APPL_DATA) ChannelStatusPtr,
  Gpt_ChannelType Channel
);

/** \brief Gpt_CheckPredefTimerStatus()
 **
 ** This function checks the register value, and gets the status.
 **
 ** \param[out] DriverStatusPtr  Pointer of driver status data.
 ** \param[out] ChannelStatusPtr Pointer of Predef Timer status data.
 ** \param[in]  PredefTimer      GPT Predef Timer.
 ** \retval E_OK     no error has been detected.
 **         E_NOT_OK aborted due to errors.
*/
#if ( GPT_PREDEF_TIMER == STD_ON )
extern FUNC(Std_ReturnType, GPT_CODE) Gpt_CheckPredefTimerStatus
(
  P2VAR(Gpt_DriverStateType, AUTOMATIC, GPT_APPL_DATA)  DriverStatusPtr,
  P2VAR(Gpt_ChannelStateType, AUTOMATIC, GPT_APPL_DATA) ChannelStatusPtr,
  Gpt_PredefTimerType PredefTimer
);
#endif
#endif

/** \brief Gpt_GetPredefTimerValue()
 **
 ** This function delivers the current value of the desired GPT Predef Timer.
 **
 ** \param[in] PredefTimer  GPT Predef Timer.
 ** \param[out] TimeValuePtr Pointer to time value destination data in RAM.
 ** \return  E_NOT_OK : aborted due to errors.
                E_OK :       no error has been detected.
*/
#if ( GPT_PREDEF_TIMER == STD_ON )
extern FUNC(Std_ReturnType, GPT_CODE) Gpt_GetPredefTimerValue
(
  Gpt_PredefTimerType PredefTimer,
  P2VAR(uint32, AUTOMATIC, GPT_APPL_DATA) TimeValuePtr
);
#endif

#if (GPT_SET_PRESCALER_API == STD_ON)
/** \brief Gpt_SetPrescaler()
 **
 ** Set a timer prescaler.
 **
 ** \param[in] Channel  ChannelNumber.
 ** \param[in] ClockFrequency  Frequency change.
*/
extern FUNC(void, GPT_CODE) Gpt_SetPrescaler
(
  Gpt_ChannelType      Channel,
  Gpt_ClkFrequencyType ClockFrequency
);
#endif /* GPT_SET_PRESCALER_API == STD_ON */

/** \brief Gpt_SetPredefTimerPrescaler()
 **
 ** Set a predef timer prescaler.
 **
 ** \param[in] PredefTimer  GPT Predef Timer.
 ** \param[in] ClockFrequency  Clock Frequency Type.
*/
#if (GPT_SET_PREDEFTIMER_PRESCALER_API == STD_ON)
#if ( GPT_PREDEF_TIMER == STD_ON )
extern FUNC(void, GPT_CODE) Gpt_SetPredefTimerPrescaler
(
  Gpt_PredefTimerType PredefTimer,
  Gpt_ClkFrequencyType ClockFrequency
);
#endif /* GPT_PREDEF_TIMER == STD_ON */
#endif /* GPT_SET_PREDEFTIMER_PRESCALER_API == STD_ON */

#define GPT_STOP_SEC_CODE_ASIL_B
#include <Gpt_MemMap.h>

/*==================[internal function declarations]========================*/
/*==================[external constants]====================================*/
/*==================[internal constants]====================================*/
/*==================[external data]=========================================*/
/*==================[internal data]=========================================*/
/*==================[external function definitions]=========================*/
/*==================[internal function definitions]=========================*/

#endif
/*==================[end of file]===========================================*/
