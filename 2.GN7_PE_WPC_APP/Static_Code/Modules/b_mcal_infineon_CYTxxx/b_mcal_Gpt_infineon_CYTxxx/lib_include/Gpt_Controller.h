#ifndef GPT_CONTROLLER_H
#define GPT_CONTROLLER_H

/** \brief AUTOSAR Gpt GPT Driver
 **
 ** This file define interface of internal architecture function of Gpt driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Gpt_Public.h>          /* Module public types */

/*==================[macros]================================================*/
#define GPT_PREDEF_TIMER_16BIT_MASK     0x0000FFFFUL    /* 16bits mask for Predef timer value. */
#define GPT_PREDEF_TIMER_24BIT_MASK     0x00FFFFFFUL    /* 24bits mask for Predef timer value. */

/*==================[type definitions]======================================*/
/*==================[external function declarations]========================*/
/** \brief Prototypes for internal functions.*/
#define GPT_START_SEC_CODE_ASIL_B
#include <Gpt_MemMap.h>

/** \brief Gpt_GetTimeElapsed_Internal()
 **
 ** This function reads the timer counter value of elapsed time.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return the time already elapsed.
**/
extern FUNC(Gpt_ValueType, GPT_CODE) Gpt_GetTimeElapsed_Internal(Gpt_ChannelType Channel);

/** \brief Gpt_GetTimeRemaining_Internal()
 **
 ** This function reads the timer counter value of remaining time.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return the timer remaining until the target time is reached.
**/
extern FUNC(Gpt_ValueType, GPT_CODE) Gpt_GetTimeRemaining_Internal(Gpt_ChannelType Channel);

/** \brief Gpt_SetNotification()
 **
 ** This function sets(enables) the notification flag if the parameter Noti is GPT_TRUE, 
 ** and clears(disables) the notification flag if the parameter Noti is GPT_FALSE.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Noti     GPT_TRUE:  Sets the notification flag.
 **                     GPT_FALSE: Clears the notification flag.
**/
extern FUNC(void, GPT_CODE) Gpt_SetNotification(Gpt_ChannelType Channel, boolean Noti);

/** \brief Gpt_SetWakeup()
 **
 ** This function sets(enables) the wakeup flag if Wak is GPT_TRUE, 
 ** and clears(disables) the wakeup flag if Wak is GPT_FALSE.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Wak      GPT_TRUE:  Sets the wakeup flag.
 **                     GPT_FALSE: Clears the wakeup flag.
**/
extern FUNC(void, GPT_CODE) Gpt_SetWakeup(Gpt_ChannelType Channel, boolean Wak);

/** \brief Gpt_SetDeInit()
 **
 ** This function de-initializes the GPT driver.
 ** This function is executed when DET is ON.
 **
 ** \retval GPT_NOT_OK :  De-initialization is failed.
 **         GPT_OK :      De-initialization is success.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_SetDeInit(void);

/** \brief Gpt_SetDeInitStopTimer()
 **
 ** This function de-initializes the GPT driver.
 ** This function is executed when DET is OFF.
**/
extern FUNC(void, GPT_CODE) Gpt_SetDeInitStopTimer(void);

/** \brief Gpt_SetPredefTimerDeInit()
 **
 ** This function de-initializes the Predef Timer.
 **
**/
extern FUNC(void, GPT_CODE) Gpt_SetPredefTimerDeInit(void);

/** \brief Gpt_SetInit() initializes the driver.
 **
 ** This function initializes the GPT driver.
 **
 ** \param[in] ConfigPtr  Pointer to a selected configuration structure.
*/
extern FUNC(void, GPT_CODE) Gpt_SetInit(P2CONST(Gpt_ConfigType, AUTOMATIC, GPT_CONST) ConfigPtr);

/** \brief Gpt_SetPredefTimerInit() initializes the Predef Timer.
 **
 ** This function initializes the Predef Timer.
 **
 ** \param[in] PredefTimerStartTrigger  Start trigger of Predef Timer synchronous start.
*/
extern FUNC(void, GPT_CODE) Gpt_SetPredefTimerInit(Gpt_InputTriggerType PredefTimerStartTrigger);

/** \brief Gpt_SetMode_Internal()
 **
 ** This function sets the driver mode.
 **
 ** \param[in] Mode  GPT_MODE_NORMAL: Normal operation mode of the GPT driver. 
 **                  GPT_MODE_SLEEP : Sleep mode of the GPT driver.
 **
 ** \retval GPT_NOT_OK :   Sets the driver mode is failed.
 **         GPT_OK :       Sets the driver mode is success.
*/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_SetMode_Internal(Gpt_ModeType Mode);

/** \brief Gpt_SetPredefTimerMode_Internal()
 **
 ** This function sets the Predef Timer reference to  driver mode.
 **
 ** \param[in] Mode  GPT_MODE_NORMAL: Normal operation mode of the GPT driver. 
 **                  GPT_MODE_SLEEP : Sleep mode of the GPT driver.
 ** \param[in] PredefTimerStartTrigger  Start trigger of Predef Timer synchronous start.
*/
extern FUNC(void, GPT_CODE) Gpt_SetPredefTimerMode_Internal(Gpt_ModeType Mode, Gpt_InputTriggerType PredefTimerStartTrigger);

/** \brief Gpt_SetStartTimer()
 **
 ** This function starts the GPT timer.
 **
 ** \param[in] Channel    Numeric identifier of the GPT channel.
 ** \param[in] Interval   Target time in number of ticks.
*/
extern FUNC(void, GPT_CODE) Gpt_SetStartTimer(Gpt_ChannelType Channel, Gpt_ValueType Interval);

/** \brief Gpt_SetStopTimer()
 **
 ** This function stops the GPT timer.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
*/
extern FUNC(void, GPT_CODE) Gpt_SetStopTimer(Gpt_ChannelType Channel);

/** \brief Gpt_Arch_CheckTimerRange()
 **
 ** This function checks whether the parameter Value is inside of range.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Value    Target time in number of the ticks.
 **
 ** \retval GPT_OK:     In range.
 **         GPT_NOT_OK: Out of range.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_Arch_CheckTimerRange(Gpt_ChannelType Channel, Gpt_ValueType Value);

/** \brief Gpt_Arch_TimerExpire()
 **
 ** This function executes the ISR's processing.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \retval GPT_OK      Calls EcuM_CheckWakeup function.
 **         GPT_NOT_OK  Don't call EcuM_CheckWakeup function.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_Arch_TimerExpire(Gpt_ChannelType Channel);

/** \brief Gpt_Arch_ClearInterruptFlag()
 **
 ** This function reads and clears the interrupt flag.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \retval GPT_OK      Interrupt flag is ON and cleared.
 **         GPT_NOT_OK  Interrupt flag is OFF.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_Arch_ClearInterruptFlag(Gpt_ChannelType Channel);

/** \brief Gpt_Arch_CheckPredefTimerParameter()
 **
 ** This function checks the Predef timer parameter value whether is valid.
 **
 ** \param[in] PredefTimer  GPT Predef Timer.
 **
 ** \retval GPT_OK      PredefTimer is valid.
 **         GPT_NOT_OK  PredefTimer is invalid.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_Arch_CheckPredefTimerParameter(Gpt_PredefTimerType PredefTimer);

/** \brief Gpt_Arch_CheckPredefTimerRunning()
 **
 ** This function checks the Predef timer is running.
 **
 ** \param[in] PredefTimer  GPT Predef Timer.
 **
 ** \retval GPT_OK      PredefTimer is running.
 **         GPT_NOT_OK  PredefTimer is not running.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_Arch_CheckPredefTimerRunning(Gpt_PredefTimerType PredefTimer);

/** \brief Gpt_Arch_CheckChannelWakeup()
 **
 ** This function checks whether the wakeup function is enabled.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \retval GPT_OK      Wakeup setting is enabled.
 **         GPT_NOT_OK  Wakeup setting is disabled.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_Arch_CheckChannelWakeup(Gpt_ChannelType Channel);

/** \brief Gpt_Arch_GetClockSource()
 **
 ** This function gets the Clock Source of channel.
 **
 ** \param[in] ChannelNumber   Numeric identifier of the GPT channel.
 **
 ** \retval   GPT_CLK_EXT : External clock.
 **           GPT_CLK_INT : Internal clock.
**/
extern FUNC(Gpt_ClockType, GPT_CODE) Gpt_Arch_GetClockSource(Gpt_ChannelType ChannelNumber);

/** \brief Gpt_CheckNeedWakeup()
 **
 ** This function checks whether this module need call the EcuM_CheckWakeup.
 **
 ** \param[in] Channel Numeric identifier of the GPT channel.
 **
 ** \retval GPT_OK :   Need to wake up.
 **         GPT_NOT_OK:   Not need to wake up.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_CheckNeedWakeup(Gpt_ChannelType Channel);

/** \brief Gpt_CheckChannelStatus_Internal()
 **
 ** This function checks whether register value is correct, and gets status value.
 **
 ** \param[in]  Channel       Numeric identifier of the GPT channel.
 ** \param[out] DriverStatusPtr  Pointer of driver status data.
 ** \param[out] ChannelStatusPtr Pointer of channel status data.
 **
 ** \retval GPT_OK      read register is not failed.
 **         GPT_NOT_OK  read register is failed.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_CheckChannelStatus_Internal
(
  Gpt_ChannelType Channel,
  P2VAR(Gpt_DriverStateType, AUTOMATIC, GPT_APPL_DATA)  DriverStatusPtr,
  P2VAR(Gpt_ChannelStateType, AUTOMATIC, GPT_APPL_DATA) ChannelStatusPtr
);

/** \brief Gpt_CheckPredefTimerStatus_Internal()
 **
 ** This function checks whether register value is correct, and gets status value.
 **
 ** \param[in]  PredefTimer      GPT Predef Timer.
 ** \param[out] DriverStatusPtr  Pointer of driver status data.
 ** \param[out] ChannelStatusPtr Pointer of channel status data.
 ** \param[in] PredefTimerStartTrigger  Start trigger of Predef Timer synchronous start.
 **
 ** \retval GPT_OK      read register is not failed.
 **         GPT_NOT_OK  read register is failed.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_CheckPredefTimerStatus_Internal
(
  Gpt_PredefTimerType PredefTimer,
  P2VAR(Gpt_DriverStateType,  AUTOMATIC, GPT_APPL_DATA) DriverStatusPtr,
  P2VAR(Gpt_ChannelStateType, AUTOMATIC, GPT_APPL_DATA) ChannelStatusPtr,
  Gpt_InputTriggerType PredefTimerStartTrigger
);

/** \brief Gpt_GetPredefTimerValue_Internal()
 **
 ** This function reads the Predef timer counter value of remaining time.
 **
 ** \param[in]  PredefTimer          Types of PredefTimer.
 ** \param[out] TimeValuePtr  Time Ptr.
 **
 ** \retval GPT_NOT_OK : reading predef timer value is failed.
 **         GPT_OK :     reading predef timer value is success.
**/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_GetPredefTimerValue_Internal
(
  Gpt_PredefTimerType PredefTimer,
  P2VAR(Gpt_ValueType,  AUTOMATIC, GPT_APPL_DATA) TimeValuePtr
);

/** \brief Gpt_SetPrescaler_Internal()
 **
 ** This function sets the prescaler value.
 **
 ** \param[in] ChannelNumber   Channel ID.
 ** \param[in] ClockFrequency  Clock Frequency.
 **
 ** \retval GPT_OK      Set prescaler is success.
 **         GPT_NOT_OK  Set prescaler is failed.
*/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_SetPrescaler_Internal(Gpt_ChannelType ChannelNumber, Gpt_ClkFrequencyType ClockFrequency);

/** \brief Gpt_SetPredefTimerPrescaler_Internal()
 **
 ** This function sets the Predef timer's Prescaler value.
 **
 ** \param[in] PredefTimer   GPT Predef Timer.
 ** \param[in] ClockFrequency  Clock Frequency.
 ** \param[in] PredefTimerStartTrigger  Start trigger of Predef Timer synchronous start.
 **
 ** \retval GPT_OK      Set Predef prescaler is success.
 **         GPT_NOT_OK  Set Predef prescaler is failed.
*/
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_SetPredefTimerPrescaler_Internal(Gpt_PredefTimerType PredefTimer, Gpt_ClkFrequencyType ClockFrequency, Gpt_InputTriggerType PredefTimerStartTrigger);

/** \brief Gpt_DisableInterruptByBaseAddr()
 **
 ** This function disable interrupt.
 **
 ** \param[in] BaseAddrPtr  Base address of channel to disable interrupt.
**/
extern FUNC(void, GPT_CODE) Gpt_DisableInterruptByBaseAddr
(
  volatile P2VAR(uint32, GPT_CONST, REGSPACE) BaseAddrPtr
);

/** \brief Gpt_GetConfigPtr()
 **
 ** This function gets the configuration data pointer.
 **
 ** \return the configuration data pointer.
*/
extern FUNC_P2CONST(Gpt_ConfigType, AUTOMATIC, GPT_CODE) Gpt_GetConfigPtr(void);

/** \brief Gpt_SetConfigPtr()
 **
 ** This function sets the configuration data.
 **
 **  \param[in] the configuration data pointer.
*/
extern FUNC(void, GPT_CODE) Gpt_SetConfigPtr(P2CONST(Gpt_ConfigType, AUTOMATIC, GPT_CONST) ConfigPtr);

/** \brief Gpt_CheckConfigPtr
 **
 ** Internal implementation: This function check the configuration pointer address. 
 **
 ** \param [in] ConfigPtr       Pointer of data stored configuration set information.
 **
 ** \return If parameter ConfigPtr is a valid config set pointer, return GPT_OK,
 **         else return GPT_NOT_OK.
 */
extern FUNC(Gpt_ReturnType, GPT_CODE) Gpt_CheckConfigPtr(P2CONST(Gpt_ConfigType, AUTOMATIC, GPT_CONST) ConfigPtr);

/** \brief Gpt_Isr_Vector_Internal()
 **
 ** Internal service of Gpt interrupt routine.
 **
 ** \param[in] ResourceIndex  Resource index of TCPWM peripheral.
 ** \param[in] BaseAddrPtr    Base address of channel.
 **
 */
extern FUNC(void, GPT_CODE) Gpt_IsrVector_Internal(uint16 ResourceIndex, volatile P2VAR(uint32, GPT_CONST, REGSPACE) BaseAddrPtr);

#define GPT_STOP_SEC_CODE_ASIL_B
#include <Gpt_MemMap.h>

/*==================[internal function declarations]========================*/
/*==================[external constants]====================================*/
/*==================[internal constants]====================================*/
/*==================[external data]=========================================*/
/*==================[internal data]=========================================*/
/*==================[external function definitions]=========================*/
/*==================[internal function definitions]=========================*/

#endif
/*==================[end of file]===========================================*/
