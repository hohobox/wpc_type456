#ifndef MCU_TYPES_H
# define MCU_TYPES_H 1

/** \brief AUTOSAR Mcu Driver
 **
 ** This file contains the declaration of the AUTOSAR module Mcu types
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Std_Types.h>     /* AUTOSAR standard types */

/*==================[macros]=================================================*/
/*==================[type definitions]=======================================*/
/** \brief The type of MCU driver status
*/

/** \brief Type definitions for CSV_STRUCT register.
 **
 ** This type contains the structures for CSV_STRUCT register.
 */
typedef struct
{
  uint32  REF_CTL;
  uint32  REF_LIMIT;
  uint32  MON_CTL;
  uint32  CNT_STAT;
}
Mcu_ClkCsvRegType;


/** \brief Type definitions for Backup clock configuration.
 **
 ** This type contains the structures for Backup clock configuration.
 */
typedef struct
{
  uint32  CtlRegVal;
  uint32  CtlRegMask;
  uint32  WcoStabToCnt;
  uint8   WcoEn;
  uint8   WcoStopEnable;
}
Mcu_BackupConfigDataType;


/** \brief Type definitions for BACKUP register.
 **
 ** This type contains the structures for BACKUP register.
 */
typedef struct
{
  uint32  CTL;
  uint32  Reserved1;
  uint32  RTC_RW;
  uint32  Reserved2;
  uint32  STATUS;
  uint32  Reserved3[27];
  uint32  LPECO_CTL;
  uint32  LPECO_PRESCALE;
  uint32  LPECO_STATUS;
  uint32  Reserved4[29];
  Mcu_ClkCsvRegType  CLK_BAK_CSV;
}
Mcu_BackupRegType;


/** \brief Type definitions for PLL400_STRUCT register.
 **
 ** This type contains the structures for PLL400_STRUCT register.
 */
typedef struct {
  uint32  PLL400_STRUCT_CONFIG;
  uint32  PLL400_STRUCT_CONFIG2;
  uint32  PLL400_STRUCT_CONFIG3;
  uint32  PLL400_STRUCT_STATUS;
} Mcu_SscgRegType;


/** \brief Type definitions for Clock output configuration.
 **
 ** This type contains the structures for Clock output configuration.
 */
typedef struct
{
  uint32  TstDdftFastCtlRegVal;
  uint32  TstDdftSlowCtlRegVal;
  uint32  ClkOutputFastRegVal;
  uint32  ClkOutputSlowRegVal;
}
Mcu_ClockOutputConfigDataType;


/** \brief Type definitions for Clock path configuration.
 **
 ** This type contains the structures for Clock path configuration.
 */
typedef struct
{
  uint32  ClkPathSelectRegVal;
  uint8   ClockPathRegIdx;
}
Mcu_ClockPathConfigDataType;


/** \brief Type definitions for Clock root configuration.
 **
 ** This type contains the structures for Clock root configuration.
 */
typedef struct
{
  uint32  ClkRootSelectRegVal;
  uint8   ClockRootRegIdx;
}
Mcu_ClockRootConfigDataType;


/** \brief Type definitions for CM0P_SCS register.
 **
 ** This type contains the structures for CM0P_SCS register.
 */
typedef struct
{
  uint32  Reserved[4];
  uint32  SYST_CSR;
  uint32  Reserved2[827];
  uint32  CPUID;
  uint32  Reserved3[2];
  uint32  AIRCR;
  uint32  SCR;
}
Mcu_Cm0ScsRegType;


/** \brief Type definitions for CM4_SCS register.
 **
 ** This type contains the structures for CM4_SCS register.
 */
typedef struct
{
  uint32  Reserved1[2];
  uint32  ACTLR;
  uint32  Reserved2;
  uint32  SYST_CSR;
  uint32  Reserved3[827];
  uint32  CPUID;
  uint32  Reserved4[2];
  uint32  AIRCR;
  uint32  SCR;
  uint32  CCR;
  uint32  Reserved5[26];
  uint32  CCSIDR;
  uint32  CSSELR;
  uint32  Reserved6[114];
  uint32  ICIALLU;
  uint32  Reserved7[3];
  uint32  DCISW;
  uint32  Reserved8[2];
  uint32  DCCSW;
  uint32  Reserved9;
  uint32  DCCISW;
}
Mcu_Cm4ScsRegType;


/** \brief Type definition for McuCpuPowerMode
 **
 ** This type shows cpu power mode definition.
 */
typedef uint8 Mcu_CpuPowerModeType;

#define  MCU_CPUPOWERMODE_MIN_INVALID           ((Mcu_CpuPowerModeType)0U)
#define  MCU_CPUPOWERMODE_ACTIVE                ((Mcu_CpuPowerModeType)1U)
#define  MCU_CPUPOWERMODE_SLEEP                 ((Mcu_CpuPowerModeType)2U)
#define  MCU_CPUPOWERMODE_DEEPSLEEP             ((Mcu_CpuPowerModeType)3U)
#define  MCU_CPUPOWERMODE_HIBERNATE             ((Mcu_CpuPowerModeType)4U)
#define  MCU_CPUPOWERMODE_MAX_INVALID           ((Mcu_CpuPowerModeType)5U)


/** \brief Type definition for CPU status.
 **
 ** This type shows CPU status definition.
 */
typedef uint8 Mcu_CpuStatusType;

#define  MCU_CPUSTATUS_ACTIVE                   ((Mcu_CpuStatusType)0U)
#define  MCU_CPUSTATUS_SLEEP                    ((Mcu_CpuStatusType)1U)
#define  MCU_CPUSTATUS_DEEPSLEEP                ((Mcu_CpuStatusType)2U)
#define  MCU_CPUSTATUS_OFF                      ((Mcu_CpuStatusType)3U)


/** \brief Data structure for Fast Clock register.
 **
 ** This data shows Fast Clock register.
 */
typedef struct
{
  uint32  FAST_STATUS;
  uint32  FAST_CLOCK_CTL;
  uint32  Reserved1[197];
  uint32  TRC_DBG_CLOCK_CTL;
  uint32  Reserved2[56];
}
Mcu_FastClockRegType;


/** \brief Data structure for Fast Power register.
 **
 ** This data shows Fast Power register.
 */
typedef struct
{
  uint32  FAST_PWR_CTL;
  uint32  FAST_PWR_DELAY_CTL;
  uint32  Reserved[2];
}
Mcu_FastPwrRegType;


/** \brief Data structure for CPUSS register.
 **
 ** This data shows CPUSS register.
 */
typedef struct
{
  uint32                IDENTITY;
  Mcu_FastClockRegType  FAST_CLOCK[2];
  uint32                Reserved1[511];
  uint32                CM0_CTL;
  uint32                CM0_STATUS;
  uint32                SLOW_CLOCK_CTL;
  uint32                PERI_CLOCK_CTL;
  uint32                MEM_CLOCK_CTL;
  uint32                Reserved2[123];
  Mcu_FastPwrRegType    FAST_PWR[2];
  uint32                Reserved3[56];
  uint32                RAM0_CTL;
  uint32                RAM0_STATUS;
  uint32                Reserved4[14];
  uint32                RAM0_PWR_MACRO_CTL[16];
  uint32                RAM1_CTL;
  uint32                RAM1_STATUS;
  uint32                RAM1_PWR_CTL;
  uint32                Reserved5[5];
  uint32                RAM2_CTL;
  uint32                RAM2_STATUS;
  uint32                RAM2_PWR_CTL;
  uint32                Reserved6[5];
  uint32                RAM_PWR_DELAY_CTL;
  uint32                ROM_CTL;
  uint32                Reserved7[142];
  uint32                SYSTICK_CTL;
  uint32                Reserved8[6783];
  uint32                CM0_SYSTEM_INT_CTL[1023];
  uint32                Reserved9[1025];
  uint32                FAST_0_SYSTEM_INT_CTL[1023];
  uint32                FAST_1_SYSTEM_INT_CTL[1023];
}
Mcu_CpussRegType;


/** \brief Data structure for DW register.
 **
 ** This data shows DW register.
 */
typedef struct
{
  uint32  DW_CTL;
}
Mcu_DwRegType;


/** \brief Data structure for DMAC register.
 **
 ** This data shows DMAC register.
 */
typedef struct
{
  uint32  DMAC_CTL;
}
Mcu_DmaRegType;


/** \brief Data structure for Csv configuration.
 **
 ** This data shows Csv configuration.
 */
typedef struct
{
  uint32  RefCtlRegVal;
  uint32  RefLimitRegVal;
  uint32  MonCtlRegVal;
}
Mcu_CsvConfigDataType;


/** \brief Data structure for Dsi clock configuration.
 **
 ** This data shows Dsi clock configuration.
 */
typedef struct
{
  uint32  ClkDsiSelectRegVal;
  uint8   DsiRegIdx;
}
Mcu_DsiConfigDataType;


/** \brief Data structure for Eco clock configuration.
 **
 ** This data shows Eco clock configuration.
 */
typedef struct
{
  uint32  ClkEcoConfigRegVal;
  uint32  ClkEcoConfig2RegVal;
  uint32  ClkEcoPrescalerRegVal;
  uint32  EcoStabToCnt;
  uint32  EcoPrescalerEnToCnt;
  uint8   ClkEcoConfig2Update;
  uint8   EcoPrescalerEn;
  uint8   EcoPrescalerNum;
}
Mcu_EcoConfigDataType;


/** \brief Data structure for LPECO clock configuration.
 **
 ** This data shows LPECO clock configuration.
 */
typedef struct {
  uint32 LpEcoCtlRegVal;
  uint32 LpEcoPrescalerRegVal;
  uint32 LpEcoStabToCnt;
  uint32 LpEcoPrescalerEnToCnt;
  uint8  LpEcoEn;
  uint8  LpEcoStopEnable;
  uint8  LpEcoPrescalerEn;
  uint8  LpEcoPrescalerNum;
} Mcu_LpEcoConfigDataType;


/** \brief Data structure for FLASHC register.
 **
 ** This data shows FLASHC register.
 */
typedef struct
{
  uint32  FLASH_CTL;
}
Mcu_FlashRegType;


/** \brief Data structure for FLL clock configuration.
 **
 ** This data shows FLL clock configuration.
 */
typedef struct
{
  uint32  ClkFllConfigRegVal;
  uint32  ClkFllConfig2RegVal;
  uint32  ClkFllConfig3RegVal;
  uint32  ClkFllConfig4RegVal;
  uint32  FllStabToCnt;
  uint32  FllCcoStabToCnt;
  uint32  FllBypassWaitCycle;
  uint8   FllEn;
  uint8   FllStopEnable;
}
Mcu_FllConfigDataType;


/** \brief Data structure for Hf Csv configuration.
 **
 ** This data shows Hf Csv configuration.
 */
typedef struct
{
  uint32  HfCtlRegVal;
  uint32  HfLimitRegVal;
  uint32  MonCtlRegVal;
  uint8   HfCsvRegIdx;
}
Mcu_HfCsvConfigDataType;


/** \brief Data structure for Hibernate configuration.
 **
 ** This data shows Hibernate configuration.
 */
typedef struct
{
  uint32  PwrHibernateRegVal;
  uint32  PwrHibernateRegMask;
  uint32  PwrHibWakeCtlRegVal;
  uint32  PwrHibWakeCtlRegMask;
  uint32  PwrHibWakeCtl2RegVal;
  uint32  PwrHibWakeCtl2RegMask;
  uint8   ClearPendingWakeupEn;
}
Mcu_HibConfigDataType;


/** \brief Data structure for Hv Lvd configuration.
 **
 ** This data shows Hv Lvd configuration.
 */
typedef struct
{
  uint32  PwrLvdCtlRegVal;
  uint8   LvdType;
  uint8   LvdEn;
  uint8   LvdDpSlpEn;
  uint8   IntEn;
  uint8   LvdStopEnable;
}
Mcu_HvLvdConfigDataType;


#define  MCU_HVLVD_HVLVD1                    1U
#define  MCU_HVLVD_HVLVD2                    2U


/** \brief Data structure for Pclk 16.0 divider configuration.
 **
 ** This data shows Pclk 16.0 divider configuration.
 */
typedef struct
{
  uint16  Pclk160DividerIntVal;
  uint8   Pclk160DividerIdx;
}
Mcu_Pclk160DividerConfigDataType;


/** \brief Data structure for Pclk 16.5 divider configuration.
 **
 ** This data shows Pclk 16.5 divider configuration.
 */
typedef struct
{
  uint16  Pclk165DividerIntVal;
  uint8   Pclk165DividerFracVal;
  uint8   Pclk165DividerIdx;
}
Mcu_Pclk165DividerConfigDataType;


/** \brief Data structure for Pclk 24.5 divider configuration.
 **
 ** This data shows Pclk 24.5 divider configuration.
 */
typedef struct
{
  uint32  Pclk245DividerIntVal;
  uint8   Pclk245DividerFracVal;
  uint8   Pclk245DividerIdx;
}
Mcu_Pclk245DividerConfigDataType;


/** \brief Data structure for Pclk 8.0 divider configuration.
 **
 ** This data shows Pclk 8.0 divider configuration.
 */
typedef struct
{
  uint8  Pclk80DividerIntVal;
  uint8  Pclk80DividerIdx;
}
Mcu_Pclk80DividerConfigDataType;


/** \brief Data structure for Pclk configuration.
 **
 ** This data shows Pclk configuration.
 */
typedef struct
{
  uint32  ClockCtlRegVal;
  uint16  PclkRegIdx;
}
Mcu_PclkConfigDataType;


/** \brief Data structure for Pclk divider configuration.
 **
 ** This data shows Pclk divider configuration.
 */
typedef struct
{
  uint8  PclkDividerIdx;
  uint8  PclkDividerType;
  uint8  PclkPaDividerIdx;
  uint8  PclkPaDividerType;
  uint8  PclkDividerCfgIdx;
  uint8  PclkDividerEnable;
  uint8  PclkDividerStopEnable;
}
Mcu_PclkDividerConfigDataType;


/** \brief Data structure for Peripheral Group configuration.
 **
 ** This data shows Peripheral Group configuration.
 */
typedef struct
{
  uint32  ClockCtlRegVal;
  uint32  SlCtlRegVal;
  uint32  SlCtlRegMask;
  uint8   PeriGroupRegIdx;
}
Mcu_PeriGroupConfigDataType;


/** \brief Data structure for PERI_GROUP_STRUCT group register.
 **
 ** This data shows PERI_GROUP_STRUCT group register.
 */
typedef struct
{
  uint32  CLOCK_CTL;
  uint32  Reserved1[3];
  uint32  SL_CTL;
  uint32  Reserved2[3];
}
Mcu_PeriGroupRegType;


/** \brief Data structure for PERI register.
 **
 ** This data shows PERI register.
 */
typedef struct
{
  uint32                Reserved1[128];
  uint32                TIMEOUT_CTL;
  uint32                Reserved2[3967];
  Mcu_PeriGroupRegType  PERI_GROUP[16];
}
Mcu_PeriRegType;


/** \brief Data structure for PERI Pclk register.
 **
 ** This data shows PERI Pclk register.
 */
typedef struct
{
  uint32  DIV_CMD;
  uint32  Reserved1[767];
  uint32  CLOCK_CTL[256];
  uint32  DIV_8_CTL[256];
  uint32  DIV_16_CTL[256];
  uint32  DIV_16_5_CTL[256];
  uint32  DIV_24_5_CTL[255];
  uint32  Reserved2[1];
}
Mcu_PclkRegType;


/** \brief Data structure for PLL clock configuration.
 **
 ** This data shows PLL clock configuration.
 */
typedef struct
{
  uint32  ClkPllConfigRegVal;
  uint32  PllStabToCnt;
  uint32  PllBypassWaitCycle;
  uint32  PllRegIdx;
  uint8   PllEn;
  uint8   PllStopEnable;
}
Mcu_PllConfigDataType;


/** \brief Data structure for SSCG clock configuration.
 **
 ** This data shows SSCG clock configuration.
 */
typedef struct
{
  uint32  Pll400ConfigRegVal;
  uint32  Pll400Config2RegVal;
  uint32  Pll400Config3RegVal;
  uint32  SscgStabToCnt;
  uint32  SscgBypassWaitCycle;
  uint32  SscgRegIdx;
  uint8   SscgEn;
  uint8   SscgStopEnable;
}
Mcu_SscgConfigDataType;


/** \brief Data structure for PCLK Group clock configuration.
 **
 ** This data shows PCLK Group clock configuration.
 */
typedef struct
{
  P2CONST( Mcu_PclkDividerConfigDataType,    MCU_CONST, MCU_APPL_CONST )  PclkDividerConfigPtr;
  P2CONST( Mcu_PclkConfigDataType,           MCU_CONST, MCU_APPL_CONST )  PclkConfigPtr;
  P2CONST( Mcu_Pclk80DividerConfigDataType,  MCU_CONST, MCU_APPL_CONST )  Pclk80DividerConfigPtr;
  P2CONST( Mcu_Pclk160DividerConfigDataType, MCU_CONST, MCU_APPL_CONST )  Pclk160DividerConfigPtr;
  P2CONST( Mcu_Pclk165DividerConfigDataType, MCU_CONST, MCU_APPL_CONST )  Pclk165DividerConfigPtr;
  P2CONST( Mcu_Pclk245DividerConfigDataType, MCU_CONST, MCU_APPL_CONST )  Pclk245DividerConfigPtr;
  uint16                                                                  PclkConfigNum;
  uint16                                                                  PclkDividerConfigNum;
  uint16                                                                  Pclk80DividerConfigNum;
  uint16                                                                  Pclk160DividerConfigNum;
  uint16                                                                  Pclk165DividerConfigNum;
  uint8                                                                   Pclk245DividerConfigNum;
  uint8                                                                   PclkGroupRegIdx;
}
Mcu_PclkGroupConfigDataType;


/** \brief Data structure for Ram0 Power macro configuration.
 **
 ** This data shows Ram0 Power macro configuration.
 */
typedef struct
{
  uint32  Ram0PwrMacroCtlRegVal;
  uint8   Ram0PwrMacroRegIdx;
}
Mcu_Ram0PwrMacroConfigType;


/** \brief The type of Ram State
 **
 ** This is the Ram State data type returned by the function Mcu_GetRamState of the Mcu module.
 ** It is not required that all RAM state types are supported by the hardware.
*/
typedef enum
{
  MCU_RAMSTATE_INVALID,
  MCU_RAMSTATE_VALID
}
Mcu_RamStateType;


/** \brief Type definition for Reset register.
 **
 ** This type shows Reset register.
 */
typedef uint32 Mcu_RegResetType;

#define  MCU_REG_RESET_TYPE_DISABLE             0U
#define  MCU_REG_RESET_TYPE_SW                  1U

/** \brief Data structure for SSRS register.
 **
 ** This data shows SSRS register.
 */
typedef struct
{
  uint32             Reserved1[64];
  uint32             CLK_DSI_SELECT[16];
  uint32             CLK_OUTPUT_FAST;
  uint32             CLK_OUTPUT_SLOW;
  uint32             CLK_CAL_CNT1;
  uint32             CLK_CAL_CNT2;
  uint32             Reserved2[44];
  uint32             SRSS_INTR;
  uint32             SRSS_INTR_SET;
  uint32             SRSS_INTR_MASK;
  uint32             SRSS_INTR_MASKED;
  uint32             Reserved3[892];
  uint32             PWR_CTL;
  uint32             PWR_CTL2;
  uint32             PWR_HIBERNATE;
  uint32             Reserved4[3];
  uint32             PWR_SSV_CTL;
  uint32             PWR_SSV_STATUS;
  uint32             PWR_LVD_CTL;
  uint32             PWR_LVD_CTL2;
  uint32             PWR_REGHC_CTL;
  uint32             PWR_REGHC_STATUS;
  uint32             PWR_REGHC_CTL2;
  uint32             PWR_REGHC_CTL3;
  uint32             PWR_REGHC_CTL4;
  uint32             Reserved5;
  uint32             PWR_HIB_DATA[16];
  uint32             Reserved6[16];
  uint32             PWR_PMIC_CTL;
  uint32             PWR_PMIC_STATUS;
  uint32             PWR_PMIC_CTL2;
  uint32             PWR_PMIC_CTL3;
  uint32             PWR_PMIC_CTL4;
  uint32             Reserved7[3];
  uint32             PWR_HIB_WAKE_CTL;
  uint32             PWR_HIB_WAKE_CTL2;
  uint32             Reserved8;
  uint32             PWR_HIB_WAKE_CAUSE;
  uint32             Reserved9[5];
  uint32             TST_DDFT_FAST_CTL;
  uint32             TST_DDFT_SLOW_CTL;
  uint32             Reserved10[61];
  uint32             CLK_PATH_SELECT[16];
  uint32             CLK_ROOT_SELECT[16];
  uint32             Reserved11[96];
  Mcu_ClkCsvRegType  CLK_HF_CSV[16];
  uint32             CLK_SELECT;
  uint32             CLK_TIMER_CTL;
  uint32             CLK_ILO0_CONFIG;
  uint32             CLK_ILO1_CONFIG;
  uint32             Reserved12[2];
  uint32             CLK_IMO_CONFIG;
  uint32             CLK_ECO_CONFIG;
  uint32             CLK_ECO_PRESCALE;
  uint32             CLK_ECO_STATUS;
  uint32             Reserved13[2];
  uint32             CLK_FLL_CONFIG;
  uint32             CLK_FLL_CONFIG2;
  uint32             CLK_FLL_CONFIG3;
  uint32             CLK_FLL_CONFIG4;
  uint32             CLK_FLL_STATUS;
  uint32             CLK_ECO_CONFIG2;
  uint32             Reserved14[46];
  uint32             CLK_PLL_CONFIG[15];
  uint32             Reserved15;
  uint32             CLK_PLL_STATUS[15];
  uint32             Reserved16[33];
  uint32             CSV_REF_SEL;
  uint32             Reserved17[3];
  Mcu_ClkCsvRegType  CLK_REF_CSV;
  Mcu_ClkCsvRegType  CLK_LF_CSV;
  Mcu_ClkCsvRegType  CLK_ILO_CSV;
  uint32             Reserved18[48];
  uint32             RES_CAUSE;
  uint32             RES_CAUSE2;
  uint32             Reserved19[62];
  Mcu_SscgRegType    PLL400_STRUCT[15];
  uint32             Reserved20[10644];
  uint32             WDT_LOCK;
}
Mcu_SrssRegType;


/** \brief Data structure for Register base address.
 **
 ** This data shows Register base address.
 */
typedef struct
{
  CONSTP2VAR( volatile Mcu_PeriRegType,   AUTOMATIC, REGSPACE )  PeriRegBaseAddr;
  CONSTP2VAR( volatile Mcu_PclkRegType,   AUTOMATIC, REGSPACE )  PclkRegBaseAddr;
  uint32                                                         DivcmdOffset;
  uint32                                                         PeriGroupOffset;
  CONSTP2VAR( volatile Mcu_CpussRegType,  AUTOMATIC, REGSPACE )  CpussRegBaseAddr;
  CONSTP2VAR( volatile Mcu_DwRegType,     AUTOMATIC, REGSPACE )  Dw0RegBaseAddr;
  CONSTP2VAR( volatile Mcu_DwRegType,     AUTOMATIC, REGSPACE )  Dw1RegBaseAddr;
  CONSTP2VAR( volatile Mcu_DmaRegType,    AUTOMATIC, REGSPACE )  DmaRegBaseAddr;
  CONSTP2VAR( volatile Mcu_FlashRegType,  AUTOMATIC, REGSPACE )  FlashRegBaseAddr;
  CONSTP2VAR( volatile Mcu_SrssRegType,   AUTOMATIC, REGSPACE )  SrssRegBaseAddr;
  CONSTP2VAR( volatile Mcu_BackupRegType, AUTOMATIC, REGSPACE )  BackupRegBaseAddr;
  CONSTP2VAR( volatile Mcu_Cm0ScsRegType, AUTOMATIC, REGSPACE )  Cm0ScsRegBaseAddr;
  CONSTP2VAR( volatile Mcu_Cm4ScsRegType, AUTOMATIC, REGSPACE )  Cm4ScsRegBaseAddr;
}
Mcu_RegBaseAddrType;


/** \brief Type definition for System status.
 **
 ** This type shows System status definition.
 */
typedef uint8 Mcu_SysStatusType;

#define  MCU_SYSSTATUS_RESET                    ((Mcu_SysStatusType)0U)
#define  MCU_SYSSTATUS_ACTIVE                   ((Mcu_SysStatusType)1U)
#define  MCU_SYSSTATUS_SLEEP                    ((Mcu_SysStatusType)2U)
#define  MCU_SYSSTATUS_DEEPSLEEP                ((Mcu_SysStatusType)3U)


/** \brief Data structure for Timer Clock configuration.
 **
 ** This data shows Timer Clock configuration.
 */
typedef struct
{
  uint32  ClkTimerCtlRegVal;
}
Mcu_TimerClockConfigDataType;


/** \brief The type of status value.
 **
 ** This is a status value returned by the function Mcu_GetPllStatus of the MCU module.
*/
typedef enum
{
  MCU_PLL_LOCKED,
  MCU_PLL_UNLOCKED,
  MCU_PLL_STATUS_UNDEFINED
}
Mcu_PllStatusType;


/** \brief Type definition for the identification (ID) for a clock setting.
 **
 ** Specifies the identification (ID) for a clock setting, 
 ** which is configured in the configuration structure.
 */
typedef uint8 Mcu_ClockType;


/** \brief Data structure for clock configuration.
 **
 ** This data shows clock configuration.
 */
typedef struct
{
  P2CONST( Mcu_ClockOutputConfigDataType,    MCU_CONST, MCU_APPL_CONST )  ClockOutputConfigPtr;
  P2CONST( Mcu_DsiConfigDataType,            MCU_CONST, MCU_APPL_CONST )  DsiConfigPtr;
  P2CONST( Mcu_ClockPathConfigDataType,      MCU_CONST, MCU_APPL_CONST )  ClockPathConfigPtr;
  P2CONST( Mcu_ClockRootConfigDataType,      MCU_CONST, MCU_APPL_CONST )  ClockRootConfigPtr;
  P2CONST( Mcu_HfCsvConfigDataType,          MCU_CONST, MCU_APPL_CONST )  HfCsvConfigPtr;
  P2CONST( Mcu_CsvConfigDataType,            MCU_CONST, MCU_APPL_CONST )  RefCsvConfigPtr;
  P2CONST( Mcu_CsvConfigDataType,            MCU_CONST, MCU_APPL_CONST )  LfCsvConfigPtr;
  P2CONST( Mcu_CsvConfigDataType,            MCU_CONST, MCU_APPL_CONST )  IloCsvConfigPtr;
  P2CONST( Mcu_CsvConfigDataType,            MCU_CONST, MCU_APPL_CONST )  BakCsvConfigPtr;
  P2CONST( Mcu_TimerClockConfigDataType,     MCU_CONST, MCU_APPL_CONST )  TimerClockConfigPtr;
  P2CONST( Mcu_EcoConfigDataType,            MCU_CONST, MCU_APPL_CONST )  EcoConfigPtr;
  P2CONST( Mcu_LpEcoConfigDataType,          MCU_CONST, MCU_APPL_CONST )  LpEcoConfigPtr;
  P2CONST( Mcu_FllConfigDataType,            MCU_CONST, MCU_APPL_CONST )  FllConfigPtr;
  P2CONST( Mcu_PllConfigDataType,            MCU_CONST, MCU_APPL_CONST )  PllConfigPtr;
  P2CONST( Mcu_SscgConfigDataType,           MCU_CONST, MCU_APPL_CONST )  SscgConfigPtr;
  P2CONST( Mcu_BackupConfigDataType,         MCU_CONST, MCU_APPL_CONST )  BackupConfigPtr;
  P2CONST( Mcu_PclkGroupConfigDataType,      MCU_CONST, MCU_APPL_CONST )  PclkGroupConfigPtr;
  P2CONST( Mcu_PeriGroupConfigDataType,      MCU_CONST, MCU_APPL_CONST )  PeriGroupConfigPtr;
  uint32                                                                  ClkSelectRegVal;
  uint32                                                                  ClkIloConfigRegVal;
  uint32                                                                  ClkIlo1ConfigRegVal;
  uint32                                                                  ClkImoConfigRegVal;
  uint32                                                                  CsvRefSelRegVal;
  uint32                                                                  FastClockCtlRegVal[2];
  uint32                                                                  SlowClockCtlRegVal;
  uint32                                                                  PeriClockCtlRegVal;
  uint32                                                                  MemClockCtlRegVal;
  uint32                                                                  TrcDbgClockCtlRegVal;
  uint32                                                                  RomCtlRegVal;
  uint32                                                                  Ram0CtlRegMask;
  uint32                                                                  Ram0CtlRegVal;
  uint32                                                                  Ram1CtlRegMask;
  uint32                                                                  Ram1CtlRegVal;
  uint32                                                                  Ram2CtlRegMask;
  uint32                                                                  Ram2CtlRegVal;
  uint32                                                                  FlashCtlRegMask;
  uint32                                                                  FlashCtlRegVal;
  uint32                                                                  PeriGroupBusToCnt;
  uint8                                                                   ClockPathConfigNum;
  uint8                                                                   DsiConfigNum;
  uint8                                                                   PllConfigNum;
  uint8                                                                   SscgConfigNum;
  uint8                                                                   ClockRootConfigNum;  
  uint8                                                                   PclkGroupConfigNum;
  uint8                                                                   PeriGroupConfigNum;
  uint8                                                                   HfCsvConfigNum;
  uint8                                                                   Ilo1ConfigNum;
  uint8                                                                   FastClockCtlNum;
  uint8                                                                   MemClockExist;
  uint8                                                                   PumpClockEn;
  uint8                                                                   TimerClockEn;
  uint8                                                                   UnlockWdtEnable;
  uint8                                                                   PumpClockStopEnable;
  uint8                                                                   TimerClockStopEnable;
  uint8                                                                   ClockPathLastIdx;
}
Mcu_ClockConfigType;


/** \brief The type of reset type.
 **
 ** This is the type of the reset enumerator containing the subset of reset types.
 ** It is not required that all reset types are supported by hardware.
*/
typedef enum
{
  MCU_RESET_UNDEFINED,
  MCU_POWER_ON_RESET,
  MCU_WATCHDOG_RESET,
  MCU_ACT_FAULT_RESET,
  MCU_DPSLP_FAULT_RESET,
  MCU_TEST_DEBUG_RESET,
  MCU_SW_RESET,
  MCU_MCWDT0_RESET,
  MCU_MCWDT1_RESET,
  MCU_MCWDT2_RESET,
  MCU_MCWDT3_RESET,
  MCU_XRES_RESET,
  MCU_BOD_VDDD_RESET,
  MCU_BOD_VDDA_RESET,
  MCU_BOD_VCCD_RESET,
  MCU_OVD_VDDD_RESET,
  MCU_OVD_VDDA_RESET,
  MCU_OVD_VCCD_RESET,
  MCU_OCD_ACTIVE_REGULATOR_RESET,
  MCU_OCD_DEEPSLEEP_REGULATOR_RESET,
  MCU_STRUCTURAL_XRES_RESET,
  MCU_CSV_HF_RESET,
  MCU_CSV_REF_RESET,
  MCU_WAKEUP_RESET,
  MCU_REGHC_OCD_RESET,
  MCU_REGHC_PMIC_RESET,
  MCU_PXRES_RESET
}
Mcu_ResetType;


/** \brief Type definition for the reset reason in raw register.
 **
 ** This type specifies the reset reason 
 ** in raw register format read from a reset status register.
 */
typedef uint32 Mcu_RawResetType;


/** \brief Type definition for the reset reason in raw register.
 **
 ** This type specifies the identification (ID) for a MCU mode, 
 ** which is configured in the configuration structure.
 */
typedef uint8 Mcu_ModeType;


/** \brief Type definition for the identification (ID) for a RAM section.
 **
 ** This type specifies the identification (ID) for a RAM section, 
 ** which is configured in the configuration structure.
 */
typedef uint16 Mcu_RamSectionType;


/** \brief Type definition for the MCU driver status.
 **
 ** Type definition for the MCU driver status.
 */
typedef uint8 Mcu_DriverStatusType;

#define  MCU_S_ILLEGAL                          ((Mcu_DriverStatusType)0U)
#define  MCU_S_UNINITIALIZED                    ((Mcu_DriverStatusType)1U)
#define  MCU_S_INITIALIZED                      ((Mcu_DriverStatusType)2U)


/** \brief Data structure for the common resource in the system configuration.
 **
 ** This data shows the common resource in the system configuration.
 */
typedef struct
{
  P2CONST( Mcu_ClockConfigType,        MCU_CONST, MCU_APPL_CONST )  ClockConfigPtr;
  P2CONST( Mcu_HvLvdConfigDataType,    MCU_CONST, MCU_APPL_CONST )  HvLvdConfigPtr;
  uint32                                                            PwrCtlRegVal;
  uint32                                                            PwrCtlRegMask;
  uint32                                                            PwrSsvCtlRegVal;
  uint32                                                            VrefBufRdyToCnt;
  uint32                                                            LinRegEnToCnt;
  uint32                                                            RefIEnToCnt;
  uint8                                                             PwrSsvCtlNum;
  uint8                                                             HvLvdConfigNum;
}
Mcu_SysResConfigDataType;


#define  MCU_DMA_VALID_FLAG_DW0_VALID  0x01U
#define  MCU_DMA_VALID_FLAG_DW1_VALID  0x02U
#define  MCU_DMA_VALID_FLAG_DMA_VALID  0x04U


/** \brief Data structure for DMA configuration.
 **
 ** This data shows DMA configuration.
 */
typedef struct
{
  uint8  DmaValidFlag;
  uint8  Dw0En;
  uint8  Dw1En;
  uint8  DmaEn;
}
Mcu_DmaConfigDataType;


/** \brief Data structure for mode configuration.
 **
 ** This data shows mode configuration.
 */
typedef struct
{
  P2CONST( Mcu_SysResConfigDataType, MCU_CONST, MCU_APPL_CONST )    SysResConfigPtr;
  P2CONST( Mcu_HibConfigDataType,    MCU_CONST, MCU_APPL_CONST )    HibConfigPtr;
  P2CONST( Mcu_Ram0PwrMacroConfigType, MCU_CONST, MCU_APPL_CONST )  Ram0PwrMacroConfigPtr;
  uint32                                                            ScrRegVal;
  uint32                                                            LpmRdyToCnt;
  uint32                                                            RamWbToCnt;
  uint32                                                            MainCorePwrUpDelayCtlRegVal[2];
  uint32                                                            Ram1PwrCtlRegVal;
  uint32                                                            Ram2PwrCtlRegVal;
  uint32                                                            RamPwrDelayCtl;
  Mcu_DmaConfigDataType                                             DmaConfigData;
  Mcu_CpuPowerModeType                                              CpuPwrMode;
  uint8                                                             LowPwrTransEn;
  uint8                                                             TargetCpu;
  uint8                                                             MainCorePwrMode[2];
  uint8                                                             MainCorePwrModeNum;
  uint8                                                             FreezeRelEnable;
  uint8                                                             ModeCacheFlushEn;
  uint8                                                             Ram0PwrMacroConfigNum;
}
Mcu_ModeConfigType;

#define  MCU_TARGETCPU_CM0                      0U
#define  MCU_TARGETCPU_CM4                      1U
#define  MCU_TARGETCPU_CM7                      2U
#define  MCU_TARGETCPU_INVALID                  255U

#define  MCU_MAINCOREPOWERMODE_OFF                   0U
#define  MCU_MAINCOREPOWERMODE_RESET                 1U
#define  MCU_MAINCOREPOWERMODE_RETAINED              2U
#define  MCU_MAINCOREPOWERMODE_ENABLED               3U
#define  MCU_MAINCOREPOWERMODE_SKIP                  4U


/** \brief Data structure for the RAM configuration.
 **
 ** This data shows the  RAM configuration.
 */
typedef struct
{
  uint32  RamStartAddr;
  uint32  RamSectionSize;
  uint8   DefaultData;
}
Mcu_RamConfigType;


/** \brief Data structure for the reset configuration.
 **
 ** This data shows the reset configuration.
 */
typedef struct
{
  uint32  RamWbToCntReset;
  uint32  Ram0Retained;
  uint32  Ram1Retained;
  uint32  Ram2Retained;
  uint8   ForcedResetFlag;
  uint8   ResetCacheFlushEn;
}
Mcu_ResetConfigType;


/** \brief Data structure for MCU initialization configuration.
 **
 ** A pointer to such a structure is provided to the MCU initialization routines
 ** for configuration.
 */
typedef struct
{
  /* Clock settings */
  P2CONST( Mcu_ClockConfigType, MCU_CONST, MCU_APPL_CONST )  McuClockConfigPtr;
  /* CPU modes */
  P2CONST( Mcu_ModeConfigType,  MCU_CONST, MCU_APPL_CONST )  McuModeConfigPtr;
  /* RAM settings */
  P2CONST( Mcu_RamConfigType,   MCU_CONST, MCU_APPL_CONST )  McuRamConfigPtr;
  /* Reset settings */
  P2CONST( Mcu_ResetConfigType,   MCU_CONST, MCU_APPL_CONST )  McuResetConfigPtr;
  Mcu_RamSectionType                                         McuRamConfigNum;
  Mcu_ClockType                                              McuDefaultClockSettingId;
  Mcu_ClockType                                              McuClockConfigNum;
  Mcu_ModeType                                               McuModeConfigNum;
  /* Configuration flags */
  uint8                                                      ConfigFlags;
  uint8                                                      ClockFailure;
  uint8                                                      ResetFailure;
}
Mcu_ConfigType;


/** \brief Data structure for HW information.
 **
 ** This data shows the HW information.
 */
typedef struct
{
  uint8  Ram0MacroNum;
}
Mcu_HwInfoType;


/** \brief Data structure for the storing reset reason register value.
 **
 ** This data shows the storing reset reason register value.
 */
typedef struct
{
  Mcu_RawResetType  Reset;
  Mcu_RawResetType  Reset2;
}
Mcu_RegRawResetType;


/** \brief The type of return values
 **
 ** OK, NOT_OK, or NOT_OK_HW
*/
typedef enum
{
  MCU_OK,
  MCU_NOT_OK,
  MCU_NOT_OK_HW
}
Mcu_ReturnType;


/** \brief Data structure for the result of status check.
 **
 ** This type contains the result of status check.
 */
typedef struct
{
  Mcu_CpuStatusType  Cm0Status;
  Mcu_CpuStatusType  MainCoreStatus[2];
  Mcu_SysStatusType  SysStatus;
}
Mcu_StatusType;


/*==================[external function declarations]=========================*/
/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

# endif /* if !defined( MCU_TYPES_H ) */
/*==================[end of file]============================================*/
