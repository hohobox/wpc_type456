#ifndef MCU_REGS_H
# define MCU_REGS_H 1

/** \brief AUTOSAR Mcu Driver
 **
 ** This file contains the declaration of the AUTOSAR module Mcu function
 ** for accessing hardware registers.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Std_Types.h>     /* AUTOSAR standard types */
#include <Mcu_Types.h>     /* Module public types */

/*==================[macros]=================================================*/

#define MCU_ECO_CLOCK_SETTING_FLAGS      0x01U
#define MCU_WCO_CLOCK_SETTING_FLAGS      0x02U
#define MCU_ECO_PRESCALE_SETTING_FLAGS   0x04U
#define MCU_LPECO_CLOCK_SETTING_FLAGS    0x08U
#define MCU_LPECO_PRESCALE_SETTING_FLAGS 0x10U
#define MCU_REG_MASK_SRSS_INTR_HVLVD1    0x00000002U
#define MCU_REG_MASK_SRSS_INTR_HVLVD2    0x00000004U

/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/
#define MCU_START_SEC_CODE_ASIL_B
#include <Mcu_MemMap.h>

/** \brief Mcu_SetBaseAddress_Regs
 **
 ** This function sets base addresses of registers used in MCU module.
 **
 ** \param[in]  McuBaseAddressPtr  The pointer to the values of 
 **                                the base addresses used in MCU module.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetBaseAddress_Regs( 
  P2CONST( Mcu_RegBaseAddrType, AUTOMATIC, REGSPACE ) McuBaseAddressPtr
);


/** \brief Mcu_GetSscgBypassWaitCycle
 **
 ** This function returns SSCG bypass wait cycle.
 **
 ** \param[in]  SscgRegIdx       The index number of SSCG clock.
 */
extern FUNC( uint32, MCU_CODE ) 
Mcu_GetSscgBypassWaitCycle(
  VAR( uint32, AUTOMATIC ) SscgRegIdx
);


/** \brief Mcu_SetSscgBypassWaitCycle
 **
 ** This function sets SSCG bypass wait cycle.
 **
 ** \param[in]  SscgRegIdx       The index number of SSCG clock.
 ** \param[in]  BypassWaitCycle  Bypass wait cycle.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetSscgBypassWaitCycle(
  VAR( uint32, AUTOMATIC ) SscgRegIdx,
  VAR( uint32, AUTOMATIC ) BypassWaitCycle
);


/** \brief Mcu_ClockShutdown_Fll_Regs
 **
 ** This function shutdowns Fll clock registers of SRSS with configuration.
 **
 ** \param[in]  StopFlags  This flag on whether clock stops which is performed 
 **                        before update FLL clock settings when FLL clock is running.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_Fll_Regs(
  VAR( uint8, AUTOMATIC ) StopFlags
);


/** \brief Mcu_ClockShutdown_Pll_Regs
 **
 ** This function shutdowns Pll clock registers of SRSS with configuration.
 **
 ** \param[in]  PllRegIdx  The index number of Pll clock register.
 ** \param[in]  StopFlags  This flag on whether clock stops which is performed
 **                        before update PLL clock settings when PLL clock is running.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_Pll_Regs( 
  VAR( uint32, AUTOMATIC ) PllRegIdx,
  VAR( uint8, AUTOMATIC ) StopFlags
);


/** \brief Mcu_ClockShutdown_Sscg_Regs
 **
 ** This function shutdowns SSCG clock registers of SRSS with configuration.
 **
 ** \param[in]  SscgRegIdx The index number of SSCG clock register.
 ** \param[in]  StopFlags  This flag on whether clock stops which is performed 
 **                        before update SSCG clock settings when SSCG clock is running.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_Sscg_Regs( 
  VAR( uint32, AUTOMATIC ) SscgRegIdx,
  VAR( uint8, AUTOMATIC ) StopFlags
);


/** \brief Mcu_ClockShutdown_SrssClock_Regs
 **
 ** This function shutdowns clock registers of SRSS with configuration.
 **
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_SrssClock_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_ClockShutdown_PeriTimeout_Regs
 **
 ** This function shutdowns timeout control registers of PERI with configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_PeriTimeout_Regs( void );


/** \brief Mcu_ClockShutdown_PeriClock_Regs
 **
 ** This function shutdowns clock registers of PERI with configuration.
 **
 ** \param[in] PclkDividerConfigPtr The pointer to Pclk configuration.
 ** \param[in] PclkGroupRegIdx      The index number of PCLK Group registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_PeriClock_Regs(
  P2CONST( Mcu_PclkDividerConfigDataType, AUTOMATIC, MCU_APPL_CONST ) PclkDividerConfigPtr,
  VAR( uint8 , AUTOMATIC ) PclkGroupRegIdx
);


/** \brief Mcu_ClockShutdown_Csv_Regs
 **
 ** This function shutdowns CSV registers.
 **
 ** \param[in] McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_Csv_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_ClockShutdown_ClockOutput_Regs
 **
 ** This function disables the clock output function.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClockShutdown_ClockOutput_Regs( void );


/** \brief Mcu_SetIMO_Regs
 **
 ** This function sets CLK_IMO_CONFIG register of SRSS with configuration.
 **
 ** \param[in] McuRegValue  The value to set CLK_IMO_CONFIG register.
 ** \param[in] SetFlag      The flag indicating whether the clock to enable or not.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetIMO_Regs( 
  VAR( uint32, AUTOMATIC ) McuRegValue,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetILO_Regs
 **
 ** This function sets CLK_ILO0_CONFIG and CLK_ILO1_CONFIG register of SRSS with configuration.
 **
 ** \param[in] McuClockConfigPtr  The pointer to clock configuration.
 ** \param[in] SetFlag            The flag indicating whether the clock to enable or not.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetILO_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetECO_Regs
 **
 ** This function sets CLK_ECO_CONFIG register of SRSS with configuration.
 **
 ** \param[in] EcoConfigPtr  The pointer to ECO clock configuration.
 ** \param[in] SetFlag       The flag indicating whether the clock to enable or not.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetECO_Regs(
  P2CONST( Mcu_EcoConfigDataType, AUTOMATIC, MCU_APPL_CONST ) EcoConfigPtr,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetECOPrescale_Regs
 **
 ** This function sets CLK_ECO_PRESCALE register of SRSS with configuration.
 **
 ** \param[in] EcoConfigPtr The pointer to ECO clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetECOPrescale_Regs(
  P2CONST( Mcu_EcoConfigDataType, AUTOMATIC, MCU_APPL_CONST ) EcoConfigPtr
);


/** \brief Mcu_SetLpEco_Regs
 **
 ** This function sets LPECO_CTL register of SRSS BACKUP with configuration.
 **
 ** \param[in] LpEcoConfigPtr  The pointer to LPECO clock configuration.
 ** \param[in] SetFlag         The flag indicating whether the clock to enable or not.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetLpEco_Regs(
  P2CONST( Mcu_LpEcoConfigDataType, AUTOMATIC, MCU_APPL_CONST ) LpEcoConfigPtr,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetLpEcoPrescale_Regs
 **
 ** This function sets LPECO_PRESCALE register of SRSS BACKUP with configuration.
 **
 ** \param[in] LpEcoConfigPtr The pointer to LPECO clock configuration.
 **
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetLpEcoPrescale_Regs(
  P2CONST( Mcu_LpEcoConfigDataType, AUTOMATIC, MCU_APPL_CONST ) LpEcoConfigPtr
);


/** \brief Mcu_SetWCO_Regs
 **
 ** This function sets CTL register of SRSS BACKUP with configuration.
 **
 ** \param[in] BackupConfigPtr  The pointer to SRSS BACKUP configuration.
 ** \param[in] SetFlag          The flag indicating whether the clock to enable or not.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetWCO_Regs(
  P2CONST( Mcu_BackupConfigDataType, AUTOMATIC, MCU_APPL_CONST ) BackupConfigPtr,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetWcoEnable_Regs
 **
 ** This function sets CTL.WCO_EN bit of SRSS BACKUP with configuration.
 **
 ** \param[in] EnableFlag       The flag indicating whether enables/disables the WCO.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetWcoEnable_Regs(
  VAR( uint8, AUTOMATIC ) EnableFlag
);


/** \brief Mcu_WcoClkDisableWait_Regs
 **
 ** This function waits completion of disabling WCO clock.
 ** If the WCO clock is not disabled during WcoStabilizationCnt, this function returns MCU_NOT_OK.
 **
 ** \param[in] WcoStabilizationCnt         The count value for monitoring completion of WCO disable.
 **
 ** \retval  MCU_OK      WCO is disabled.
 ** \retval  MCU_NOT_OK  WCO is not disabled.
 **
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_WcoClkDisableWait_Regs(
  VAR( uint32, AUTOMATIC ) WcoStabilizationCnt
);


/** \brief Mcu_SourceClkStabWait_Regs
 **
 ** This function waits stabilization of ECO, ECO Prescaler, LPECO, LPECO Prescaler and WCO clock.
 **
 ** \param[in]  McuClockConfigPtr      The pointer to clock configuration.
 ** \param[in]  ClockFlags             ECO, ECO Prescale, LPECO, LPECO Prescaler or WCO clock setting flag.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_SourceClkStabWait_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr,
  VAR( uint8, AUTOMATIC )  ClockFlags
);


/** \brief Mcu_SetCsv_Regs
 **
 ** This function sets CSV registers of SRSS with configuration.
 **
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetCsv_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_SetWaitCycle_Regs
 **
 ** This function sets Memory wait status of CPUSS and Flash wait status of FLASHC with configuration.
 **
 ** \param[in] McuClockConfigPtr    The pointer to clock configuration.
 ** \param[in] SetFlag              The flag indicating whether the divider to up or down.
 */

extern FUNC( void, MCU_CODE ) 
Mcu_SetWaitCycle_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetPath_Regs
 **
 ** This function sets CLK_PATH_SELECT register of SRSS with configuration.
 **
 ** \param[in] PathRegIdx   The index number of CLK_PATH_SELECT register.
 ** \param[in] PathRegVal   The value to set CLK_PATH_SELECT register.
 */

extern FUNC( void, MCU_CODE ) 
Mcu_SetPath_Regs(
  VAR( uint8, AUTOMATIC ) PathRegIdx,
  VAR( uint32, AUTOMATIC ) PathRegVal
);


/** \brief Mcu_SetDsi_Regs
 **
 ** This function sets CLK_DSI_SELECT register of SRSS with configuration.
 **
 ** \param[in] DsiRegIdx   The index number of CLK_DSI_SELECT register.
 ** \param[in] DsiRegVal   The value to set CLK_DSI_SELECT register.
 */

extern FUNC( void, MCU_CODE ) 
Mcu_SetDsi_Regs(
  VAR( uint8, AUTOMATIC ) DsiRegIdx,
  VAR( uint32, AUTOMATIC ) DsiRegVal
);


/** \brief Mcu_SetLf_Regs
 **
 ** This function sets LFCLK_SEL bit of CLK_SELECT register of SRSS with configuration.
 **
 ** \param[in] McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetLf_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_SetPump_Regs
 **
 ** This function sets PUMP_SEL and PUMP_ENABLE of CLK_SELECT register of SRSS with configuration.
 **
 ** \param[in] ClkSelectRegVal  The value to set CLK_SELECT register.
 ** \param[in] PumpClockEn      The value to set PUMP_ENABLE bit of CLK_SELECT register.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetPump_Regs(
  VAR( uint32, AUTOMATIC ) ClkSelectRegVal,
  VAR( uint8, AUTOMATIC ) PumpClockEn
);


/** \brief Mcu_SetTimer_Regs
 **
 ** This function sets CLK_TIMER_CTL register of SRSS with configuration.
 **
 ** \param[in] TimerCtlRegVal The value to set CLK_TIMER_CTL register.
 ** \param[in] TimerCtlEn     The value to set TIMER_ENABLE bit of CLK_TIMER_CTL register.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetTimer_Regs(
  VAR( uint32, AUTOMATIC ) TimerCtlRegVal,
  VAR( uint8, AUTOMATIC ) TimerCtlEn
);


/** \brief Mcu_SetClockOutput_Regs
 **
 ** This function sets DDFT output registers of SRSS with configuration.
 ** (CLK_OUTPUT_FAST,CLK_OUTPUT_SLOW,TST_DDFT_FAST_CTL,TST_DDFT_SLOW_CTL,CLK_PLL_DDFT register)
 ** 
 ** \param[in]  ClockOutputConfigPtr  The pointer to DDFT clock output configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetClockOutput_Regs(
  P2CONST( Mcu_ClockOutputConfigDataType, AUTOMATIC, MCU_APPL_CONST ) ClockOutputConfigPtr
);


/** \brief Mcu_SetCpussClock_Regs
 **
 ** This function sets clock setting registers of CPUSS with configuration.
 ** (FAST_CLOCK_CTL, SLOW_CLOCK_CTL register)
 ** 
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 ** \param[in]  SetFlag              The flag indicating whether the divider to up or down.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetCpussClock_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetPeriTimeout_Regs
 **
 ** This function sets TIMEOUT_CTL register of PERI with configuration.
 ** 
 ** \param[in]  TimeoutCnt    The timeout count value to set TIMEOUT_CTL register.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetPeriTimeout_Regs(
  VAR( uint32, AUTOMATIC )  TimeoutCnt
);


/** \brief Mcu_SetPeriClock_Regs
 **
 ** This function sets CLOCK_CTL register of PERI with configuration.
 ** 
 ** \param[in]  PclkConfigPtr      The pointer to Pclk configuration.
 ** \param[in]  PclkGroupRegIdx    The index number of PCLK Group registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetPeriClock_Regs(
  P2CONST( Mcu_PclkConfigDataType, AUTOMATIC, MCU_APPL_CONST ) PclkConfigPtr,
  VAR( uint8 , AUTOMATIC ) PclkGroupRegIdx
);


/** \brief Mcu_SetDiv80Ctl_Regs
 **
 ** This function sets DIV_8_CTL register of PERI with configuration.
 **
 ** \param[in]  Pclk80DividerConfigPtr   The pointer to Pclk 8 divider configuration.
 ** \param[in]  PclkGroupRegIdx          The index number of PCLK Group registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetDiv80Ctl_Regs(
  P2CONST( Mcu_Pclk80DividerConfigDataType, AUTOMATIC, MCU_APPL_CONST ) Pclk80DividerConfigPtr,
  VAR( uint8 , AUTOMATIC ) PclkGroupRegIdx
);


/** \brief Mcu_SetDiv160Ctl_Regs
 **
 ** This function sets DIV_16_CTL register of PERI with configuration.
 **
 ** \param[in]  Pclk160DividerConfigPtr   The pointer to Pclk 16 divider configuration.
 ** \param[in]  PclkGroupRegIdx           The index number of PCLK Group registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetDiv160Ctl_Regs(
  P2CONST( Mcu_Pclk160DividerConfigDataType, AUTOMATIC, MCU_APPL_CONST ) Pclk160DividerConfigPtr,
  VAR( uint8 , AUTOMATIC ) PclkGroupRegIdx
);


/** \brief Mcu_SetDiv165Ctl_Regs
 **
 ** This function sets DIV_16_5_CTL register of PERI with configuration.
 **
 ** \param[in]  Pclk165DividerConfigPtr   The pointer to Pclk 16.5 divider configuration.
 ** \param[in]  PclkGroupRegIdx           The index number of PCLK Group registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetDiv165Ctl_Regs(
  P2CONST( Mcu_Pclk165DividerConfigDataType, AUTOMATIC, MCU_APPL_CONST ) Pclk165DividerConfigPtr,
  VAR( uint8 , AUTOMATIC ) PclkGroupRegIdx
);


/** \brief Mcu_SetDiv245Ctl_Regs
 **
 ** This function sets DIV_24_5_CTL register of PERI with configuration.
 **
 ** \param[in]  Pclk245DividerConfigPtr   The pointer to Pclk 24.5 divider configuration.
 ** \param[in]  PclkGroupRegIdx           The index number of PCLK Group registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetDiv245Ctl_Regs(
  P2CONST( Mcu_Pclk245DividerConfigDataType, AUTOMATIC, MCU_APPL_CONST ) Pclk245DividerConfigPtr,
  VAR( uint8 , AUTOMATIC ) PclkGroupRegIdx
);


/** \brief Mcu_SetDivCmd_Regs
 **
 ** This function sets DIV_CMD register of PERI with configuration.
 **
 ** \param[in]  PclkDividerConfigPtr   The pointer to Pclk divider command configuration.
 ** \param[in]  PclkGroupRegIdx        The index number of PCLK Group registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetDivCmd_Regs(
  P2CONST( Mcu_PclkDividerConfigDataType, AUTOMATIC, MCU_APPL_CONST ) PclkDividerConfigPtr,
  VAR( uint8 , AUTOMATIC ) PclkGroupRegIdx
);


/** \brief Mcu_SetPeriGroupClock_Regs
 **
 ** This function sets CLOCK_CTL and SL_CTL register of PERI Group with configuration.
 **
 ** \param[in]  PeriGroupConfigPtr   The pointer to Pclk group clock configuration.
 ** \param[in]  SetFlag              The flag indicating whether the divider to up or down.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetPeriGroupClock_Regs(
  P2CONST( Mcu_PeriGroupConfigDataType, AUTOMATIC, MCU_APPL_CONST ) PeriGroupConfigPtr,
  VAR( boolean, AUTOMATIC ) SetFlag
);


/** \brief Mcu_SetFllClock_Regs
 **
 ** This function sets FLL clock registers of SRSS with configuration.
 **
 ** \param[in]  FllConfigPtr   The pointer to Fll clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_SetFllClock_Regs(
  P2CONST( Mcu_FllConfigDataType, AUTOMATIC, MCU_APPL_CONST ) FllConfigPtr
);


/** \brief Mcu_SetPllClock_Regs
 **
 ** This function sets PLL clock register of SRSS with configuration.
 **
 ** \param[in]  PllConfigPtr   The pointer to Pll clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetPllClock_Regs(
  P2CONST( Mcu_PllConfigDataType, AUTOMATIC, MCU_APPL_CONST ) PllConfigPtr
);


/** \brief Mcu_SetSscgClock_Regs
 **
 ** This function sets SSCG clock register of SRSS with configuration.
 **
 ** \param[in]  SscgConfigPtr  The pointer to SSCG clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetSscgClock_Regs(
  P2CONST( Mcu_SscgConfigDataType, AUTOMATIC, MCU_APPL_CONST ) SscgConfigPtr
);


/** \brief Mcu_PreSetRootSelect_Regs
 **
 ** This function presets clock root setting register of SRSS for accessing another HW IP.
 **
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_PreSetRootSelect_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_SetRootSelect_Regs
 **
 ** This function sets clock Root setting register of SRSS with configuration.
 **
 ** \param[in]  ClockRootConfigPtr   The pointer to clock Root configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetRootSelect_Regs(
  P2CONST( Mcu_ClockRootConfigDataType, AUTOMATIC, MCU_APPL_CONST ) ClockRootConfigPtr
);


/** \brief Mcu_SscgLockWait_Regs
 **
 ** This function waits for SSCG lock.
 **
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_SscgLockWait_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_PllLockWait_Regs
 **
 ** This function waits for Pll lock.
 **
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_PllLockWait_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_FllLockWait_Regs
 **
 ** This function waits for Fll lock.
 **
 ** \param[in]  FllConfigPtr    The pointer to FLL clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_FllLockWait_Regs(
  P2CONST( Mcu_FllConfigDataType, AUTOMATIC, MCU_APPL_CONST ) FllConfigPtr
);


/** \brief Mcu_GetSscgLockStatus_Regs
 **
 ** This function gets SSCG lock status from PLL400_STRUCT.STATUS register.
 **
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_GetSscgLockStatus_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_GetPllLockStatus_Regs
 **
 ** This function gets Pll lock status from CLK_PLL_STATUS register.
 **
 ** \param[in]  McuClockConfigPtr    The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_GetPllLockStatus_Regs(
  P2CONST( Mcu_ClockConfigType, AUTOMATIC, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_GetFllLockStatus_Regs
 **
 ** This function gets Fll lock status from CLK_FLL_STATUS register.
 **
 ** \param[in]  FllConfigPtr  The pointer to Fll clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_GetFllLockStatus_Regs(
  P2CONST( Mcu_FllConfigDataType, AUTOMATIC, MCU_APPL_CONST ) FllConfigPtr
);


/** \brief Mcu_SetSscgClockOut_Regs
 **
 ** This function sets BYPASS_SEL bit of PLL400_STRUCT.CONFIG register to PLL_OUT.
 **
 ** \param[in]  RegIndex  The index number of PLL400_STRUCT register.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetSscgClockOut_Regs(
  VAR( uint32, AUTOMATIC ) RegIndex
);


/** \brief Mcu_SetPllClockOut_Regs
 **
 ** This function sets BYPASS_SEL bit of CLK_PLL_CONFIG register to PLL_OUT.
 **
 ** \param[in]  RegIndex  The index number of CLK_PLL_CONFIG register.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetPllClockOut_Regs(
  VAR( uint32, AUTOMATIC ) RegIndex
);


/** \brief Mcu_SetFllClockOut_Regs
 **
 ** This function sets BYPASS_SEL bit of CLK_FLL_CONFIG3 register to FLL_OUT.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetFllClockOut_Regs( void );


/** \brief Mcu_Reset_Regs
 **
 ** This function sets reset register.
 **
 ** \param[in]  McuRegReset  Kind of reset for performing reset.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_Reset_Regs( 
  VAR( Mcu_RegResetType, AUTOMATIC ) McuRegReset
);


/** \brief Mcu_GetRawResetReason_Regs
 **
 ** This function returns values of the reset reason registers.
 **
 ** \param[out]  McuRawResetReasonPtr  The pointer to store raw values of the reset reason registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_GetRawResetReason_Regs( 
  P2VAR( Mcu_RegRawResetType, AUTOMATIC, MCU_APPL_DATA ) McuRawResetReasonPtr
);


/** \brief Mcu_GetResetReasonFromRaw_Regs
 **
 ** This function converts register value to reset reason and returns reset reason value.
 **
 ** \param[in]  McuRawResetReasonPtr  The pointer to raw values of the reset reason registers.
 */
extern FUNC( Mcu_ResetType, MCU_CODE ) 
Mcu_GetResetReasonFromRaw_Regs( 
  P2CONST( Mcu_RegRawResetType, AUTOMATIC, MCU_CONST ) McuRawResetReasonPtr
);


/** \brief Mcu_ClearResetReason_Regs
 **
 ** This function clears values of the reset reason registers.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClearResetReason_Regs( void );


/** \brief Mcu_SetLvdCtl_Regs
 **
 ** This function sets low voltage detector registers.
 **
 ** \param[in]  SysResConfigPtr  The pointer to system resources configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetLvdCtl_Regs(
  P2CONST( Mcu_SysResConfigDataType, AUTOMATIC, MCU_APPL_CONST ) SysResConfigPtr
);


/** \brief Mcu_SetSrssPowerCtl_Regs
 **
 ** This function sets srss power control registers.
 **
 ** \param[in]  SysResConfigPtr  The pointer to system resources configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetSrssPowerCtl_Regs(
  P2CONST( Mcu_SysResConfigDataType, AUTOMATIC, MCU_APPL_CONST ) SysResConfigPtr
);


/** \brief Mcu_SetSsvCtl_Regs
 **
 ** This function sets supply supervision control register.
 **
 ** \param[in]  SsvCtlRegVal  The value to set PWR_SSV_CTL register.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetSsvCtl_Regs(
  VAR( uint32, AUTOMATIC ) SsvCtlRegVal
);


/** \brief Mcu_SetDmaCtl_Regs
 **
 ** This function sets DMA control registers.
 **
 ** \param[in]  McuDmaConfigPtr  The pointer to DMA configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetDmaCtl_Regs(
  P2CONST( Mcu_DmaConfigDataType, AUTOMATIC, MCU_APPL_CONST ) McuDmaConfigPtr
);


/** \brief Mcu_SetSleepTrigger_Regs
 **
 ** This function sets sleep settings to registers.
 **
 ** \param[in]  ScrRegVal      Specific system control register value.
 ** \param[in]  LowPwrTransEn  The enable flag of low power transition.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetSleepTrigger_Regs(
  VAR( uint32, AUTOMATIC ) ScrRegVal,
  VAR( uint8, AUTOMATIC ) LowPwrTransEn
);


/** \brief Mcu_SetRamPwrCtl_Regs
 **
 ** This function sets RAM power control registers.
 **
 ** \param[in]  McuModeConfigPtr      The pointer to mode configuration.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetRamPwrCtl_Regs(
  P2CONST( Mcu_ModeConfigType, MCU_CONST, MCU_APPL_CONST ) McuModeConfigPtr
);


/** \brief Mcu_SetRamPwrStatusAll_Regs
 **
 ** This function sets all RAM power status as specified.
 **
 ** \param[in]  McuHwInfoPtr      The pointer to HW information.
 ** \param[in]  McuResetConfigPtr The pointer to the reset configuration.
 ** \param[in]  McuRamPwrStatus   The RAM power status to be changed.
 **
 ** \pre  McuHwInfoPtr shall not be a NULL pointer.
 **
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetRamPwrStatusAll_Regs(
  P2CONST( Mcu_HwInfoType, AUTOMATIC, MCU_APPL_CONST ) McuHwInfoPtr,
  P2CONST( Mcu_ResetConfigType, AUTOMATIC, MCU_APPL_CONST ) McuResetConfigPtr,
  VAR( uint32, AUTOMATIC ) McuRamPwrStatus
);


/** \brief Mcu_GetCpuID_Regs
 **
 ** This function gets the CPU ID of the current running CPU.
 */
extern FUNC( uint8, MCU_CODE ) 
Mcu_GetCpuID_Regs( void );


/** \brief Mcu_GetCm0CpuStatus_Regs
 **
 ** This function returns CM0 CPU status.
 */
extern FUNC( Mcu_CpuStatusType, MCU_CODE ) 
Mcu_GetCm0CpuStatus_Regs( void );


/** \brief Mcu_GetMainCoreCpuStatus_Regs
 **
 ** This function returns Main Core CPU status.
 **
 ** \param[in]  MainCoreIdx  The index number of Main Core.
 */
extern FUNC( Mcu_CpuStatusType, MCU_CODE ) 
Mcu_GetMainCoreCpuStatus_Regs(
  VAR( uint8, AUTOMATIC ) MainCoreIdx
);


/** \brief Mcu_DisableCache_Regs
 **
 ** This function disables I-cache and D-cache.
 */
extern FUNC( uint32, MCU_CODE ) 
Mcu_DisableCache_Regs( void );


/** \brief Mcu_RestoreCache_Regs
 **
 ** This function restores I-cache and D-cache status.
 **
 ** \param[in]  CacheStatus  Previous I-cache and D-cache status to restore.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_RestoreCache_Regs(
  VAR( uint32, AUTOMATIC ) CacheStatus
);


/** \brief Mcu_SetMainCorePwrCtl_Regs
 **
 ** This function sets specific Main Core Power Mode to register.
 **
 ** \param[in]  McuModeConfigPtr The pointer to mode configuration.
 ** \param[in]  MainCoreIdx      The index number of Main Core.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetMainCorePwrCtl_Regs(
  P2CONST( Mcu_ModeConfigType, MCU_CONST, MCU_APPL_CONST ) McuModeConfigPtr,
  VAR( uint8, AUTOMATIC ) MainCoreIdx
);


/** \brief Mcu_SetHibernate_Regs
 **
 ** This function sets hibernate settings to register.
 **
 ** \param[in]  McuHibConfigPtr The pointer to mode configuration related to hibernate mode.
 ** \param[in]  LowPwrTransEn   The enable flag of low power transition.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetHibernate_Regs(
  P2CONST( Mcu_HibConfigDataType, MCU_CONST, MCU_APPL_CONST ) McuHibConfigPtr,
  VAR( uint8, AUTOMATIC ) LowPwrTransEn
);


/** \brief Mcu_WaitSrssPowerCtl_Regs
 **
 ** This function waits and returns the low power status.
 **
 ** \param[in]  McuSysResConfigPtr    The pointer to mode system common resource configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_WaitSrssPowerCtl_Regs(
  P2CONST( Mcu_SysResConfigDataType, AUTOMATIC, MCU_APPL_CONST ) SysResConfigPtr
);


/** \brief Mcu_WaitRamStatus_Regs
 **
 ** This function waits and returns the RAM write buffer status.
 **
 ** \param[in]  RamWbToCnt  The counter value for waiting RAM write buffer status.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_WaitRamStatus_Regs(
  VAR( uint32, AUTOMATIC ) RamWbToCnt
);


/** \brief Mcu_WaitLowPowerModeReady_Regs
 **
 ** This function waits and returns the low power mode status.
 **
 ** \param[in]  LpmRdyToCnt  The counter value for waiting low power mode status.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_WaitLowPowerModeReady_Regs(
  VAR( uint32, AUTOMATIC ) LpmRdyToCnt
);


/** \brief Mcu_ClearFreezeIo_Regs
 **
 ** This function clears freeze I/O.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClearFreezeIo_Regs( void );


/** \brief Mcu_GetSysStatus_Regs
 **
 ** This function returns HW system power status.
 */
extern FUNC( Mcu_SysStatusType, MCU_CODE ) 
Mcu_GetSysStatus_Regs( void );


/** \brief Mcu_CheckMode_Cpuss_Regs
 **
 ** This function checks CPUSS mode settings with registers.
 **
 ** \param[in]  McuModeConfigPtr      The pointer to mode configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckMode_Cpuss_Regs(
  P2CONST( Mcu_ModeConfigType, MCU_CONST, MCU_APPL_CONST ) McuModeConfigPtr
);


/** \brief Mcu_CheckMode_CpussMainCorePwr_Regs
 **
 ** This function checks mode settings with CPUSS FAST_PWR_CTL HW registers.
 **
 ** \param[in]  McuModeConfigPtr      The pointer to mode configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckMode_CpussMainCorePwr_Regs(
  P2CONST( Mcu_ModeConfigType, MCU_CONST, MCU_APPL_CONST ) McuModeConfigPtr
);


/** \brief Mcu_CheckMode_SysCm0Scs_Regs
 **
 ** This function checks mode settings with SYSTEM CM0_SCS HW registers.
 **
 ** \param[in]  McuModeConfigPtr      The pointer to mode configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckMode_SysCm0Scs_Regs(
  P2CONST( Mcu_ModeConfigType, MCU_CONST, MCU_APPL_CONST ) McuModeConfigPtr
);


/** \brief Mcu_CheckMode_SysCm4Scs_Regs
 **
 ** This function checks mode settings with SYSTEM CM4_SCS HW registers.
 **
 ** \param[in]  McuModeConfigPtr      The pointer to mode configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckMode_SysCm4Scs_Regs(
  P2CONST( Mcu_ModeConfigType, MCU_CONST, MCU_APPL_CONST ) McuModeConfigPtr
);


/** \brief Mcu_CheckMode_SrssHibernate_Regs
 **
 ** This function checks mode settings related to hibernate mode with registers.
 **
 ** \param[in]  McuHibConfigPtr       The pointer to mode configuration related to hibernate mode.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckMode_SrssHibernate_Regs(
  P2CONST( Mcu_HibConfigDataType, MCU_CONST, MCU_APPL_CONST ) McuHibConfigPtr
);


/** \brief Mcu_GetLvdIntStatus_Regs
 **
 ** This function gets the LVD interrupt status.
 */
extern FUNC( uint32, MCU_CODE ) 
Mcu_GetLvdIntStatus_Regs( void );


/** \brief Mcu_ClearLvdIntStatus_Regs
 **
 ** This function clears Lvd interrupt status.
 **
 ** \param[in]  McuRegValue            The value written to clear Lvd interrupt status.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_ClearLvdIntStatus_Regs(
  VAR( uint32, AUTOMATIC ) McuRegValue
);


/** \brief Mcu_CheckMode_SystemResource_Regs
 **
 ** This function checks mode system common resource settings with registers.
 **
 ** \param[in]  McuSysResConfigPtr    The pointer to mode system common resource configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckMode_SystemResource_Regs(
  P2CONST( Mcu_SysResConfigDataType, MCU_CONST, MCU_APPL_CONST ) McuSysResConfigPtr
);


/** \brief Mcu_CheckSourceClockStatus_Regs
 **
 ** This function checks source clock enable settings with SRSS HW registers.
 **
 ** \param[in]  McuClockConfigPtr      The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckSourceClockStatus_Regs(
  P2CONST( Mcu_ClockConfigType, MCU_CONST, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_CheckClock_Srss_Regs
 **
 ** This function checks clock settings with SRSS HW registers.
 **
 ** \param[in]  McuClockConfigPtr      The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckClock_Srss_Regs(
  P2CONST( Mcu_ClockConfigType, MCU_CONST, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_CheckClock_Cpuss_Regs
 **
 ** This function checks clock settings with CPUSS HW registers.
 **
 ** \param[in]  McuClockConfigPtr      The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckClock_Cpuss_Regs(
  P2CONST( Mcu_ClockConfigType, MCU_CONST, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_CheckClock_Peri_Regs
 **
 ** This function checks clock settings with PERI HW registers.
 **
 ** \param[in]  McuClockConfigPtr      The pointer to clock configuration.
 */
extern FUNC( Mcu_ReturnType, MCU_CODE ) 
Mcu_CheckClock_Peri_Regs(
  P2CONST( Mcu_ClockConfigType, MCU_CONST, MCU_APPL_CONST ) McuClockConfigPtr
);


/** \brief Mcu_GetFllBypassWaitCycle
 **
 ** This function returns FLL bypass wait cycle.
 */
extern FUNC( uint32, MCU_CODE ) 
Mcu_GetFllBypassWaitCycle( void );


/** \brief Mcu_GetPllBypassWaitCycle
 **
 ** This function returns PLL bypass wait cycle.
 **
 ** \param[in]  PllRegIdx        The index number of Pll clock.
 */
extern FUNC( uint32, MCU_CODE ) 
Mcu_GetPllBypassWaitCycle(
  VAR( uint32, AUTOMATIC ) PllRegIdx
);


/** \brief Mcu_SetFllBypassWaitCycle
 **
 ** This function sets FLL bypass wait cycle.
 **
 ** \param[in]  BypassWaitCycle  Bypass wait cycle.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetFllBypassWaitCycle(
  VAR( uint32, AUTOMATIC ) BypassWaitCycle
);


/** \brief Mcu_SetPllBypassWaitCycle
 **
 ** This function sets PLL bypass wait cycle.
 **
 ** \param[in]  PllRegIdx        The index number of Pll clock.
 ** \param[in]  BypassWaitCycle  Bypass wait cycle.
 */
extern FUNC( void, MCU_CODE ) 
Mcu_SetPllBypassWaitCycle(
  VAR( uint32, AUTOMATIC ) PllRegIdx,
  VAR( uint32, AUTOMATIC ) BypassWaitCycle
);


#define MCU_STOP_SEC_CODE_ASIL_B
#include <Mcu_MemMap.h>

/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

# endif /* if !defined( MCU_REGS_H ) */
/*==================[end of file]============================================*/
