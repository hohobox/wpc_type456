/******************************************************************************
**                                                                            **
**  (C) 2021 HYUNDAI AUTOEVER Corp.                                           **
**  Confidential Proprietary Information. Distribution Limited.               **
**  This source code is permitted to be used only in projects contracted      **
**  with Hyundai Autoever, and any other use is prohibited.                   **
**  If you use it for other purposes or change the source code,               **
**  you may take legal responsibility.                                        **
**  In this case, There is no warranty and technical support.                 **
**                                                                            **
**  FILE-NAME: Os_Types.h                                                     **
**                                                                            **
**  MODULE-NAME: AUTOSAR Os Module                                            **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
**  Tool Version: 2.6.15                                                       **
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/
/*
 * INPUT FILE:    Configuration\ECU\Ecud_Os.arxml
 * GENERATED ON: The time-stamp is removed
 */

#ifndef OS_TYPES_H
#define OS_TYPES_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/

/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/
/**
  * @typedef EventMaskType
  *
  * Data type of the event mask
  *
  * see paragraph 13.5.1, page 60 of OSEK/VDX 2.2.3 spec
  */
typedef uint32 EventMaskType;

/**
  * @typedef EventMaskRefType
  *
  * References a #EventMaskType
  *
  * see paragraph 13.5.1, page 60 of OSEK/VDX 2.2.3 spec
  */
typedef P2VAR(EventMaskType, AUTOMATIC, OS_VAR) EventMaskRefType;

/**
  * @typedef TaskStateType
  *
  * identifies the state of a task
  *
  * see paragraph 13.2.1, page 49 of OSEK/VDX 2.2.3 spec
  */
typedef uint8 TaskStateType;

/**
  * @typedef TaskStateRefType
  *
  * References a #TaskStateType
  *
  * see paragraph 13.2.1, page 49 of OSEK/VDX 2.2.3 spec
  */
typedef P2VAR(TaskStateType, AUTOMATIC, OS_VAR) TaskStateRefType;

/**
  * @typedef TaskType
  *
  * A task's identifier.
  *
  * see paragraph 13.2.1, page 49 of OSEK/VDX 2.2.3 spec
  */
typedef uint32 TaskType;

/**
  * @typedef TaskRefType
  *
  * References a #TaskType
  *
  * see paragraph 13.2.1, page 49 of OSEK/VDX 2.2.3 spec
  */
typedef P2VAR(TaskType, AUTOMATIC, OS_VAR) TaskRefType;

/**
  * @typedef AppModeType
  *
  * Identifies an application mode
  *
  * see paragraph 13.7.1, page 66 of OSEK/VDX 2.2.3 spec
  */
typedef uint32 AppModeType;

/**
  * @typedef ApplicationType
  *
  * Identifies the OS-Application
  *
  * see Section 8.3.1 of AUTOSAR_SWS_OS
  */
typedef uint32 ApplicationType;

/**
  * @typedef ISRType
  *
  * Identifies an interrupt service routine (ISR)
  *
  * see Section 8.3.11 of AUTOSAR_SWS_OS
  */
typedef uint32 ISRType;

/**
  * @typedef TickType
  *
  * Represents count values in ticks
  *
  * see paragraph 13.6.1, page 62 of OSEK/VDX 2.2.3 spec
  */
typedef uint32 TickType;

/**
  * @typedef TickRefType
  *
  * Reference to the TickType
  *
  * see paragraph 13.6.1, page 62 of OSEK/VDX 2.2.3 spec
  */
typedef P2VAR(TickType, AUTOMATIC, OS_VAR) TickRefType;

/**
  * @typedef ResourceType
  *
  * Data type for a resource.
  *
  * see paragraph 13.4.1, page 58 of OSEK/VDX 2.2.3 spec
  */
typedef uint32 ResourceType;

/**
  * @typedef AlarmType
  *
  * Identifies an alarm object.
  *
  * see paragraph 13.6.1, page 62 of OSEK/VDX 2.2.3 spec
  */
typedef uint32 AlarmType;

/**
  * @typedef TrustedFunctionIndexType
  *
  * Identifies a trusted function.
  *
  * see Section 8.3.4 of AUTOSAR_SWS_OS
  */
typedef uint32 TrustedFunctionIndexType;

/**
  * @typedef ScheduleTableType
  *
  * Identifies a schedule table.
  *
  * see Section 8.3.12 of AUTOSAR_SWS_OS
  */
typedef uint32 ScheduleTableType;

/**
  * @typedef CounterType
  *
  * Identifies an Counter
  *
  * see Section 8.3.15 of AUTOSAR_SWS_OS
  */
typedef uint32 CounterType;

/**
  * @typedef ProtectionReturnType
  *
  * Identifies a value which controls further actions of the OS on return from
  * the protection hook.
  *
  * see Section 8.3.16 of AUTOSAR_SWS_OS
  */
typedef uint8 ProtectionReturnType;

/**
  * @typedef RestartType
  *
  * Defines the use of a Restart Task after terminating an OS-Application.
  *
  * see Section 8.3.17 of AUTOSAR_SWS_OS
  */
typedef uint32 RestartType;

/**
  * @typedef ScheduleTableStatusType
  *
  * identifies the state of a ScheduleTable
  *
  * see Section 8.3.13 of AUTOSAR_SWS_OS
  */

typedef uint8 ScheduleTableStatusType;

/**
  * @typedef ScheduleTableStatusRefType
  *
  * Points to a variable of the data type ScheduleTableStatusType.
  *
  * see Section 8.3.14 of AUTOSAR_SWS_OS
  */
typedef P2VAR(ScheduleTableStatusType, AUTOMATIC, OS_VAR)
ScheduleTableStatusRefType;

/**
  * @struct AlarmBaseType
  *
  * This structure is defined as paragraph 13.6.1 of OSEK/VDX spec
  *
  * @see AlarmBaseType
  */
typedef struct STag_AlarmBaseType
{
  /* maximum possible allowed count values in tick */
  TickType  maxallowedvalue;

  /* number of ticks required to reach a counter-specific (significant) unit */
  TickType  ticksperbase;

  /* smallest allowed value for the cycle-parameter of
  SetRelAlarm/SetAbsAlarm (only for systems with extended status) */
  TickType  mincycle;
} AlarmBaseType;

/**
  * @typedef AlarmBaseRefType
  *
  * References an #AlarmBaseType
  *
  * See paragraph 13.6.1 page 62 of OSEK/VDX 2.2.3 spec
  */
typedef P2VAR(AlarmBaseType, AUTOMATIC, OS_VAR)  AlarmBaseRefType;

/**
  * This data type points to a structure which holds the arguments for
  * a call to a trusted function.
  */
typedef CONSTP2VAR(void, AUTOMATIC, OS_VAR) TrustedFunctionParameterRefType;

/**
  * This data type is a pointer which is able to point to any location in the
  * MCU address space.
  */
typedef P2VAR(uint32, AUTOMATIC, OS_VAR) MemoryStartAddressType;

/**
  * This data type points to location where an ApplicationStateType can be stored.
  */
typedef P2VAR(uint8, AUTOMATIC, OS_VAR) ApplicationStateRefType;

/**
  * This data type identifies an object.
  */
typedef uint8 ObjectTypeType;

/**
  * This data type holds the size (in bytes) of a memory region.
  */
typedef uint32 MemorySizeType;

/**
  * This data type identifies the state of an OS-Application.
  */
typedef uint8 ApplicationStateType;

/**
  * This data type identifies if an OS-Application has access to an object.
  */
typedef uint8 ObjectAccessType;

/**
  * This type holds information how a specific memory region can be accessed.
  */
typedef uint8 AccessType;

/**
  * This data type identifies the Index of an Object Type.
  */
typedef uint32 ObjectTypeIndex;

/**
  * This data type identifies the CoreID.
  */
typedef uint8 CoreIDType;

/**
  * This data type identifies the Spinlock Id type.
  */
typedef uint32 SpinlockIdType;

/**
  * This data type identifies the Os Service Id type.
  */
typedef uint8 OSServiceIdType;

/* Type definition for TryToGetSpinlockType */
typedef enum
{
  TRYTOGETSPINLOCK_NOSUCCESS=0,
  TRYTOGETSPINLOCK_SUCCESS
} TryToGetSpinlockType;

/*******************************************************************************
**                      Configuration Set Handles                             **
*******************************************************************************/

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/

#endif /* OS_TYPES_H */
/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/

