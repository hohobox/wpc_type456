
#ifndef WDG_66_IA_PBCFG_H
#define WDG_66_IA_PBCFG_H 1

/** \brief AUTOSAR Wdg Driver
 **
 ** This file contains API definitions of the configuration of the
 ** AUTOSAR module Wdg that is target independent.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */


/*==================[inclusions]=============================================*/

#include <Wdg_66_IA_IncludeFiles.h> /* Do not include Wdg_66_IA_Cfg.h before */
                                    /* this line                             */
#include <Wdg_66_IA_Cfg.h>

/*==================[macros]=================================================*/

/* Number of watchdog configuration */
#define WDG_66_IA_WDGUNIT_COUNT         1U
/* Number of watchdog timer configuration */
#define WDG_66_IA_TIMERCONFUNIT_COUNT        1U
/* Array of post-build configuration setting */
#define WDG_66_IA_CONFIGURATION_ARCH_HWDG \
{ \
  { WDGIF_OFF_MODE, \
    NULL_PTR, \
    &Wdg_66_IA_TimerConfigData[0][0], \
    &Wdg_66_IA_SettingFastData[0], \
    &Wdg_66_IA_SettingSlowData[0], \
    &Wdg_66_IA_SettingOffData[0] }   /* WdgDefaultMode (Off mode) */ \
}
/* Indeterminacy the settings of slow mode are loaded */
#define  WDG_66_IA_CONFIGURATION_ARCH_TIMER \
{ \
  { \
    { \
      32768U, /* Frequency of the source clock */ \
      NULL_PTR, /* action in DEEPSLEEP mode*/ \
      WDG_66_IA_TIMER_WDT, /* Timer to be used */ \
      65535U, /* Real watchdog max timeout */ \
      0U, /* Number of CPU core where the WDG driver is assigned to */ \
      WDG_66_IA_ACTION_RESET,/* Lower Action */ \
      WDG_66_IA_ACTION_RESET,/* Upper Action */ \
      STD_OFF, /* action in DEEPSLEEP mode*/ \
      STD_ON, /* action in HIBERNATE mode*/ \
      STD_ON, /* action in DEBUG mode*/ \
      FALSE, /* Disable WDT */ \
      FALSE /* Enable warning Irq */ \
    } \
  } \
}

/* Indeterminacy the settings of off mode are loaded */
#define  WDG_66_IA_CONFIGURATION_ARCH1 \
{ \
  { \
    0U, /* Off timeout value (this value is not used) */ \
    0U, /* Off mode warning limit (this value is not used) */ \
    0U, /* Off mode lower limit (this value is not used) */ \
    40U, /* Off mode loop count of 1us */ \
    250U /* Off mode max wait time */ \
  } \
}

/* Indeterminacy the settings of slow mode are loaded */
#define  WDG_66_IA_CONFIGURATION_ARCH2 \
{ \
  { \
    500U, /* Slow timeout value */ \
    80U, /* Slow mode warning limit */ \
    0U, /* Slow mode lower limit */ \
    40U, /* Slow mode loop count of 1us */ \
    250U /* Slow mode max wait time */ \
  } \
}

/* Indeterminacy the settings of fast mode are loaded */
#define WDG_66_IA_CONFIGURATION_ARCH3 \
{ \
  { \
    100U, /* Fast timeout value */ \
    80U, /* Fast mode warning limit */ \
    0U, /* Fast mode lower limit */ \
    40U, /* Fast mode loop count of 1us */ \
    250U /* Fast mode max wait time */ \
  } \
}

/* Array of configuration settings for post-build */
#define WDG_66_IA_CONFIGURATION \
{ \
  { \
    (const Wdg_66_IA_SettingCommonType*) &Wdg_66_IA_SettingCommonData[0], \
    (const Wdg_66_IA_SettingType*) &Wdg_66_IA_SettingData_HWdg[0] \
  } \
}


/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/
/*==================[internal function declarations]=========================*/

#define WDG_66_IA_START_SEC_CODE
#include <Wdg_66_IA_MemMap.h>

/** \brief Wdg_66_IA_CheckConfigPointer
 **
 ** Internal implementation: This function checks if the configuration pointer
 ** specifies the correct address of the configuration table.
 ** \param [in] ConfigPtr: The table pointer of watchdog configuration settings.
 **
 ** \return TRUE:The configuration pointer address is valid.
 **         FALSE:The configuration pointer address is invalid.
 */
extern FUNC(boolean, WDG_CODE)
Wdg_66_IA_CheckConfigPointer( P2CONST( Wdg_66_IA_ConfigType, AUTOMATIC, WDG_APPL_CONST ) ConfigPtr );

#define WDG_66_IA_STOP_SEC_CODE
#include <Wdg_66_IA_MemMap.h>

/*==================[external constants]=====================================*/
extern CONST( Wdg_66_IA_ConfigType, WDG_CONST) Wdg_66_IA_Config[WDG_66_IA_WDGUNIT_COUNT];

/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* #ifndef WDG_66_IA_PBCFG_H */
/*==================[end of file]============================================*/
