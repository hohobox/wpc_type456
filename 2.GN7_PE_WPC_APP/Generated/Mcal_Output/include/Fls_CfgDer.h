#if !defined( FLS_CFGDER_H )
#define FLS_CFGDER_H

/** \brief AUTOSAR Fls Flash Driver
 **
 ** This file contains the all configuration declarations for
 ** the AUTOSAR module Fls that are target independent.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */





/*==================[includes]==============================================*/

/*==================[macros]================================================*/


/** \brief macro for judgment on whether this module itself is running on CM4 or on CM7 (dual or single) */
#define FLS_CM4                 (0U)
#define FLS_CM7                 (1U)
#define FLS_CM0P                (2U)
#if ( FLS_SW_MAJOR_VERSION == 1U )
#define FLS_CORE_KIND           FLS_CM4
#else
#define FLS_CORE_KIND           FLS_CM0P
#endif

                                                                                                                                                                                                                                
/** \brief macro for access to the memory map */
#define FLS_NUMBER_OF_SECTORS   176U

/** \brief flag value for specifying verification to do */
#define FLS_VERIFICATION_FLAG   (FLS_ERASE_VERIFICATION | \
                                 0U | \
                                 FLS_WRITE_VERIFICATION)

/* DMA channel (No.) for reading from work flash */
#define FLS_DMA_CHANNEL             (2U)

/* The size of auxiliary buffer that stores data which is read from work flash by DMA transfer */
#define FLS_AUXILIARY_BUFFER_SIZE   (128U)

/* flag value for specifying whether writing is performed with non-blocking mode or not */
#define FLS_USE_NON_BLOCKING_WRITE   STD_OFF

/* flag value for specifying whether reading is performed with DMA transfer or not */
#define FLS_USE_DMA_FOR_READ   STD_ON



/* number of bytes to be written at once */
#define FLS_PAGE_SIZE           (4UL)

/* size of sector */
#define FLS_MAX_SECTOR_SIZE     (2048U)

/* maximum time (plus margin) to erase one complete flash sector in milli seconds */
#define FLS_ERASE_TIME          180U

/* maximum time (plus margin) to retry for write enable acquisition in milli seconds */
#define FLS_MAX_RETRY_TIME      (200U)



/* value of FLASHC.FLASH_CTL: WORK_MAP=0; WORK_BANK_MODE=0; WORK_ECC_EN=1; WORK_ECC_INJ_EN=0; WORK_ERR_SILENT=1  */
#define FLS_FLASHC_FLASH_CTL_VALUE  (0x00500000UL)

/* mask of FLASHC.FLASH_CTL: mask for verifying settings */
#define FLS_FLASHC_FLASH_CTL_R_MASK (0x00702200UL)

/* mask of FLASHC.FLASH_CTL: mask for setting */
#define FLS_FLASHC_FLASH_CTL_W_MASK (0xFF8FDDFFUL)





/* mask of FM_CTL_ECT.WORK_FLASH_SAFETY: mask for setting if embedded operations are enabled */
#define FLS_FM_CTL_ECT_WORK_FLASH_SAFETY_W_MASK (0xFFFFFFFFUL)



/* value of FAULT.MASK1: SOURCE=Bit51/52/53 is 1 */
#define FLS_FAULT_STRUCT_MASK1_ENABLE           (0x00380000UL)

/* value of FAULT.MASK1: SOURCE=Bit51/52/53 is 0 */
#define FLS_FAULT_STRUCT_MASK1_DISABLE          (0x00000000UL)



/* mask of FAULT.MASK1: mask for capturing work flash fault */
#define FLS_FAULT_STRUCT_MASK1_W_MASK           (0xFFC7FFFFUL)



/* macro that determines whether the function Fls_WdgClear is defined */
#define FLS_DEFINITION_WDGCLEAR STD_ON

#if !defined( FLS_IO_DEFINE )

/* CPUSS registers access address */
#define FLS_CPUSS_ADDR          (0x40200000UL)
/* Fault structure registers access address */
#define FLS_FAULT_ADDR          (0x40210000UL)
/* IPC structure registers base address */
#define FLS_IPC_STRUCT_ADDR     (0x40220000UL)
/* WorkFlash registers access address */
#define FLS_FLASHC_ADDR         (0x40240000UL)
/* DMAC registers access address */
#define FLS_DMAC_ADDR           (0x402A0000UL)

#else

/* Dummy registers access address */
#define FLS_DUMMY_REGAREA_SIZE  (0x4+0x100+0x1200+0xF504+0x1800)

#define FLS_CPUSS_ADDR          ((uint8 *)(&Fls_DummyRegArea[0x0    >> 2U])) /* 0x40200000 - 0x40200003 */
#define FLS_FAULT_ADDR          ((uint8 *)(&Fls_DummyRegArea[0x4    >> 2U])) /* 0x40210000 - 0x402100FF */
#define FLS_IPC_STRUCT_ADDR     ((uint8 *)(&Fls_DummyRegArea[0x104  >> 2U])) /* 0x40220000 - 0x402211FF */
#define FLS_FLASHC_ADDR         ((uint8 *)(&Fls_DummyRegArea[0x1304 >> 2U])) /* 0x40240000 - 0x4024F503 */
#define FLS_DMAC_ADDR           ((uint8 *)(&Fls_DummyRegArea[0x10808 >> 2U]))/* 0x402A0000 - 0x402A17FF */

#endif /* if !defined( FLS_IO_DEFINE ) */

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

#define FLS_START_SEC_CONST_UNSPECIFIED
/* Deviation from MISRA-C:2004 rule 19.1, MISRA-C:2012 Rule-20.1.
   Justification: This implementation is specified by AUTOSAR specification. */
/* PRQA S 5087 1 */
#include <Fls_MemMap.h>

/* DMA channel (No.) for reading from work flash */
extern CONST( uint8, FLS_CONST ) Fls_DmaChannel;

/* The size of auxiliary buffer that stores data which is read from work flash by DMA transfer */
extern CONST( Fls_LengthType, FLS_CONST ) Fls_AuxiliaryBufferSize;

/* flag of directly reading from work flash without blank check */
extern CONST( uint8, FLS_CONST ) Fls_ReadImmediateDirect;

/* flag whether writing is performed with non-blocking mode or not */
extern CONST( uint8, FLS_CONST ) Fls_UseNonBlockingWrite;

/* flag whether reading is performed with DMA transfer or not */
extern CONST( uint8, FLS_CONST ) Fls_UseDmaForRead;

/* value of FLASHC.FLASH_CTL */
extern CONST( uint32, FLS_CONST ) Fls_FlashCtlValue;

/* mask of FLASHC.FLASH_CTL: mask for verifying settings */
extern CONST( uint32, FLS_CONST ) Fls_FlashCtlRMask;

/* mask of FLASHC.FLASH_CTL: mask for setting */
extern CONST( uint32, FLS_CONST ) Fls_FlashCtlWMask;

/* mask of FM_CTL_ECT.WORK_FLASH_SAFETY: mask for setting if embedded operations are enabled */
extern CONST( uint32, FLS_CONST ) Fls_WFSafetyWMask;

/* value of FAULT.MASK1 */
extern CONST( uint32, FLS_CONST ) Fls_FaultStructMask1Value;

/* mask of FAULT.MASK1: mask for setting */
extern CONST( uint32, FLS_CONST ) Fls_FaultStructMask1WMask;

/* maximum time (plus margin) to retry for write enable acquisition in milli seconds */
extern CONST( uint16, FLS_CONST ) Fls_MaxRetryTime;

/* Which core runs this module */
extern CONST( uint8, FLS_CONST ) Fls_CoreKind;

/* CPUSS registers access address */
extern volatile CONSTP2VAR( uint32, FLS_CONST, REGSPACE ) Fls_CpussBaseAddr;

/* Fault structure registers access address */
extern volatile CONSTP2VAR( uint32, FLS_CONST, REGSPACE ) Fls_FaultBaseAddr;

/* IPC structure registers base address */
extern volatile CONSTP2VAR( uint32, FLS_CONST, REGSPACE ) Fls_IpcStructBaseAddr;

/* WorkFlash registers access address */
extern volatile CONSTP2VAR( uint32, FLS_CONST, REGSPACE ) Fls_WfregBaseAddr;

/* DMAC registers access address */
extern volatile CONSTP2VAR( uint32, FLS_CONST, REGSPACE ) Fls_DmacBaseAddr;

#define FLS_STOP_SEC_CONST_UNSPECIFIED
/* Deviation from MISRA-C:2004 rule 19.1, MISRA-C:2012 Rule-20.1.
   Justification: This implementation is specified by AUTOSAR specification. */
/* PRQA S 5087 1 */
#include <Fls_MemMap.h>

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

#define FLS_START_SEC_VAR_NO_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

/* Data buffer from Flash for compare/read/verify operation */
extern VAR(uint32, FLS_VAR_NO_INIT) Fls_AuxiliaryBuffer[FLS_AUXILIARY_BUFFER_SIZE >> 2U];

#if defined( FLS_IO_DEFINE )

extern VAR( uint32, FLS_VAR_NO_INIT ) Fls_DummyRegArea[FLS_DUMMY_REGAREA_SIZE >> 2U];

extern VAR( uint8, FLS_VAR_NO_INIT ) Fls_DummyFlash[FLS_NUMBER_OF_SECTORS * FLS_MAX_SECTOR_SIZE];

#endif /* if defined( FLS_IO_DEFINE ) */

#define FLS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/



#endif /* if !defined( FLS_CFGDER_H ) */
/*==================[end of file]===========================================*/
