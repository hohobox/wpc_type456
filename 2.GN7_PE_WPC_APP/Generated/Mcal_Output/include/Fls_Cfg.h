#if !defined( FLS_CFG_H )
#define FLS_CFG_H

/** \brief AUTOSAR Fls Flash Driver
 **
 ** This file contains the all configuration declarations for
 ** the AUTOSAR module Fls that are target independent.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[includes]==============================================*/

#include <MemIf_Types.h>           /* AUTOSAR standard types */

/*==================[macros]================================================*/

#define FLS_GEN_MODULE_ID                   92U
#define FLS_GEN_VENDOR_ID                   66U
#define FLS_GEN_AR_RELEASE_MAJOR_VERSION    4U
#define FLS_GEN_AR_RELEASE_MINOR_VERSION    2U
#define FLS_GEN_AR_RELEASE_REVISION_VERSION 2U
#define FLS_GEN_SW_MAJOR_VERSION            1U
#define FLS_GEN_SW_MINOR_VERSION            17U
#define FLS_GEN_SW_PATCH_VERSION            1U

/* Several parameters shall be located in the file Fls_Cfg.h */

/** \brief Config Variant  */
#define FLS_VARIANTPRECOMPILE   0
#define FLS_VARIANTPOSTBUILD    1
#define FLS_CONFIG_VARIANT      FLS_VARIANTPRECOMPILE

/** \brief FLS Driver DriverIndex Symbolic Name */
#define Fls_FlsGeneral      0
#define FlsConf_FlsGeneral  0

/** \brief Job processing triggered by hardware interrupt
 ** Note: This is not used in the current implementation
 **
 ** ON  Job processing triggered by interrupt
 ** OFF Job processing not triggered by interrupt
 */
#define FLS_USE_INTERRUPTS   STD_OFF

/** \brief The flash driver shall load the flash access code to
 ** RAM whenever an erase or write job is started and unload
 ** (overwrite) it after that job has been finished or canceled.
 ** Note: This is not used in the current implementation
 **
 ** ON  Flash access code loaded on job start / unloaded on job end or error
 ** OFF Flash access code not loaded to / unloaded from RAM at all
  */
#define FLS_AC_LOAD_ON_JOB_START   STD_OFF

/** \brief Compile switch to enable / disable the version information.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_VERSION_INFO_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_Cancel function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_CANCEL_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_Compare function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_COMPARE_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_SetMode function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_SET_MODE_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_GetStatus function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_GET_STATUS_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_GetJobResult function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_GET_JOB_RESULT_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_BlankCheck function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_BLANK_CHECK_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_ReadImmediate function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_READ_IMMEDIATE_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_Suspend and the Fls_Resume function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_SUSPEND_RESUME_API   STD_OFF

/** \brief Compile switch to enable / disable the Fls_SetCycleMode function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_SET_CYCLE_MODE_API   STD_OFF

/** \brief Compile switch to enable / disable the Default Error Tracer (Det) detection and reporting.
 **
 ** ON  Default Error Tracer (Det) detection enabled
 ** OFF Default Error Tracer (Det) detection disabled
  */
#define FLS_DEV_ERROR_DETECT   STD_ON

/** \brief Compile switch to enable / disable the runtime errors detection and reporting.
 **
 ** ON  Runtime errors detection enabled
 ** OFF Runtime errors detection disabled
  */
#define FLS_RUNTIME_ERROR_DETECT   STD_OFF

/** This parameter defines the existence and the name of a callout function that is
 ** called each time an error was detected.
 ** The function has to have the following parameters: (ModuleId: uint16,
 ** InstanceId: uint8, ApiId: uint8, ErrorId: uint8)
*/
#define FLS_ERROR_CALLOUT_FUNCTION   Det_ReportError

/** This parameter defines the existence and the name of a callout function that is
 ** called each time an erase request was accepted.
 ** The function has to have the following parameter: (TargetAddress: Fls_AddressType)
*/

#define FLS_ERASE_CALLOUT_FUNCTION_USE STD_OFF


/** This parameter indicates whether error callout functions are called when
 ** a blank check job detects non-blank.
 **
 ** ON  flash driver calls the error callout functions
 ** OFF flash driver does not call the error callout functions
  */
#define FLS_REPORT_ERROR_IF_NOT_BLANK  STD_ON

/** \brief This parameter indicates whether the HSM (Hardware Security Module) is present.
 **
 ** ON  HSM is present
 ** OFF HSM is not present
  */
#define FLS_HSM_PRESENT   STD_OFF

/** \brief Compile switch to enable and disable eCT Flash safety mechanism for write / erase.
 **
 ** ON  eCT Flash safety mechanism is provided
 ** OFF eCT Flash safety mechanism is not provided
  */
#define FLS_USE_SAFETY_MECHANISM   STD_OFF



/** This parameter defines the existence and the name of a callout function for 
 ** invocation of system-call in upper layer.
 ** The function has to have the following parameters: (Fls_IpcContext: uint32 *) and
 ** return a value of Std_ReturnType.
*/
#define FLS_SYSTEMCALL_CALLOUT_FUNCTION NULL_PTR

#define FLS_INVALID_CONFIGSET_POINTER   0U

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define FLS_START_SEC_CODE
#include <Fls_MemMap.h>

/** \brief Fls_WdgClear
 **
 ** This function is implemented for clearing (triggering) the watchdog timer by user.
 ** 
 ** \return    none
 **
 */
extern FUNC(void, FLS_CODE) Fls_WdgClear(void);

/** \brief Fls_SetConfig
 **
 ** Sets address to configuration.
 **
 ** \param[in]  ConfigPtr   Pointer to flash driver configuration set
 **
 ** \return    configuration pointer has been set/not been set
 ** \retval    FLS_FALSE        configuration pointer has not been set
 **            FLS_TRUE         configuration pointer has been set
 */
extern FUNC(uint8, FLS_CODE) Fls_SetConfig
(
    P2CONST(Fls_ConfigType, AUTOMATIC, FLS_APPL_CONST) ConfigPtr
);

/** \brief Fls_GetLogicalSectorNumber
 **
 ** Gets logical sector number of specified logical address.
 **
 ** \param[in]  LogicalAddress  logical address in flash memory
 **
 ** \return    logical sector number of specified logical address
 */
extern FUNC(uint16, FLS_CODE) Fls_GetLogicalSectorNumber
(
    Fls_AddressType LogicalAddress
);

/** \brief Fls_SetCurrentSector
 **
 ** Sets current logical sector.
 ** Note: This function is is used only for an erase job.
 **
 ** \param[in]  CurrentLogicalSector  current logical sector
 **
 ** \return    none
 */
extern FUNC(void, FLS_CODE) Fls_SetCurrentSector
(
    uint16 CurrentLogicalSector
);

/** \brief Fls_IncrementCurrentSector
 **
 ** Increments current logical sector.
 ** Note: This function is is used only for an erase job.
 **
 ** \return    none
 */
extern FUNC(void, FLS_CODE) Fls_IncrementCurrentSector(void);

/** \brief Fls_GetCurrentSectorInfo
 **
 ** Gets information about current logical sector and increment current logical sector.
 ** Note: This function is is used only for an erase job.
 **
 ** \param[out] CurrentSectorInfoPtr    Pointer to store information about current logical sector
 **
 ** \return    none
 */
extern FUNC(void, FLS_CODE) Fls_GetCurrentSectorInfo
(
    P2VAR(Fls_MemoryMapType, AUTOMATIC, FLS_APPL_DATA) CurrentSectorInfoPtr
);

#if defined( FLS_DECLARATION_SPECIAL_FUNCTION_FOR_CYFEE )

/** \brief Fls_GetSecTopAddressFromAddress
 **
 ** Gets physical address of sector top of specified physical address.
 **
 ** \param[in]  TargetAddress   physical address in flash memory
 **
 ** \return    physical address of sector top of specified physical address
 */
extern FUNC(Fls_AddressType, FLS_CODE) Fls_GetSecTopAddressFromAddress
(
    Fls_AddressType TargetAddress
);

/** \brief Fls_GetBlankAddr
 **
 ** Gets top blank address.
 **
 ** \param[in] SourceAddress    Source physical address in flash memory
 ** \param[in] Length           Number of bytes to do blank check
 ** \param[in] BlankLength      Number of bytes for finding blank
 **
 ** \return    top blank physical address if found, or NULL_PTR if not found
 **
 */
extern FUNC(Fls_AddressType, FLS_CODE) Fls_GetBlankAddr
(
    Fls_AddressType SourceAddress,
    Fls_LengthType Length,
    Fls_LengthType BlankLength
);

/** \brief Fls_ReadImmediateSync
 **
 ** Reads data without blank check from specified physical address.
 **
 ** \param[in]  SourceAddress    physical address in flash memory
 ** \param[out] TargetAddressPtr Pointer to read buffer
 ** \param[in]  Length           Number of bytes to read
 **
 ** \return    none
 */
extern FUNC(void, FLS_CODE) Fls_ReadImmediateSync
(
    Fls_AddressType SourceAddress,
    P2VAR(uint32, AUTOMATIC, FLS_APPL_DATA) TargetAddressPtr,
    Fls_LengthType Length
);

/** \brief Fls_GetFaultInfo
 **
 ** Gets fault information
 **
 ** \return  current fault information
 ** \retval  FLS_FAULT_NONE          no fault
 **          FLS_FAULT_SED           single bit error
 **          FLS_FAULT_DED           double bit error
 **          FLS_FAULT_BUSERROR      bus error
 **          FLS_FAULT_MACROERROR    Flash macro error
 **          FLS_FAULT_OTHERERROR    any other error
 */
extern FUNC(Fls_FaultType, FLS_CODE) Fls_GetFaultInfo(void);

#endif /* if defined( FLS_DECLARATION_SPECIAL_FUNCTION_FOR_CYFEE ) */

#define FLS_STOP_SEC_CODE
#include <Fls_MemMap.h>

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

#define FLS_START_SEC_CONST_UNSPECIFIED
#include <Fls_MemMap.h>

/* flag whether use interrupts or not */
extern CONST( uint8, FLS_CONST ) Fls_UseInterrupts;

/* flag whether error callout functions are called when a blank check job detects non-blank. */
extern CONST( uint8, FLS_CONST ) Fls_ReportErrorIfNotBlank;

/* flag whether the HSM (Hardware Security Module) is present or not */
extern CONST( uint8, FLS_CONST ) Fls_HsmPresent;

/* flag whether use eCT Flash safety mechanism or not */
extern CONST( uint8, FLS_CONST ) Fls_UseSafetyMechanism;

/* The existence and the name of a callout function for invocation of system-call in upper layer. */
extern CONST( Fls_SystemcallCalloutFctPtr, FLS_CONST ) Fls_SystemcallCalloutFunction;

#define FLS_STOP_SEC_CONST_UNSPECIFIED
#include <Fls_MemMap.h>

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/

#define FLS_START_SEC_VAR_NO_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

/* Pointer to flash driver configuration set */
extern P2CONST(Fls_ConfigType, AUTOMATIC, FLS_APPL_CONST) Fls_ConfigPtr;

/* Pointer to flash memory map */
extern P2CONST(Fls_MemoryMapType, AUTOMATIC, FLS_APPL_CONST) Fls_MemoryMapPtr;

/* flag whether IPC structure used for eCT Flash safety mechanism is locked or not */
extern VAR(uint8, FLS_VAR_NO_INIT) Fls_IpcLocked;

#define FLS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/



#endif /* if !defined( FLS_CFG_H ) */
/*==================[end of file]===========================================*/
