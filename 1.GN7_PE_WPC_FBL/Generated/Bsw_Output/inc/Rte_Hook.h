
/*******************************************************************************
**  FILE-NAME: Rte_Hook.h                                                     **
**                                                                            **
**  MODULE-NAME: AUTOSAR RTE GENERATION TOOL                                  **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
**  Tool Version: 4.11.1                                                   **
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/
/*
 * INPUT FILE:
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\ECUCD_EcucValueCollection.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_Com.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_Crypto_76_HaeModule.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_Det.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_EcuC.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_Fota.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_Mem_76_Pfls.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_Os.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\ECU\Ecud_Rte.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Adc.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_BswM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Can.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_CanIf.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_CanSM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_CanTp.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_CanTrcv.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Com.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_ComM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Crc.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Dcm.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Det.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Dio.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Gpt.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Mcu.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Os.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_PduR.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Port.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Spi.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Bswmd\Bswmd_Wdg.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Composition\EcuExtract.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\DBImport\BCAN.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\DataTypes\AUTOSAR_DataTypes.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\DataTypes\AUTOSAR_DataTypes_Etc.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_App\App_Dcm.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_App\App_Mode.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_App\App_WdgM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_Bsw\MODE_PortInterfaces.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_Bsw\Swcd_Bsw_BswM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_Bsw\Swcd_Bsw_Os.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_Bsw\Swcd_CanTp.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_Bsw\Swcd_ComM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Configuration\System\Swcd_Bsw\Swcd_Det.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_Crypto_76_HaeModule.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_Csm.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_EcuM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_Fota.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_KeyM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_Mem_76_Pfls.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_WdgIf.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\bswmd\Bswmd_WdgM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\swcd\Swcd_Bsw_Csm.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\swcd\Swcd_Bsw_Dcm.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\swcd\Swcd_Bsw_EcuM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\swcd\Swcd_Bsw_KeyM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\swcd\Swcd_Fota.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Generated\Bsw_Output\swcd\Swcd_WdgM.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Static_Code\Modules\b_autosar_sys_EcuM_R40\generator\EcuM_PortInterface.arxml
 *      D:\00_Project\95_WPC_TYPE5\trunk\03.SWE_SW설계\4.SW_통합프로젝트\1.GN7_PE\1.GN7_PE_WPC_FBL\Static_Code\Modules\b_autosar_sys_WdgM_R40\generator\Swcd_WdgM_Fixed.arxml

 * GENERATED ON: The time-stamp is removed
*/

/*******************************************************************************
* PRE-JUSTIFICATION BEGINE SECTION (MISRA-C RULE CHECKER)
* These rules will not be applied for verification based on the MISRA Rule
* in Rte generated source
*******************************************************************************/
/*
  polyspace:begin<MISRA-C:5.1:Not a defect:Justify with annotations> Number of character is depends on user configuration
  polyspace:begin<MISRA-C:19.1:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Memory Mapping)
  polyspace:begin<MISRA-C:19.4:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Rte SWS #1154, #6713)
  polyspace:begin<MISRA-C:19.6:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Memory Mapping)
  polyspace:begin<MISRA-C:19.7:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Rte SWS #1236)
*/

#ifndef RTE_HOOK_H
#define RTE_HOOK_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
/* polyspace:begin<MISRA-C:1.1:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Inclusion of Header Files) */
#include "Rte_Type.h"
#include "Rte_Cfg.h"
#include "Os.h"
/* polyspace:end<MISRA-C:1.1:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Inclusion of Header Files) */

#ifndef RTE_VFB_TRACE
#define RTE_VFB_TRACE (RTE_FALSE)
#endif /* RTE_VFB_TRACE */

/*******************************************************************************
**                      Version Information                                   **
*******************************************************************************/
#ifdef RTE_VENDOR_ID
  #if (RTE_VENDOR_ID != 76)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Vendor Id"
  #endif
#else
  #define RTE_VENDOR_ID 76
#endif

#ifdef RTE_MODULE_ID
  #if (RTE_MODULE_ID != 2)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Module Id"
  #endif
#else
  #define RTE_MODULE_ID 2
#endif

#ifdef RTE_SW_MAJOR_VERSION
  #if (RTE_SW_MAJOR_VERSION != 4)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Major Version"
  #endif
#else
  #define RTE_SW_MAJOR_VERSION 4
#endif

#ifdef RTE_SW_MINOR_VERSION
  #if (RTE_SW_MINOR_VERSION != 11)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Minor Version"
  #endif
#else
  #define RTE_SW_MINOR_VERSION 11
#endif

#ifdef RTE_SW_PATCH_VERSION
  #if (RTE_SW_PATCH_VERSION != 1)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Patch Version"
  #endif
#else
  #define RTE_SW_PATCH_VERSION 1
#endif

#ifdef RTE_AR_RELEASE_MAJOR_VERSION
  #if (RTE_AR_RELEASE_MAJOR_VERSION != 4)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Release Major Version"
  #endif
#else
  #define RTE_AR_RELEASE_MAJOR_VERSION 4
#endif

#ifdef RTE_AR_RELEASE_MINOR_VERSION
  #if (RTE_AR_RELEASE_MINOR_VERSION != 0)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Release Minor Version"
  #endif
#else
  #define RTE_AR_RELEASE_MINOR_VERSION 0
#endif

#ifdef RTE_AR_RELEASE_REVISION_VERSION
  #if (RTE_AR_RELEASE_REVISION_VERSION != 3)
    #error "Rte_Cfg.h : Mismatch in Rte Specification Release Revision Version"
  #endif
#else
  #define RTE_AR_RELEASE_REVISION_VERSION 3
#endif

/*******************************************************************************
** Hook Code                                                                  **
*******************************************************************************/
#define RTE_START_SEC_CODE
#include "MemMap.h"
#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Start
#endif

#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Start)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Start
extern void Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ProtocolType ProtocolID);
#else
#define Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Start(ProtocolID) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Return
#endif

#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Return)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Return
extern void Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ProtocolType ProtocolID);
#else
#define Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StartProtocol_Return(ProtocolID) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Start
#endif

#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Start)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Start
extern void Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ProtocolType ProtocolID);
#else
#define Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Start(ProtocolID) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Return
#endif

#if defined(Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Return)
#undef Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Return
extern void Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ProtocolType ProtocolID);
#else
#define Rte_CallHook_Dcm_CallbackDCMRequestServices_ECU1_StopProtocol_Return(ProtocolID) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Start)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Start
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Return)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Return
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_FreezeCurrentState_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Start)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Start
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Return)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Return
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ResetToDefault_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Start)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Start
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Return)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Return
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ReturnControlToECU_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Start)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Start
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) ControlStateInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Start(ControlStateInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Return)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Return
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) ControlStateInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_ShortTermAdjustment_Return(ControlStateInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Start)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Start
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Start(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Return)
#undef Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Return
extern void Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ActuatorControl_WriteData_Return(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_BatVolt_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_BatVolt_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Start)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Start
extern void Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Start(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Return)
#undef Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Return
extern void Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_BatVolt_WriteData_Return(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ECT_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ECT_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_ECT_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_ECT_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_ECT_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ECT_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_ECT_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_ECT_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_ECT_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_WriteData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ECT_WriteData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_WriteData_Start)
#undef Rte_CallHook_Dcm_DataServices_ECT_WriteData_Start
extern void Rte_CallHook_Dcm_DataServices_ECT_WriteData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ECT_WriteData_Start(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_WriteData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_ECT_WriteData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_ECT_WriteData_Return)
#undef Rte_CallHook_Dcm_DataServices_ECT_WriteData_Return
extern void Rte_CallHook_Dcm_DataServices_ECT_WriteData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_ECT_WriteData_Return(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Start)
#undef Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Start
extern void Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Return)
#undef Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Return
extern void Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_FreezeCurrentState_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_RPM_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_RPM_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Start)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Start
extern void Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Return)
#undef Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Return
extern void Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ReturnControlToECU_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Start)
#undef Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Start
extern void Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) ControlStateInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Start(ControlStateInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Return)
#undef Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Return
extern void Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) ControlStateInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_ShortTermAdjustment_Return(ControlStateInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_WriteData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_WriteData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_WriteData_Start)
#undef Rte_CallHook_Dcm_DataServices_RPM_WriteData_Start
extern void Rte_CallHook_Dcm_DataServices_RPM_WriteData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_WriteData_Start(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_WriteData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_RPM_WriteData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_RPM_WriteData_Return)
#undef Rte_CallHook_Dcm_DataServices_RPM_WriteData_Return
extern void Rte_CallHook_Dcm_DataServices_RPM_WriteData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_RPM_WriteData_Return(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUHardwareVersionNumber_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_SystemSupplierECUSoftwareNumber_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Start)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Start
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) ScalingInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Start(ScalingInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Return)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Return
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) ScalingInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_GetScalingInformation_Return(ScalingInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Start)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Start
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Start(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Return)
#undef Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Return
extern void Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VINDataIdentifier_WriteData_Return(Data,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleManufacturerECUSoftwareVersionNumber_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Start)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Start
extern void Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Start(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Return)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Return
extern void Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleSpeed_ConditionCheckRead_Return(ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Start)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Start
extern void Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) ScalingInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Start(ScalingInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Return)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Return
extern void Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) ScalingInfo,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleSpeed_GetScalingInformation_Return(ScalingInfo,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Start
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Start)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Start
extern void Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Start(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Return
#endif

#if defined(Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Return)
#undef Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Return
extern void Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_CallHook_Dcm_DataServices_VehicleSpeed_ReadData_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Key,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Start(Key,	OpStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Key,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_CompareKey_Return(Key,	OpStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Start(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_GetSecurityAttemptCounter_Return(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Seed,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Start(OpStatus,	Seed,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Seed,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_GetSeed_Return(OpStatus,	Seed,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Start(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L10_SetSecurityAttemptCounter_Return(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Key,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Start(Key,	OpStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Key,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_CompareKey_Return(Key,	OpStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Start(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_GetSecurityAttemptCounter_Return(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Seed,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Start(OpStatus,	Seed,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Seed,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_GetSeed_Return(OpStatus,	Seed,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Start
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Start)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Start
extern void Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Start(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Return
#endif

#if defined(Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Return)
#undef Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Return
extern void Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_OpStatusType OpStatus,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 AttemptCounter);
#else
#define Rte_CallHook_Dcm_SecurityAccess_L9_SetSecurityAttemptCounter_Return(OpStatus,	AttemptCounter) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Start
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Start)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Start
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ConfirmationStatusType ConfirmationStatus);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Start(SID,	ReqType,	SourceAddress,	ConfirmationStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Return
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Return)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Return
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ConfirmationStatusType ConfirmationStatus);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Confirmation_Return(SID,	ReqType,	SourceAddress,	ConfirmationStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Start
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Start)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Start
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) RequestData,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 DataSize,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Start(SID,	RequestData,	DataSize,	ReqType,	SourceAddress,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Return
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Return)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Return
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) RequestData,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 DataSize,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification0_Indication_Return(SID,	RequestData,	DataSize,	ReqType,	SourceAddress,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Start
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Start)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Start
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ConfirmationStatusType ConfirmationStatus);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Start(SID,	ReqType,	SourceAddress,	ConfirmationStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Return
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Return)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Return
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Dcm_ConfirmationStatusType ConfirmationStatus);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Confirmation_Return(SID,	ReqType,	SourceAddress,	ConfirmationStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Start
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Start)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Start
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) RequestData,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 DataSize,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Start(SID,	RequestData,	DataSize,	ReqType,	SourceAddress,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Return
#endif

#if defined(Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Return)
#undef Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Return
extern void Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 SID,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) RequestData,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 DataSize,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint8 ReqType,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 SourceAddress,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
#define Rte_CallHook_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification1_Indication_Return(SID,	RequestData,	DataSize,	ReqType,	SourceAddress,	ErrorCode) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Start
#endif

#if defined(Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Start)
#undef Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Start
extern void Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);
#else
#define Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Start(ComMode) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Return
#endif

#if defined(Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Return)
#undef Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Return
extern void Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);
#else
#define Rte_CallHook_SWC_AppMode_ComM_UserRequest_GetCurrentComMode_Return(ComMode) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Start
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Start)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Start
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Start(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Return
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Return)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Return
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_ReleaseRUN_Return(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Start
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Start)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Start
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Start(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Return
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Return)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Return
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestOff_Return(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Start
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Start)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Start
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Start(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Return
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Return)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Return
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestRUN_Return(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Start
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Start)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Start
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Start(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Return
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Return)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Return
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestReset_Return(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Start
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Start)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Start
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Start(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Return
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Return)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Return
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_RequestSleep_Return(user) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Start
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Start)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Start
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Start(void);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Start() ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Return
#endif

#if defined(Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Return)
#undef Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Return
extern void Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Return(void);
#else
#define Rte_CallHook_SWC_AppMode_clientPort_StateRequest_SetRunState_Return() ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start(OUT P2VAR (Rte_ModeType_MDG_CanSMBORState, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_CanSMBORState, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return(OUT P2VAR (Rte_ModeType_MDG_CanSMBORState, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_CanSMBORState, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Start
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Start)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Start
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Start(OUT P2VAR (Rte_ModeType_MDG_ComMMode, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_ComMMode, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Start(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Return
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Return)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Return
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Return(OUT P2VAR (Rte_ModeType_MDG_ComMMode, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_ComMMode, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_ComMMode_BCAN_ComMMode_BCAN_Return(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Start
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Start)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Start
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Start(OUT P2VAR (Rte_ModeType_EcuMode, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_EcuMode, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Start(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Return
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Return)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Return
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Return(OUT P2VAR (Rte_ModeType_EcuMode, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_EcuMode, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_EcuMode_EcuMode_Return(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Start
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Start)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Start
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Start(OUT P2VAR (Rte_ModeType_MDG_InitState, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_InitState, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Start(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Return
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Return)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Return
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Return(OUT P2VAR (Rte_ModeType_MDG_InitState, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_InitState, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_InitState_InitState_Return(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Start
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Start)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Start
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Start(OUT P2VAR (Rte_ModeType_MDG_WakeupEvent, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_WakeupEvent, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Start(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Return
#endif

#if defined(Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Return)
#undef Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Return
extern void Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Return(OUT P2VAR (Rte_ModeType_MDG_WakeupEvent, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_MDG_WakeupEvent, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_AppMode_modeNotificationPort_WakeupEvent_WakeupEvent_Return(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start
#endif

#if defined(Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start)
#undef Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start
extern void Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start(IN uint8 Data);
#else
#define Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start(Data) ((void)(0))
#endif

#if defined(Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return
#endif

#if defined(Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return)
#undef Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return
extern void Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return(IN uint8 Data);
#else
#define Rte_WriteHook_SWC_AppMode_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return(Data) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Start)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Start
extern void Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 keyElementId,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(Csm_ConstDataPtr, RTE_DATA) keyPtr,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 keyLength);
#else
#define Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Start(keyElementId,	keyPtr,	keyLength) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Return)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Return
extern void Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 keyElementId,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(Csm_ConstDataPtr, RTE_DATA) keyPtr,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 keyLength);
#else
#define Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeyElementSet_Return(keyElementId,	keyPtr,	keyLength) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Start)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Start
extern void Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Start(void);
#else
#define Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Start() ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Return)
#undef Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Return
extern void Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Return(void);
#else
#define Rte_CallHook_SWC_DiagnosticService_CsmKeyManagement_CryptoKey_OEUK_KeySetValid_Return() ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Start)
#undef Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Start
extern void Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Crypto_OperationModeType mode,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(Csm_ConstDataPtr, RTE_DATA) dataBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 dataLength,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(Csm_ConstDataPtr, RTE_DATA) compareBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 compareLength,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Crypto_VerifyResultType, AUTOMATIC, RTE_APPL_DATA) resultBuffer);
#else
#define Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Start(mode,	dataBuffer,	dataLength,	compareBuffer,	compareLength,	resultBuffer) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Return)
#undef Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Return
extern void Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Crypto_OperationModeType mode,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(Csm_ConstDataPtr, RTE_DATA) dataBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 dataLength,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(Csm_ConstDataPtr, RTE_DATA) compareBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint32 compareLength,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Crypto_VerifyResultType, AUTOMATIC, RTE_APPL_DATA) resultBuffer);
#else
#define Rte_CallHook_SWC_DiagnosticService_CsmSignatureVerify_RSASSA_PKCS1_v1_5_SignatureVerify_Return(mode,	dataBuffer,	dataLength,	compareBuffer,	compareLength,	resultBuffer) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Start)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Start
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_ProtocolType, AUTOMATIC, RTE_APPL_DATA) ActiveProtocol);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Start(ActiveProtocol) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Return)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Return
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_ProtocolType, AUTOMATIC, RTE_APPL_DATA) ActiveProtocol);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetActiveProtocol_Return(ActiveProtocol) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Start)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Start
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_SecLevelType, AUTOMATIC, RTE_APPL_DATA) SecLevel);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Start(SecLevel) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Return)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Return
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_SecLevelType, AUTOMATIC, RTE_APPL_DATA) SecLevel);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSecurityLevel_Return(SecLevel) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Start)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Start
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_SesCtrlType, AUTOMATIC, RTE_APPL_DATA) SesCtrlType);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Start(SesCtrlType) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Return)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Return
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(Dcm_SesCtrlType, AUTOMATIC, RTE_APPL_DATA) SesCtrlType);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_GetSesCtrlType_Return(SesCtrlType) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Start)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Start
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Start(void);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Start() ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Return)
#undef Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Return
extern void Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Return(void);
#else
#define Rte_CallHook_SWC_DiagnosticService_DCM_Services_ResetToDefaultSession_Return() ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Start)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Start
extern void Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) resultBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	INOUT P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) resultLength);
#else
#define Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Start(resultBuffer,	resultLength) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Return)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Return
extern void Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) resultBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	INOUT P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) resultLength);
#else
#define Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L10_RandomGenerate_L10_RandomGenerate_Return(resultBuffer,	resultLength) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Start
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Start)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Start
extern void Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) resultBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	INOUT P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) resultLength);
#else
#define Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Start(resultBuffer,	resultLength) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Return
#endif

#if defined(Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Return)
#undef Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Return
extern void Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) resultBuffer,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	INOUT P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) resultLength);
#else
#define Rte_CallHook_SWC_DiagnosticService_HaeHsmRandomGenerate_L9_CsmRandomGenerateConfig_RandomGenerate_Return(resultBuffer,	resultLength) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Start
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Start)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Start
extern void Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Start(OUT P2VAR (Rte_ModeType_DcmApplicationUpdated, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_DcmApplicationUpdated, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Start(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Return
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Return)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Return
extern void Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Return(OUT P2VAR (Rte_ModeType_DcmApplicationUpdated, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_DcmApplicationUpdated, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_ApplicationUpdated_DcmApplicationUpdated_Return(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Start
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Start)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Start
extern void Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Start(OUT P2VAR (Rte_ModeType_DcmDiagnosticSessionControl, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_DcmDiagnosticSessionControl, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Start(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Return
#endif

#if defined(Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Return)
#undef Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Return
extern void Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Return(OUT P2VAR (Rte_ModeType_DcmDiagnosticSessionControl, AUTOMATIC, RTE_APPL_DATA) previousmode, OUT P2VAR (Rte_ModeType_DcmDiagnosticSessionControl, AUTOMATIC, RTE_APPL_DATA) nextmode);
#else
#define Rte_ModeHook_SWC_DiagnosticService_modeNotificationPort_SessionControl_DcmDiagnosticSessionControl_Return(previousmode, nextmode) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Start
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Start)
#undef Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Start
extern void Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN WdgM_CheckpointIdType ddCheckpointID);
#else
#define Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Start(ddCheckpointID) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Return
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Return)
#undef Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Return
extern void Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN WdgM_CheckpointIdType ddCheckpointID);
#else
#define Rte_CallHook_SWC_WdgMTest_SE_WdgMTest_CheckpointReached_Return(ddCheckpointID) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Start
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Start)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Start
extern void Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(WdgM_SupervisedEntityIdType, AUTOMATIC, RTE_APPL_DATA) pSEID);
#else
#define Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Start(pSEID) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Return
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Return)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Return
extern void Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(WdgM_SupervisedEntityIdType, AUTOMATIC, RTE_APPL_DATA) pSEID);
#else
#define Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetFirstExpiredSEID_Return(pSEID) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Start
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Start)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Start
extern void Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(WdgM_GlobalStatusType, AUTOMATIC, RTE_APPL_DATA) pStatus);
#else
#define Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Start(pStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Return
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Return)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Return
extern void Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	OUT P2VAR(WdgM_GlobalStatusType, AUTOMATIC, RTE_APPL_DATA) pStatus);
#else
#define Rte_CallHook_SWC_WdgMTest_WdgM_API_R_GetGlobalStatus_Return(pStatus) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Start
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Start)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Start
extern void Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN WdgM_ModeType ddMode,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 usCallerID);
#else
#define Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Start(ddMode,	usCallerID) ((void)(0))
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Return
#endif

#if defined(Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Return)
#undef Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Return
extern void Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN WdgM_ModeType ddMode,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 usCallerID);
#else
#define Rte_CallHook_SWC_WdgMTest_WdgM_API_R_SetMode_Return(ddMode,	usCallerID) ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Start
#endif

#if defined(Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Start)
#undef Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Start
extern void Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Start();
#else
#define Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Start() ((void)(0))
#endif

#if defined(Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Return
#endif

#if defined(Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Return)
#undef Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Return
extern void Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Return();
#else
#define Rte_ModeHook_SWC_WdgMTest_globalMode_currentMode_Return() ((void)(0))
#endif

#if defined(Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start
#endif

#if defined(Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start)
#undef Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start
extern void Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start(OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Start(Data) ((void)(0))
#endif

#if defined(Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return
#endif

#if defined(Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return)
#undef Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return
extern void Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return(OUT P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_ReadHook_BswM_modeRequestPort_ComMMode_BCAN_ComMMode_BCAN_Return(Data) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start(IN Rte_ModeType_MDG_CanSMBORState NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return(IN Rte_ModeType_MDG_CanSMBORState NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_CanSMBORState_BCAN_CanSMBORState_BCAN_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Start(IN Rte_ModeType_MDG_CanSMState NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Return(IN Rte_ModeType_MDG_CanSMState NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_CanSMState_BCAN_CanSMState_BCAN_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Start(IN Rte_ModeType_MDG_ComMMode NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Return(IN Rte_ModeType_MDG_ComMMode NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_ComMMode_BCAN_ComMMode_BCAN_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Start(IN Rte_ModeType_DcmApplicationUpdated NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Return(IN Rte_ModeType_DcmApplicationUpdated NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmApplicationUpdated_DcmApplicationUpdated_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Start(IN Rte_ModeType_DcmCommunicationControl NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Return(IN Rte_ModeType_DcmCommunicationControl NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmCommunicationControl_0_DcmCommunicationControl_0_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Start(IN Rte_ModeType_DcmControlDTCSetting NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Return(IN Rte_ModeType_DcmControlDTCSetting NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmControlDTCSetting_DcmControlDTCSetting_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Start(IN Rte_ModeType_DcmDiagnosticSessionControl NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Return(IN Rte_ModeType_DcmDiagnosticSessionControl NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmDiagnosticSessionControl_DcmDiagnosticSessionControl_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Start(IN Rte_ModeType_DcmModeRapidPowerShutDown NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Return(IN Rte_ModeType_DcmModeRapidPowerShutDown NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_DcmModeRapidPowerShutDown_DcmModeRapidPowerShutDown_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Start(IN Rte_ModeType_EcuMode NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Return(IN Rte_ModeType_EcuMode NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_EcuMode_EcuMode_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Start(IN Rte_ModeType_MDG_InitState NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Return(IN Rte_ModeType_MDG_InitState NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_InitState_InitState_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Start
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Start)
#undef Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Start
extern void Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Start(IN Rte_ModeType_MDG_WakeupEvent NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Return
#endif

#if defined(Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Return)
#undef Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Return
extern void Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Return(IN Rte_ModeType_MDG_WakeupEvent NewMode);
#else
#define Rte_SwitchHook_BswM_modeSwitchPort_WakeupEvent_WakeupEvent_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Start
#endif

#if defined(Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Start)
#undef Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Start
extern void Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Csm_ResultType result);
#else
#define Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Start(result) ((void)(0))
#endif

#if defined(Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Return
#endif

#if defined(Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Return)
#undef Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Return
extern void Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN Csm_ResultType result);
#else
#define Rte_CallHook_Csm_SignatureVerify_RSASSA_PKCS1_v1_5_CallbackNotification_CallbackNotification_Return(result) ((void)(0))
#endif

#if defined(Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Start
#endif

#if defined(Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Start)
#undef Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Start
extern void Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Start(user) ((void)(0))
#endif

#if defined(Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Return
#endif

#if defined(Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Return)
#undef Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Return
extern void Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN EcuM_UserType user);
#else
#define Rte_CallHook_Fota_Fota_StateRequest_RequestReset_Return(user) ((void)(0))
#endif

#if defined(Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Start
#endif

#if defined(Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Start)
#undef Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Start
extern void Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Start(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN KeyM_ResultType Result,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 ResponseDataLength,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(KeyM_CryptoKeyDataType, RTE_DATA) ResponseData);
#else
#define Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Start(Result,	ResponseDataLength,	ResponseData) ((void)(0))
#endif

#if defined(Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Return
#endif

#if defined(Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Return)
#undef Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Return
extern void Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Return(/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN KeyM_ResultType Result,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN uint16 ResponseDataLength,
	/* polyspace<MISRA2012:D4.5:Not a defect:Justify with annotations> User defines parameter name */
	IN VAR(KeyM_CryptoKeyDataType, RTE_DATA) ResponseData);
#else
#define Rte_CallHook_KeyM_KeyMCryptoKeyNotification_CryptoKeyUpdateCallbackNotification_Return(Result,	ResponseDataLength,	ResponseData) ((void)(0))
#endif

#if defined(Rte_SwitchHook_ComM_UM000_P_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_ComM_UM000_P_currentMode_Start
#endif

#if defined(Rte_SwitchHook_ComM_UM000_P_currentMode_Start)
#undef Rte_SwitchHook_ComM_UM000_P_currentMode_Start
extern void Rte_SwitchHook_ComM_UM000_P_currentMode_Start(IN Rte_ModeType_ComMMode NewMode);
#else
#define Rte_SwitchHook_ComM_UM000_P_currentMode_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_ComM_UM000_P_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_ComM_UM000_P_currentMode_Return
#endif

#if defined(Rte_SwitchHook_ComM_UM000_P_currentMode_Return)
#undef Rte_SwitchHook_ComM_UM000_P_currentMode_Return
extern void Rte_SwitchHook_ComM_UM000_P_currentMode_Return(IN Rte_ModeType_ComMMode NewMode);
#else
#define Rte_SwitchHook_ComM_UM000_P_currentMode_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_ComM_UM001_P_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_ComM_UM001_P_currentMode_Start
#endif

#if defined(Rte_SwitchHook_ComM_UM001_P_currentMode_Start)
#undef Rte_SwitchHook_ComM_UM001_P_currentMode_Start
extern void Rte_SwitchHook_ComM_UM001_P_currentMode_Start(IN Rte_ModeType_ComMMode NewMode);
#else
#define Rte_SwitchHook_ComM_UM001_P_currentMode_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_ComM_UM001_P_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_ComM_UM001_P_currentMode_Return
#endif

#if defined(Rte_SwitchHook_ComM_UM001_P_currentMode_Return)
#undef Rte_SwitchHook_ComM_UM001_P_currentMode_Return
extern void Rte_SwitchHook_ComM_UM001_P_currentMode_Return(IN Rte_ModeType_ComMMode NewMode);
#else
#define Rte_SwitchHook_ComM_UM001_P_currentMode_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_ComM_UM002_P_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_ComM_UM002_P_currentMode_Start
#endif

#if defined(Rte_SwitchHook_ComM_UM002_P_currentMode_Start)
#undef Rte_SwitchHook_ComM_UM002_P_currentMode_Start
extern void Rte_SwitchHook_ComM_UM002_P_currentMode_Start(IN Rte_ModeType_ComMMode NewMode);
#else
#define Rte_SwitchHook_ComM_UM002_P_currentMode_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_ComM_UM002_P_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_ComM_UM002_P_currentMode_Return
#endif

#if defined(Rte_SwitchHook_ComM_UM002_P_currentMode_Return)
#undef Rte_SwitchHook_ComM_UM002_P_currentMode_Return
extern void Rte_SwitchHook_ComM_UM002_P_currentMode_Return(IN Rte_ModeType_ComMMode NewMode);
#else
#define Rte_SwitchHook_ComM_UM002_P_currentMode_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_WriteHook_ComM_CR000_P_fullComRequestors_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_WriteHook_ComM_CR000_P_fullComRequestors_Start
#endif

#if defined(Rte_WriteHook_ComM_CR000_P_fullComRequestors_Start)
#undef Rte_WriteHook_ComM_CR000_P_fullComRequestors_Start
extern void Rte_WriteHook_ComM_CR000_P_fullComRequestors_Start(IN P2VAR(ComM_UserHandleArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_WriteHook_ComM_CR000_P_fullComRequestors_Start(Data) ((void)(0))
#endif

#if defined(Rte_WriteHook_ComM_CR000_P_fullComRequestors_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_WriteHook_ComM_CR000_P_fullComRequestors_Return
#endif

#if defined(Rte_WriteHook_ComM_CR000_P_fullComRequestors_Return)
#undef Rte_WriteHook_ComM_CR000_P_fullComRequestors_Return
extern void Rte_WriteHook_ComM_CR000_P_fullComRequestors_Return(IN P2VAR(ComM_UserHandleArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
#define Rte_WriteHook_ComM_CR000_P_fullComRequestors_Return(Data) ((void)(0))
#endif

#if defined(Rte_ModeHook_WdgM_globalMode_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_WdgM_globalMode_currentMode_Start
#endif

#if defined(Rte_ModeHook_WdgM_globalMode_currentMode_Start)
#undef Rte_ModeHook_WdgM_globalMode_currentMode_Start
extern void Rte_ModeHook_WdgM_globalMode_currentMode_Start();
#else
#define Rte_ModeHook_WdgM_globalMode_currentMode_Start() ((void)(0))
#endif

#if defined(Rte_ModeHook_WdgM_globalMode_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_WdgM_globalMode_currentMode_Return
#endif

#if defined(Rte_ModeHook_WdgM_globalMode_currentMode_Return)
#undef Rte_ModeHook_WdgM_globalMode_currentMode_Return
extern void Rte_ModeHook_WdgM_globalMode_currentMode_Return();
#else
#define Rte_ModeHook_WdgM_globalMode_currentMode_Return() ((void)(0))
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Start
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Start)
#undef Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Start
extern void Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Start();
#else
#define Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Start() ((void)(0))
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Return
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Return)
#undef Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Return
extern void Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Return();
#else
#define Rte_ModeHook_WdgM_mode_SE_Init_currentMode_Return() ((void)(0))
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Start
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Start)
#undef Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Start
extern void Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Start();
#else
#define Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Start() ((void)(0))
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Return
#endif

#if defined(Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Return)
#undef Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Return
extern void Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Return();
#else
#define Rte_ModeHook_WdgM_mode_SE_WdgMTest_currentMode_Return() ((void)(0))
#endif

#if defined(Rte_SwitchHook_WdgM_globalMode_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_WdgM_globalMode_currentMode_Start
#endif

#if defined(Rte_SwitchHook_WdgM_globalMode_currentMode_Start)
#undef Rte_SwitchHook_WdgM_globalMode_currentMode_Start
extern void Rte_SwitchHook_WdgM_globalMode_currentMode_Start(IN Rte_ModeType_WdgM_Mode NewMode);
#else
#define Rte_SwitchHook_WdgM_globalMode_currentMode_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_WdgM_globalMode_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_WdgM_globalMode_currentMode_Return
#endif

#if defined(Rte_SwitchHook_WdgM_globalMode_currentMode_Return)
#undef Rte_SwitchHook_WdgM_globalMode_currentMode_Return
extern void Rte_SwitchHook_WdgM_globalMode_currentMode_Return(IN Rte_ModeType_WdgM_Mode NewMode);
#else
#define Rte_SwitchHook_WdgM_globalMode_currentMode_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Start
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Start)
#undef Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Start
extern void Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Start(IN Rte_ModeType_WdgM_Mode NewMode);
#else
#define Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Return
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Return)
#undef Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Return
extern void Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Return(IN Rte_ModeType_WdgM_Mode NewMode);
#else
#define Rte_SwitchHook_WdgM_mode_SE_Init_currentMode_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Start
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Start)
#undef Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Start
extern void Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Start(IN Rte_ModeType_WdgM_Mode NewMode);
#else
#define Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Start(NewMode) ((void)(0))
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Return
#endif

#if defined(Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Return)
#undef Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Return
extern void Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Return(IN Rte_ModeType_WdgM_Mode NewMode);
#else
#define Rte_SwitchHook_WdgM_mode_SE_WdgMTest_currentMode_Return(NewMode) ((void)(0))
#endif

#if defined(Rte_Task_Activate) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Task_Activate
#endif

#if defined(Rte_Task_Activate)
#undef Rte_Task_Activate
extern void Rte_Task_Activate(TaskType task);
#else
#define Rte_Task_Activate(task) ((void)(0))
#endif

#if defined(Rte_Task_Dispatch) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Task_Dispatch
#endif

#if defined(Rte_Task_Dispatch)
#undef Rte_Task_Dispatch
extern void Rte_Task_Dispatch(TaskType task);
#else
#define Rte_Task_Dispatch(task) ((void)(0))
#endif

#if defined(Rte_Task_SetEvent) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Task_SetEvent
#endif

#if defined(Rte_Task_SetEvent)
#undef Rte_Task_SetEvent
extern void Rte_Task_SetEvent(TaskType task, EventMaskType ev);
#else
#define Rte_Task_SetEvent(task, ev) ((void)(0))
#endif

#if defined(Rte_Task_WaitEvent) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Task_WaitEvent
#endif

#if defined(Rte_Task_WaitEvent)
#undef Rte_Task_WaitEvent
extern void Rte_Task_WaitEvent(TaskType task, EventMaskType ev);
#else
#define Rte_Task_WaitEvent(task, ev) ((void)(0))
#endif

#if defined(Rte_Task_WaitEventRet) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Task_WaitEventRet
#endif

#if defined(Rte_Task_WaitEventRet)
#undef Rte_Task_WaitEventRet
extern void Rte_Task_WaitEventRet(TaskType task, EventMaskType ev);
#else
#define Rte_Task_WaitEventRet(task, ev) ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMBORState_BCAN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_CanSMState_BCAN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_ComMMode_BCAN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmApplicationUpdated_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmCommunicationControl_0_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmControlDTCSetting_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmDiagnosticSessionControl_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_DcmModeRapidPowerShutDown_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_EcuMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_InitState_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Start)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Start
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Start(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Return)
#undef Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Return
extern void Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Return(void);
#else
#define Rte_Runnable_BswM_BswM_ActionList_RteSwitch_WakeupEvent_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Start
#endif

#if defined(Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Start)
#undef Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Start
extern void Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Start(void);
#else
#define Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Return
#endif

#if defined(Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Return)
#undef Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Return
extern void Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Return(void);
#else
#define Rte_Runnable_BswM_BswM_Immediate_SwcModeRequest_ComMMode_BCAN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_CanTp_ChangeParameter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_CanTp_ChangeParameter_Start
#endif

#if defined(Rte_Runnable_CanTp_ChangeParameter_Start)
#undef Rte_Runnable_CanTp_ChangeParameter_Start
extern void Rte_Runnable_CanTp_ChangeParameter_Start(void);
#else
#define Rte_Runnable_CanTp_ChangeParameter_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_CanTp_ChangeParameter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_CanTp_ChangeParameter_Return
#endif

#if defined(Rte_Runnable_CanTp_ChangeParameter_Return)
#undef Rte_Runnable_CanTp_ChangeParameter_Return
extern void Rte_Runnable_CanTp_ChangeParameter_Return(void);
#else
#define Rte_Runnable_CanTp_ChangeParameter_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_CanTp_ReadParameter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_CanTp_ReadParameter_Start
#endif

#if defined(Rte_Runnable_CanTp_ReadParameter_Start)
#undef Rte_Runnable_CanTp_ReadParameter_Start
extern void Rte_Runnable_CanTp_ReadParameter_Start(void);
#else
#define Rte_Runnable_CanTp_ReadParameter_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_CanTp_ReadParameter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_CanTp_ReadParameter_Return
#endif

#if defined(Rte_Runnable_CanTp_ReadParameter_Return)
#undef Rte_Runnable_CanTp_ReadParameter_Return
extern void Rte_Runnable_CanTp_ReadParameter_Return(void);
#else
#define Rte_Runnable_CanTp_ReadParameter_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_ComM_GetChannelBusLoad_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_ComM_GetChannelBusLoad_Start
#endif

#if defined(Rte_Runnable_ComM_ComM_GetChannelBusLoad_Start)
#undef Rte_Runnable_ComM_ComM_GetChannelBusLoad_Start
extern void Rte_Runnable_ComM_ComM_GetChannelBusLoad_Start(void);
#else
#define Rte_Runnable_ComM_ComM_GetChannelBusLoad_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_ComM_GetChannelBusLoad_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_ComM_GetChannelBusLoad_Return
#endif

#if defined(Rte_Runnable_ComM_ComM_GetChannelBusLoad_Return)
#undef Rte_Runnable_ComM_ComM_GetChannelBusLoad_Return
extern void Rte_Runnable_ComM_ComM_GetChannelBusLoad_Return(void);
#else
#define Rte_Runnable_ComM_ComM_GetChannelBusLoad_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetCurrentComMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetCurrentComMode_Start
#endif

#if defined(Rte_Runnable_ComM_GetCurrentComMode_Start)
#undef Rte_Runnable_ComM_GetCurrentComMode_Start
extern void Rte_Runnable_ComM_GetCurrentComMode_Start(void);
#else
#define Rte_Runnable_ComM_GetCurrentComMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetCurrentComMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetCurrentComMode_Return
#endif

#if defined(Rte_Runnable_ComM_GetCurrentComMode_Return)
#undef Rte_Runnable_ComM_GetCurrentComMode_Return
extern void Rte_Runnable_ComM_GetCurrentComMode_Return(void);
#else
#define Rte_Runnable_ComM_GetCurrentComMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetInhibitionStatus_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetInhibitionStatus_Start
#endif

#if defined(Rte_Runnable_ComM_GetInhibitionStatus_Start)
#undef Rte_Runnable_ComM_GetInhibitionStatus_Start
extern void Rte_Runnable_ComM_GetInhibitionStatus_Start(void);
#else
#define Rte_Runnable_ComM_GetInhibitionStatus_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetInhibitionStatus_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetInhibitionStatus_Return
#endif

#if defined(Rte_Runnable_ComM_GetInhibitionStatus_Return)
#undef Rte_Runnable_ComM_GetInhibitionStatus_Return
extern void Rte_Runnable_ComM_GetInhibitionStatus_Return(void);
#else
#define Rte_Runnable_ComM_GetInhibitionStatus_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetRequestedComMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetRequestedComMode_Start
#endif

#if defined(Rte_Runnable_ComM_GetRequestedComMode_Start)
#undef Rte_Runnable_ComM_GetRequestedComMode_Start
extern void Rte_Runnable_ComM_GetRequestedComMode_Start(void);
#else
#define Rte_Runnable_ComM_GetRequestedComMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetRequestedComMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetRequestedComMode_Return
#endif

#if defined(Rte_Runnable_ComM_GetRequestedComMode_Return)
#undef Rte_Runnable_ComM_GetRequestedComMode_Return
extern void Rte_Runnable_ComM_GetRequestedComMode_Return(void);
#else
#define Rte_Runnable_ComM_GetRequestedComMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetState_Start
#endif

#if defined(Rte_Runnable_ComM_GetState_Start)
#undef Rte_Runnable_ComM_GetState_Start
extern void Rte_Runnable_ComM_GetState_Start(void);
#else
#define Rte_Runnable_ComM_GetState_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetState_Return
#endif

#if defined(Rte_Runnable_ComM_GetState_Return)
#undef Rte_Runnable_ComM_GetState_Return
extern void Rte_Runnable_ComM_GetState_Return(void);
#else
#define Rte_Runnable_ComM_GetState_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetStatus_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetStatus_Start
#endif

#if defined(Rte_Runnable_ComM_GetStatus_Start)
#undef Rte_Runnable_ComM_GetStatus_Start
extern void Rte_Runnable_ComM_GetStatus_Start(void);
#else
#define Rte_Runnable_ComM_GetStatus_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_GetStatus_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_GetStatus_Return
#endif

#if defined(Rte_Runnable_ComM_GetStatus_Return)
#undef Rte_Runnable_ComM_GetStatus_Return
extern void Rte_Runnable_ComM_GetStatus_Return(void);
#else
#define Rte_Runnable_ComM_GetStatus_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_LimitChannelToNoComMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_LimitChannelToNoComMode_Start
#endif

#if defined(Rte_Runnable_ComM_LimitChannelToNoComMode_Start)
#undef Rte_Runnable_ComM_LimitChannelToNoComMode_Start
extern void Rte_Runnable_ComM_LimitChannelToNoComMode_Start(void);
#else
#define Rte_Runnable_ComM_LimitChannelToNoComMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_LimitChannelToNoComMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_LimitChannelToNoComMode_Return
#endif

#if defined(Rte_Runnable_ComM_LimitChannelToNoComMode_Return)
#undef Rte_Runnable_ComM_LimitChannelToNoComMode_Return
extern void Rte_Runnable_ComM_LimitChannelToNoComMode_Return(void);
#else
#define Rte_Runnable_ComM_LimitChannelToNoComMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_LimitECUToNoComMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_LimitECUToNoComMode_Start
#endif

#if defined(Rte_Runnable_ComM_LimitECUToNoComMode_Start)
#undef Rte_Runnable_ComM_LimitECUToNoComMode_Start
extern void Rte_Runnable_ComM_LimitECUToNoComMode_Start(void);
#else
#define Rte_Runnable_ComM_LimitECUToNoComMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_LimitECUToNoComMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_LimitECUToNoComMode_Return
#endif

#if defined(Rte_Runnable_ComM_LimitECUToNoComMode_Return)
#undef Rte_Runnable_ComM_LimitECUToNoComMode_Return
extern void Rte_Runnable_ComM_LimitECUToNoComMode_Return(void);
#else
#define Rte_Runnable_ComM_LimitECUToNoComMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_PreventWakeup_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_PreventWakeup_Start
#endif

#if defined(Rte_Runnable_ComM_PreventWakeup_Start)
#undef Rte_Runnable_ComM_PreventWakeup_Start
extern void Rte_Runnable_ComM_PreventWakeup_Start(void);
#else
#define Rte_Runnable_ComM_PreventWakeup_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_PreventWakeup_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_PreventWakeup_Return
#endif

#if defined(Rte_Runnable_ComM_PreventWakeup_Return)
#undef Rte_Runnable_ComM_PreventWakeup_Return
extern void Rte_Runnable_ComM_PreventWakeup_Return(void);
#else
#define Rte_Runnable_ComM_PreventWakeup_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_ReadInhibitCounter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_ReadInhibitCounter_Start
#endif

#if defined(Rte_Runnable_ComM_ReadInhibitCounter_Start)
#undef Rte_Runnable_ComM_ReadInhibitCounter_Start
extern void Rte_Runnable_ComM_ReadInhibitCounter_Start(void);
#else
#define Rte_Runnable_ComM_ReadInhibitCounter_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_ReadInhibitCounter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_ReadInhibitCounter_Return
#endif

#if defined(Rte_Runnable_ComM_ReadInhibitCounter_Return)
#undef Rte_Runnable_ComM_ReadInhibitCounter_Return
extern void Rte_Runnable_ComM_ReadInhibitCounter_Return(void);
#else
#define Rte_Runnable_ComM_ReadInhibitCounter_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_RequestComMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_RequestComMode_Start
#endif

#if defined(Rte_Runnable_ComM_RequestComMode_Start)
#undef Rte_Runnable_ComM_RequestComMode_Start
extern void Rte_Runnable_ComM_RequestComMode_Start(void);
#else
#define Rte_Runnable_ComM_RequestComMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_RequestComMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_RequestComMode_Return
#endif

#if defined(Rte_Runnable_ComM_RequestComMode_Return)
#undef Rte_Runnable_ComM_RequestComMode_Return
extern void Rte_Runnable_ComM_RequestComMode_Return(void);
#else
#define Rte_Runnable_ComM_RequestComMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_ResetInhibitCounter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_ResetInhibitCounter_Start
#endif

#if defined(Rte_Runnable_ComM_ResetInhibitCounter_Start)
#undef Rte_Runnable_ComM_ResetInhibitCounter_Start
extern void Rte_Runnable_ComM_ResetInhibitCounter_Start(void);
#else
#define Rte_Runnable_ComM_ResetInhibitCounter_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_ResetInhibitCounter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_ResetInhibitCounter_Return
#endif

#if defined(Rte_Runnable_ComM_ResetInhibitCounter_Return)
#undef Rte_Runnable_ComM_ResetInhibitCounter_Return
extern void Rte_Runnable_ComM_ResetInhibitCounter_Return(void);
#else
#define Rte_Runnable_ComM_ResetInhibitCounter_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_SetECUGroupClassification_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_SetECUGroupClassification_Start
#endif

#if defined(Rte_Runnable_ComM_SetECUGroupClassification_Start)
#undef Rte_Runnable_ComM_SetECUGroupClassification_Start
extern void Rte_Runnable_ComM_SetECUGroupClassification_Start(void);
#else
#define Rte_Runnable_ComM_SetECUGroupClassification_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_ComM_SetECUGroupClassification_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_ComM_SetECUGroupClassification_Return
#endif

#if defined(Rte_Runnable_ComM_SetECUGroupClassification_Return)
#undef Rte_Runnable_ComM_SetECUGroupClassification_Return
extern void Rte_Runnable_ComM_SetECUGroupClassification_Return(void);
#else
#define Rte_Runnable_ComM_SetECUGroupClassification_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_CancelJob_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_CancelJob_Start
#endif

#if defined(Rte_Runnable_Csm_CancelJob_Start)
#undef Rte_Runnable_Csm_CancelJob_Start
extern void Rte_Runnable_Csm_CancelJob_Start(void);
#else
#define Rte_Runnable_Csm_CancelJob_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_CancelJob_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_CancelJob_Return
#endif

#if defined(Rte_Runnable_Csm_CancelJob_Return)
#undef Rte_Runnable_Csm_CancelJob_Return
extern void Rte_Runnable_Csm_CancelJob_Return(void);
#else
#define Rte_Runnable_Csm_CancelJob_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyCopy_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyCopy_Start
#endif

#if defined(Rte_Runnable_Csm_KeyCopy_Start)
#undef Rte_Runnable_Csm_KeyCopy_Start
extern void Rte_Runnable_Csm_KeyCopy_Start(void);
#else
#define Rte_Runnable_Csm_KeyCopy_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyCopy_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyCopy_Return
#endif

#if defined(Rte_Runnable_Csm_KeyCopy_Return)
#undef Rte_Runnable_Csm_KeyCopy_Return
extern void Rte_Runnable_Csm_KeyCopy_Return(void);
#else
#define Rte_Runnable_Csm_KeyCopy_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyDerive_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyDerive_Start
#endif

#if defined(Rte_Runnable_Csm_KeyDerive_Start)
#undef Rte_Runnable_Csm_KeyDerive_Start
extern void Rte_Runnable_Csm_KeyDerive_Start(void);
#else
#define Rte_Runnable_Csm_KeyDerive_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyDerive_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyDerive_Return
#endif

#if defined(Rte_Runnable_Csm_KeyDerive_Return)
#undef Rte_Runnable_Csm_KeyDerive_Return
extern void Rte_Runnable_Csm_KeyDerive_Return(void);
#else
#define Rte_Runnable_Csm_KeyDerive_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopy_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementCopy_Start
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopy_Start)
#undef Rte_Runnable_Csm_KeyElementCopy_Start
extern void Rte_Runnable_Csm_KeyElementCopy_Start(void);
#else
#define Rte_Runnable_Csm_KeyElementCopy_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopy_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementCopy_Return
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopy_Return)
#undef Rte_Runnable_Csm_KeyElementCopy_Return
extern void Rte_Runnable_Csm_KeyElementCopy_Return(void);
#else
#define Rte_Runnable_Csm_KeyElementCopy_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopyPartial_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementCopyPartial_Start
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopyPartial_Start)
#undef Rte_Runnable_Csm_KeyElementCopyPartial_Start
extern void Rte_Runnable_Csm_KeyElementCopyPartial_Start(void);
#else
#define Rte_Runnable_Csm_KeyElementCopyPartial_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopyPartial_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementCopyPartial_Return
#endif

#if defined(Rte_Runnable_Csm_KeyElementCopyPartial_Return)
#undef Rte_Runnable_Csm_KeyElementCopyPartial_Return
extern void Rte_Runnable_Csm_KeyElementCopyPartial_Return(void);
#else
#define Rte_Runnable_Csm_KeyElementCopyPartial_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementGet_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementGet_Start
#endif

#if defined(Rte_Runnable_Csm_KeyElementGet_Start)
#undef Rte_Runnable_Csm_KeyElementGet_Start
extern void Rte_Runnable_Csm_KeyElementGet_Start(void);
#else
#define Rte_Runnable_Csm_KeyElementGet_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementGet_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementGet_Return
#endif

#if defined(Rte_Runnable_Csm_KeyElementGet_Return)
#undef Rte_Runnable_Csm_KeyElementGet_Return
extern void Rte_Runnable_Csm_KeyElementGet_Return(void);
#else
#define Rte_Runnable_Csm_KeyElementGet_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementSet_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementSet_Start
#endif

#if defined(Rte_Runnable_Csm_KeyElementSet_Start)
#undef Rte_Runnable_Csm_KeyElementSet_Start
extern void Rte_Runnable_Csm_KeyElementSet_Start(void);
#else
#define Rte_Runnable_Csm_KeyElementSet_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyElementSet_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyElementSet_Return
#endif

#if defined(Rte_Runnable_Csm_KeyElementSet_Return)
#undef Rte_Runnable_Csm_KeyElementSet_Return
extern void Rte_Runnable_Csm_KeyElementSet_Return(void);
#else
#define Rte_Runnable_Csm_KeyElementSet_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcPubVal_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyExchangeCalcPubVal_Start
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcPubVal_Start)
#undef Rte_Runnable_Csm_KeyExchangeCalcPubVal_Start
extern void Rte_Runnable_Csm_KeyExchangeCalcPubVal_Start(void);
#else
#define Rte_Runnable_Csm_KeyExchangeCalcPubVal_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcPubVal_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyExchangeCalcPubVal_Return
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcPubVal_Return)
#undef Rte_Runnable_Csm_KeyExchangeCalcPubVal_Return
extern void Rte_Runnable_Csm_KeyExchangeCalcPubVal_Return(void);
#else
#define Rte_Runnable_Csm_KeyExchangeCalcPubVal_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcSecret_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyExchangeCalcSecret_Start
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcSecret_Start)
#undef Rte_Runnable_Csm_KeyExchangeCalcSecret_Start
extern void Rte_Runnable_Csm_KeyExchangeCalcSecret_Start(void);
#else
#define Rte_Runnable_Csm_KeyExchangeCalcSecret_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcSecret_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyExchangeCalcSecret_Return
#endif

#if defined(Rte_Runnable_Csm_KeyExchangeCalcSecret_Return)
#undef Rte_Runnable_Csm_KeyExchangeCalcSecret_Return
extern void Rte_Runnable_Csm_KeyExchangeCalcSecret_Return(void);
#else
#define Rte_Runnable_Csm_KeyExchangeCalcSecret_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyGenerate_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyGenerate_Start
#endif

#if defined(Rte_Runnable_Csm_KeyGenerate_Start)
#undef Rte_Runnable_Csm_KeyGenerate_Start
extern void Rte_Runnable_Csm_KeyGenerate_Start(void);
#else
#define Rte_Runnable_Csm_KeyGenerate_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeyGenerate_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeyGenerate_Return
#endif

#if defined(Rte_Runnable_Csm_KeyGenerate_Return)
#undef Rte_Runnable_Csm_KeyGenerate_Return
extern void Rte_Runnable_Csm_KeyGenerate_Return(void);
#else
#define Rte_Runnable_Csm_KeyGenerate_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeySetValid_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeySetValid_Start
#endif

#if defined(Rte_Runnable_Csm_KeySetValid_Start)
#undef Rte_Runnable_Csm_KeySetValid_Start
extern void Rte_Runnable_Csm_KeySetValid_Start(void);
#else
#define Rte_Runnable_Csm_KeySetValid_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_KeySetValid_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_KeySetValid_Return
#endif

#if defined(Rte_Runnable_Csm_KeySetValid_Return)
#undef Rte_Runnable_Csm_KeySetValid_Return
extern void Rte_Runnable_Csm_KeySetValid_Return(void);
#else
#define Rte_Runnable_Csm_KeySetValid_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_MainFunction_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_MainFunction_Start
#endif

#if defined(Rte_Runnable_Csm_MainFunction_Start)
#undef Rte_Runnable_Csm_MainFunction_Start
extern void Rte_Runnable_Csm_MainFunction_Start(void);
#else
#define Rte_Runnable_Csm_MainFunction_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_MainFunction_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_MainFunction_Return
#endif

#if defined(Rte_Runnable_Csm_MainFunction_Return)
#undef Rte_Runnable_Csm_MainFunction_Return
extern void Rte_Runnable_Csm_MainFunction_Return(void);
#else
#define Rte_Runnable_Csm_MainFunction_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_RandomGenerate_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_RandomGenerate_Start
#endif

#if defined(Rte_Runnable_Csm_RandomGenerate_Start)
#undef Rte_Runnable_Csm_RandomGenerate_Start
extern void Rte_Runnable_Csm_RandomGenerate_Start(void);
#else
#define Rte_Runnable_Csm_RandomGenerate_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_RandomGenerate_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_RandomGenerate_Return
#endif

#if defined(Rte_Runnable_Csm_RandomGenerate_Return)
#undef Rte_Runnable_Csm_RandomGenerate_Return
extern void Rte_Runnable_Csm_RandomGenerate_Return(void);
#else
#define Rte_Runnable_Csm_RandomGenerate_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_RandomSeed_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_RandomSeed_Start
#endif

#if defined(Rte_Runnable_Csm_RandomSeed_Start)
#undef Rte_Runnable_Csm_RandomSeed_Start
extern void Rte_Runnable_Csm_RandomSeed_Start(void);
#else
#define Rte_Runnable_Csm_RandomSeed_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_RandomSeed_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_RandomSeed_Return
#endif

#if defined(Rte_Runnable_Csm_RandomSeed_Return)
#undef Rte_Runnable_Csm_RandomSeed_Return
extern void Rte_Runnable_Csm_RandomSeed_Return(void);
#else
#define Rte_Runnable_Csm_RandomSeed_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_SignatureVerify_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_SignatureVerify_Start
#endif

#if defined(Rte_Runnable_Csm_SignatureVerify_Start)
#undef Rte_Runnable_Csm_SignatureVerify_Start
extern void Rte_Runnable_Csm_SignatureVerify_Start(void);
#else
#define Rte_Runnable_Csm_SignatureVerify_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Csm_SignatureVerify_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Csm_SignatureVerify_Return
#endif

#if defined(Rte_Runnable_Csm_SignatureVerify_Return)
#undef Rte_Runnable_Csm_SignatureVerify_Return
extern void Rte_Runnable_Csm_SignatureVerify_Return(void);
#else
#define Rte_Runnable_Csm_SignatureVerify_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetActiveProtocol_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetActiveProtocol_Start
#endif

#if defined(Rte_Runnable_Dcm_GetActiveProtocol_Start)
#undef Rte_Runnable_Dcm_GetActiveProtocol_Start
extern void Rte_Runnable_Dcm_GetActiveProtocol_Start(void);
#else
#define Rte_Runnable_Dcm_GetActiveProtocol_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetActiveProtocol_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetActiveProtocol_Return
#endif

#if defined(Rte_Runnable_Dcm_GetActiveProtocol_Return)
#undef Rte_Runnable_Dcm_GetActiveProtocol_Return
extern void Rte_Runnable_Dcm_GetActiveProtocol_Return(void);
#else
#define Rte_Runnable_Dcm_GetActiveProtocol_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetCertHolderReference_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetCertHolderReference_Start
#endif

#if defined(Rte_Runnable_Dcm_GetCertHolderReference_Start)
#undef Rte_Runnable_Dcm_GetCertHolderReference_Start
extern void Rte_Runnable_Dcm_GetCertHolderReference_Start(void);
#else
#define Rte_Runnable_Dcm_GetCertHolderReference_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetCertHolderReference_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetCertHolderReference_Return
#endif

#if defined(Rte_Runnable_Dcm_GetCertHolderReference_Return)
#undef Rte_Runnable_Dcm_GetCertHolderReference_Return
extern void Rte_Runnable_Dcm_GetCertHolderReference_Return(void);
#else
#define Rte_Runnable_Dcm_GetCertHolderReference_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetCertificationInfo_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetCertificationInfo_Start
#endif

#if defined(Rte_Runnable_Dcm_GetCertificationInfo_Start)
#undef Rte_Runnable_Dcm_GetCertificationInfo_Start
extern void Rte_Runnable_Dcm_GetCertificationInfo_Start(void);
#else
#define Rte_Runnable_Dcm_GetCertificationInfo_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetCertificationInfo_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetCertificationInfo_Return
#endif

#if defined(Rte_Runnable_Dcm_GetCertificationInfo_Return)
#undef Rte_Runnable_Dcm_GetCertificationInfo_Return
extern void Rte_Runnable_Dcm_GetCertificationInfo_Return(void);
#else
#define Rte_Runnable_Dcm_GetCertificationInfo_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetSecurityLevel_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetSecurityLevel_Start
#endif

#if defined(Rte_Runnable_Dcm_GetSecurityLevel_Start)
#undef Rte_Runnable_Dcm_GetSecurityLevel_Start
extern void Rte_Runnable_Dcm_GetSecurityLevel_Start(void);
#else
#define Rte_Runnable_Dcm_GetSecurityLevel_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetSecurityLevel_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetSecurityLevel_Return
#endif

#if defined(Rte_Runnable_Dcm_GetSecurityLevel_Return)
#undef Rte_Runnable_Dcm_GetSecurityLevel_Return
extern void Rte_Runnable_Dcm_GetSecurityLevel_Return(void);
#else
#define Rte_Runnable_Dcm_GetSecurityLevel_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetSesCtrlType_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetSesCtrlType_Start
#endif

#if defined(Rte_Runnable_Dcm_GetSesCtrlType_Start)
#undef Rte_Runnable_Dcm_GetSesCtrlType_Start
extern void Rte_Runnable_Dcm_GetSesCtrlType_Start(void);
#else
#define Rte_Runnable_Dcm_GetSesCtrlType_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_GetSesCtrlType_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_GetSesCtrlType_Return
#endif

#if defined(Rte_Runnable_Dcm_GetSesCtrlType_Return)
#undef Rte_Runnable_Dcm_GetSesCtrlType_Return
extern void Rte_Runnable_Dcm_GetSesCtrlType_Return(void);
#else
#define Rte_Runnable_Dcm_GetSesCtrlType_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_MainFunction_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_MainFunction_Start
#endif

#if defined(Rte_Runnable_Dcm_MainFunction_Start)
#undef Rte_Runnable_Dcm_MainFunction_Start
extern void Rte_Runnable_Dcm_MainFunction_Start(void);
#else
#define Rte_Runnable_Dcm_MainFunction_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_MainFunction_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_MainFunction_Return
#endif

#if defined(Rte_Runnable_Dcm_MainFunction_Return)
#undef Rte_Runnable_Dcm_MainFunction_Return
extern void Rte_Runnable_Dcm_MainFunction_Return(void);
#else
#define Rte_Runnable_Dcm_MainFunction_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_ResetToDefaultSession_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_ResetToDefaultSession_Start
#endif

#if defined(Rte_Runnable_Dcm_ResetToDefaultSession_Start)
#undef Rte_Runnable_Dcm_ResetToDefaultSession_Start
extern void Rte_Runnable_Dcm_ResetToDefaultSession_Start(void);
#else
#define Rte_Runnable_Dcm_ResetToDefaultSession_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Dcm_ResetToDefaultSession_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Dcm_ResetToDefaultSession_Return
#endif

#if defined(Rte_Runnable_Dcm_ResetToDefaultSession_Return)
#undef Rte_Runnable_Dcm_ResetToDefaultSession_Return
extern void Rte_Runnable_Dcm_ResetToDefaultSession_Return(void);
#else
#define Rte_Runnable_Dcm_ResetToDefaultSession_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Det_ReportError_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Det_ReportError_Start
#endif

#if defined(Rte_Runnable_Det_ReportError_Start)
#undef Rte_Runnable_Det_ReportError_Start
extern void Rte_Runnable_Det_ReportError_Start(void);
#else
#define Rte_Runnable_Det_ReportError_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Det_ReportError_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Det_ReportError_Return
#endif

#if defined(Rte_Runnable_Det_ReportError_Return)
#undef Rte_Runnable_Det_ReportError_Return
extern void Rte_Runnable_Det_ReportError_Return(void);
#else
#define Rte_Runnable_Det_ReportError_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_ClearWakeupEvent_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_ClearWakeupEvent_Start
#endif

#if defined(Rte_Runnable_EcuM_ClearWakeupEvent_Start)
#undef Rte_Runnable_EcuM_ClearWakeupEvent_Start
extern void Rte_Runnable_EcuM_ClearWakeupEvent_Start(void);
#else
#define Rte_Runnable_EcuM_ClearWakeupEvent_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_ClearWakeupEvent_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_ClearWakeupEvent_Return
#endif

#if defined(Rte_Runnable_EcuM_ClearWakeupEvent_Return)
#undef Rte_Runnable_EcuM_ClearWakeupEvent_Return
extern void Rte_Runnable_EcuM_ClearWakeupEvent_Return(void);
#else
#define Rte_Runnable_EcuM_ClearWakeupEvent_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_DisableWakeupSources_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_DisableWakeupSources_Start
#endif

#if defined(Rte_Runnable_EcuM_DisableWakeupSources_Start)
#undef Rte_Runnable_EcuM_DisableWakeupSources_Start
extern void Rte_Runnable_EcuM_DisableWakeupSources_Start(void);
#else
#define Rte_Runnable_EcuM_DisableWakeupSources_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_DisableWakeupSources_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_DisableWakeupSources_Return
#endif

#if defined(Rte_Runnable_EcuM_DisableWakeupSources_Return)
#undef Rte_Runnable_EcuM_DisableWakeupSources_Return
extern void Rte_Runnable_EcuM_DisableWakeupSources_Return(void);
#else
#define Rte_Runnable_EcuM_DisableWakeupSources_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_EnableWakeupSources_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_EnableWakeupSources_Start
#endif

#if defined(Rte_Runnable_EcuM_EnableWakeupSources_Start)
#undef Rte_Runnable_EcuM_EnableWakeupSources_Start
extern void Rte_Runnable_EcuM_EnableWakeupSources_Start(void);
#else
#define Rte_Runnable_EcuM_EnableWakeupSources_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_EnableWakeupSources_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_EnableWakeupSources_Return
#endif

#if defined(Rte_Runnable_EcuM_EnableWakeupSources_Return)
#undef Rte_Runnable_EcuM_EnableWakeupSources_Return
extern void Rte_Runnable_EcuM_EnableWakeupSources_Return(void);
#else
#define Rte_Runnable_EcuM_EnableWakeupSources_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetBootTarget_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetBootTarget_Start
#endif

#if defined(Rte_Runnable_EcuM_GetBootTarget_Start)
#undef Rte_Runnable_EcuM_GetBootTarget_Start
extern void Rte_Runnable_EcuM_GetBootTarget_Start(void);
#else
#define Rte_Runnable_EcuM_GetBootTarget_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetBootTarget_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetBootTarget_Return
#endif

#if defined(Rte_Runnable_EcuM_GetBootTarget_Return)
#undef Rte_Runnable_EcuM_GetBootTarget_Return
extern void Rte_Runnable_EcuM_GetBootTarget_Return(void);
#else
#define Rte_Runnable_EcuM_GetBootTarget_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetLastShutdownTarget_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetLastShutdownTarget_Start
#endif

#if defined(Rte_Runnable_EcuM_GetLastShutdownTarget_Start)
#undef Rte_Runnable_EcuM_GetLastShutdownTarget_Start
extern void Rte_Runnable_EcuM_GetLastShutdownTarget_Start(void);
#else
#define Rte_Runnable_EcuM_GetLastShutdownTarget_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetLastShutdownTarget_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetLastShutdownTarget_Return
#endif

#if defined(Rte_Runnable_EcuM_GetLastShutdownTarget_Return)
#undef Rte_Runnable_EcuM_GetLastShutdownTarget_Return
extern void Rte_Runnable_EcuM_GetLastShutdownTarget_Return(void);
#else
#define Rte_Runnable_EcuM_GetLastShutdownTarget_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetMostRecentShutdown_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetMostRecentShutdown_Start
#endif

#if defined(Rte_Runnable_EcuM_GetMostRecentShutdown_Start)
#undef Rte_Runnable_EcuM_GetMostRecentShutdown_Start
extern void Rte_Runnable_EcuM_GetMostRecentShutdown_Start(void);
#else
#define Rte_Runnable_EcuM_GetMostRecentShutdown_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetMostRecentShutdown_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetMostRecentShutdown_Return
#endif

#if defined(Rte_Runnable_EcuM_GetMostRecentShutdown_Return)
#undef Rte_Runnable_EcuM_GetMostRecentShutdown_Return
extern void Rte_Runnable_EcuM_GetMostRecentShutdown_Return(void);
#else
#define Rte_Runnable_EcuM_GetMostRecentShutdown_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetNextRecentShutdown_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetNextRecentShutdown_Start
#endif

#if defined(Rte_Runnable_EcuM_GetNextRecentShutdown_Start)
#undef Rte_Runnable_EcuM_GetNextRecentShutdown_Start
extern void Rte_Runnable_EcuM_GetNextRecentShutdown_Start(void);
#else
#define Rte_Runnable_EcuM_GetNextRecentShutdown_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetNextRecentShutdown_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetNextRecentShutdown_Return
#endif

#if defined(Rte_Runnable_EcuM_GetNextRecentShutdown_Return)
#undef Rte_Runnable_EcuM_GetNextRecentShutdown_Return
extern void Rte_Runnable_EcuM_GetNextRecentShutdown_Return(void);
#else
#define Rte_Runnable_EcuM_GetNextRecentShutdown_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownCause_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetShutdownCause_Start
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownCause_Start)
#undef Rte_Runnable_EcuM_GetShutdownCause_Start
extern void Rte_Runnable_EcuM_GetShutdownCause_Start(void);
#else
#define Rte_Runnable_EcuM_GetShutdownCause_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownCause_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetShutdownCause_Return
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownCause_Return)
#undef Rte_Runnable_EcuM_GetShutdownCause_Return
extern void Rte_Runnable_EcuM_GetShutdownCause_Return(void);
#else
#define Rte_Runnable_EcuM_GetShutdownCause_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownTarget_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetShutdownTarget_Start
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownTarget_Start)
#undef Rte_Runnable_EcuM_GetShutdownTarget_Start
extern void Rte_Runnable_EcuM_GetShutdownTarget_Start(void);
#else
#define Rte_Runnable_EcuM_GetShutdownTarget_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownTarget_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GetShutdownTarget_Return
#endif

#if defined(Rte_Runnable_EcuM_GetShutdownTarget_Return)
#undef Rte_Runnable_EcuM_GetShutdownTarget_Return
extern void Rte_Runnable_EcuM_GetShutdownTarget_Return(void);
#else
#define Rte_Runnable_EcuM_GetShutdownTarget_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GoDown_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GoDown_Start
#endif

#if defined(Rte_Runnable_EcuM_GoDown_Start)
#undef Rte_Runnable_EcuM_GoDown_Start
extern void Rte_Runnable_EcuM_GoDown_Start(void);
#else
#define Rte_Runnable_EcuM_GoDown_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GoDown_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GoDown_Return
#endif

#if defined(Rte_Runnable_EcuM_GoDown_Return)
#undef Rte_Runnable_EcuM_GoDown_Return
extern void Rte_Runnable_EcuM_GoDown_Return(void);
#else
#define Rte_Runnable_EcuM_GoDown_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GoHalt_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GoHalt_Start
#endif

#if defined(Rte_Runnable_EcuM_GoHalt_Start)
#undef Rte_Runnable_EcuM_GoHalt_Start
extern void Rte_Runnable_EcuM_GoHalt_Start(void);
#else
#define Rte_Runnable_EcuM_GoHalt_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GoHalt_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GoHalt_Return
#endif

#if defined(Rte_Runnable_EcuM_GoHalt_Return)
#undef Rte_Runnable_EcuM_GoHalt_Return
extern void Rte_Runnable_EcuM_GoHalt_Return(void);
#else
#define Rte_Runnable_EcuM_GoHalt_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GoPoll_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GoPoll_Start
#endif

#if defined(Rte_Runnable_EcuM_GoPoll_Start)
#undef Rte_Runnable_EcuM_GoPoll_Start
extern void Rte_Runnable_EcuM_GoPoll_Start(void);
#else
#define Rte_Runnable_EcuM_GoPoll_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_GoPoll_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_GoPoll_Return
#endif

#if defined(Rte_Runnable_EcuM_GoPoll_Return)
#undef Rte_Runnable_EcuM_GoPoll_Return
extern void Rte_Runnable_EcuM_GoPoll_Return(void);
#else
#define Rte_Runnable_EcuM_GoPoll_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_ReleaseRUN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_ReleaseRUN_Start
#endif

#if defined(Rte_Runnable_EcuM_ReleaseRUN_Start)
#undef Rte_Runnable_EcuM_ReleaseRUN_Start
extern void Rte_Runnable_EcuM_ReleaseRUN_Start(void);
#else
#define Rte_Runnable_EcuM_ReleaseRUN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_ReleaseRUN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_ReleaseRUN_Return
#endif

#if defined(Rte_Runnable_EcuM_ReleaseRUN_Return)
#undef Rte_Runnable_EcuM_ReleaseRUN_Return
extern void Rte_Runnable_EcuM_ReleaseRUN_Return(void);
#else
#define Rte_Runnable_EcuM_ReleaseRUN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestOff_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestOff_Start
#endif

#if defined(Rte_Runnable_EcuM_RequestOff_Start)
#undef Rte_Runnable_EcuM_RequestOff_Start
extern void Rte_Runnable_EcuM_RequestOff_Start(void);
#else
#define Rte_Runnable_EcuM_RequestOff_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestOff_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestOff_Return
#endif

#if defined(Rte_Runnable_EcuM_RequestOff_Return)
#undef Rte_Runnable_EcuM_RequestOff_Return
extern void Rte_Runnable_EcuM_RequestOff_Return(void);
#else
#define Rte_Runnable_EcuM_RequestOff_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestRUN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestRUN_Start
#endif

#if defined(Rte_Runnable_EcuM_RequestRUN_Start)
#undef Rte_Runnable_EcuM_RequestRUN_Start
extern void Rte_Runnable_EcuM_RequestRUN_Start(void);
#else
#define Rte_Runnable_EcuM_RequestRUN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestRUN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestRUN_Return
#endif

#if defined(Rte_Runnable_EcuM_RequestRUN_Return)
#undef Rte_Runnable_EcuM_RequestRUN_Return
extern void Rte_Runnable_EcuM_RequestRUN_Return(void);
#else
#define Rte_Runnable_EcuM_RequestRUN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestReset_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestReset_Start
#endif

#if defined(Rte_Runnable_EcuM_RequestReset_Start)
#undef Rte_Runnable_EcuM_RequestReset_Start
extern void Rte_Runnable_EcuM_RequestReset_Start(void);
#else
#define Rte_Runnable_EcuM_RequestReset_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestReset_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestReset_Return
#endif

#if defined(Rte_Runnable_EcuM_RequestReset_Return)
#undef Rte_Runnable_EcuM_RequestReset_Return
extern void Rte_Runnable_EcuM_RequestReset_Return(void);
#else
#define Rte_Runnable_EcuM_RequestReset_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestSleep_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestSleep_Start
#endif

#if defined(Rte_Runnable_EcuM_RequestSleep_Start)
#undef Rte_Runnable_EcuM_RequestSleep_Start
extern void Rte_Runnable_EcuM_RequestSleep_Start(void);
#else
#define Rte_Runnable_EcuM_RequestSleep_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_RequestSleep_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_RequestSleep_Return
#endif

#if defined(Rte_Runnable_EcuM_RequestSleep_Return)
#undef Rte_Runnable_EcuM_RequestSleep_Return
extern void Rte_Runnable_EcuM_RequestSleep_Return(void);
#else
#define Rte_Runnable_EcuM_RequestSleep_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SelectBootTarget_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SelectBootTarget_Start
#endif

#if defined(Rte_Runnable_EcuM_SelectBootTarget_Start)
#undef Rte_Runnable_EcuM_SelectBootTarget_Start
extern void Rte_Runnable_EcuM_SelectBootTarget_Start(void);
#else
#define Rte_Runnable_EcuM_SelectBootTarget_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SelectBootTarget_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SelectBootTarget_Return
#endif

#if defined(Rte_Runnable_EcuM_SelectBootTarget_Return)
#undef Rte_Runnable_EcuM_SelectBootTarget_Return
extern void Rte_Runnable_EcuM_SelectBootTarget_Return(void);
#else
#define Rte_Runnable_EcuM_SelectBootTarget_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownCause_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SelectShutdownCause_Start
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownCause_Start)
#undef Rte_Runnable_EcuM_SelectShutdownCause_Start
extern void Rte_Runnable_EcuM_SelectShutdownCause_Start(void);
#else
#define Rte_Runnable_EcuM_SelectShutdownCause_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownCause_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SelectShutdownCause_Return
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownCause_Return)
#undef Rte_Runnable_EcuM_SelectShutdownCause_Return
extern void Rte_Runnable_EcuM_SelectShutdownCause_Return(void);
#else
#define Rte_Runnable_EcuM_SelectShutdownCause_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownTarget_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SelectShutdownTarget_Start
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownTarget_Start)
#undef Rte_Runnable_EcuM_SelectShutdownTarget_Start
extern void Rte_Runnable_EcuM_SelectShutdownTarget_Start(void);
#else
#define Rte_Runnable_EcuM_SelectShutdownTarget_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownTarget_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SelectShutdownTarget_Return
#endif

#if defined(Rte_Runnable_EcuM_SelectShutdownTarget_Return)
#undef Rte_Runnable_EcuM_SelectShutdownTarget_Return
extern void Rte_Runnable_EcuM_SelectShutdownTarget_Return(void);
#else
#define Rte_Runnable_EcuM_SelectShutdownTarget_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SetRunState_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SetRunState_Start
#endif

#if defined(Rte_Runnable_EcuM_SetRunState_Start)
#undef Rte_Runnable_EcuM_SetRunState_Start
extern void Rte_Runnable_EcuM_SetRunState_Start(void);
#else
#define Rte_Runnable_EcuM_SetRunState_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_EcuM_SetRunState_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_EcuM_SetRunState_Return
#endif

#if defined(Rte_Runnable_EcuM_SetRunState_Return)
#undef Rte_Runnable_EcuM_SetRunState_Return
extern void Rte_Runnable_EcuM_SetRunState_Return(void);
#else
#define Rte_Runnable_EcuM_SetRunState_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Start
#endif

#if defined(Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Start)
#undef Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Start
extern void Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Start(void);
#else
#define Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Return
#endif

#if defined(Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Return)
#undef Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Return
extern void Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Return(void);
#else
#define Rte_Runnable_Fota_Fota_ServiceRequest_SupplierNotification_Confirmation_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Start
#endif

#if defined(Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Start)
#undef Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Start
extern void Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Start(void);
#else
#define Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Return
#endif

#if defined(Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Return)
#undef Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Return
extern void Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Return(void);
#else
#define Rte_Runnable_Fota_Fota_SupplierNotification_ServiceRequest_Indication_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_KeyM_MainBackgroundFunction_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_KeyM_MainBackgroundFunction_Start
#endif

#if defined(Rte_Runnable_KeyM_MainBackgroundFunction_Start)
#undef Rte_Runnable_KeyM_MainBackgroundFunction_Start
extern void Rte_Runnable_KeyM_MainBackgroundFunction_Start(void);
#else
#define Rte_Runnable_KeyM_MainBackgroundFunction_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_KeyM_MainBackgroundFunction_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_KeyM_MainBackgroundFunction_Return
#endif

#if defined(Rte_Runnable_KeyM_MainBackgroundFunction_Return)
#undef Rte_Runnable_KeyM_MainBackgroundFunction_Return
extern void Rte_Runnable_KeyM_MainBackgroundFunction_Return(void);
#else
#define Rte_Runnable_KeyM_MainBackgroundFunction_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_KeyM_MainFunction_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_KeyM_MainFunction_Start
#endif

#if defined(Rte_Runnable_KeyM_MainFunction_Start)
#undef Rte_Runnable_KeyM_MainFunction_Start
extern void Rte_Runnable_KeyM_MainFunction_Start(void);
#else
#define Rte_Runnable_KeyM_MainFunction_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_KeyM_MainFunction_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_KeyM_MainFunction_Return
#endif

#if defined(Rte_Runnable_KeyM_MainFunction_Return)
#undef Rte_Runnable_KeyM_MainFunction_Return
extern void Rte_Runnable_KeyM_MainFunction_Return(void);
#else
#define Rte_Runnable_KeyM_MainFunction_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_KeyM_Update_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_KeyM_Update_Start
#endif

#if defined(Rte_Runnable_KeyM_Update_Start)
#undef Rte_Runnable_KeyM_Update_Start
extern void Rte_Runnable_KeyM_Update_Start(void);
#else
#define Rte_Runnable_KeyM_Update_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_KeyM_Update_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_KeyM_Update_Return
#endif

#if defined(Rte_Runnable_KeyM_Update_Return)
#undef Rte_Runnable_KeyM_Update_Return
extern void Rte_Runnable_KeyM_Update_Return(void);
#else
#define Rte_Runnable_KeyM_Update_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_Os_Os_MeasureCPULoad0_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Os_Os_MeasureCPULoad0_Start
#endif

#if defined(Rte_Runnable_Os_Os_MeasureCPULoad0_Start)
#undef Rte_Runnable_Os_Os_MeasureCPULoad0_Start
extern void Rte_Runnable_Os_Os_MeasureCPULoad0_Start(void);
#else
#define Rte_Runnable_Os_Os_MeasureCPULoad0_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_Os_Os_MeasureCPULoad0_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_Os_Os_MeasureCPULoad0_Return
#endif

#if defined(Rte_Runnable_Os_Os_MeasureCPULoad0_Return)
#undef Rte_Runnable_Os_Os_MeasureCPULoad0_Return
extern void Rte_Runnable_Os_Os_MeasureCPULoad0_Return(void);
#else
#define Rte_Runnable_Os_Os_MeasureCPULoad0_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Start
#endif

#if defined(Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Start)
#undef Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Start
extern void Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Start(void);
#else
#define Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Return
#endif

#if defined(Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Return)
#undef Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Return
extern void Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Return(void);
#else
#define Rte_Runnable_SWC_AppMode_CanSMBORStateSwitched_BCAN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Start
#endif

#if defined(Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Start)
#undef Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Start
extern void Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Start(void);
#else
#define Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Return
#endif

#if defined(Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Return)
#undef Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Return
extern void Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Return(void);
#else
#define Rte_Runnable_SWC_AppMode_ComMModeSwitched_BCAN_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_EcuModeSwitched_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_EcuModeSwitched_Start
#endif

#if defined(Rte_Runnable_SWC_AppMode_EcuModeSwitched_Start)
#undef Rte_Runnable_SWC_AppMode_EcuModeSwitched_Start
extern void Rte_Runnable_SWC_AppMode_EcuModeSwitched_Start(void);
#else
#define Rte_Runnable_SWC_AppMode_EcuModeSwitched_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_EcuModeSwitched_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_EcuModeSwitched_Return
#endif

#if defined(Rte_Runnable_SWC_AppMode_EcuModeSwitched_Return)
#undef Rte_Runnable_SWC_AppMode_EcuModeSwitched_Return
extern void Rte_Runnable_SWC_AppMode_EcuModeSwitched_Return(void);
#else
#define Rte_Runnable_SWC_AppMode_EcuModeSwitched_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_InitCompleted_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_InitCompleted_Start
#endif

#if defined(Rte_Runnable_SWC_AppMode_InitCompleted_Start)
#undef Rte_Runnable_SWC_AppMode_InitCompleted_Start
extern void Rte_Runnable_SWC_AppMode_InitCompleted_Start(void);
#else
#define Rte_Runnable_SWC_AppMode_InitCompleted_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_InitCompleted_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_InitCompleted_Return
#endif

#if defined(Rte_Runnable_SWC_AppMode_InitCompleted_Return)
#undef Rte_Runnable_SWC_AppMode_InitCompleted_Return
extern void Rte_Runnable_SWC_AppMode_InitCompleted_Return(void);
#else
#define Rte_Runnable_SWC_AppMode_InitCompleted_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_Test_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_Test_Start
#endif

#if defined(Rte_Runnable_SWC_AppMode_Test_Start)
#undef Rte_Runnable_SWC_AppMode_Test_Start
extern void Rte_Runnable_SWC_AppMode_Test_Start(void);
#else
#define Rte_Runnable_SWC_AppMode_Test_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_Test_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_Test_Return
#endif

#if defined(Rte_Runnable_SWC_AppMode_Test_Return)
#undef Rte_Runnable_SWC_AppMode_Test_Return
extern void Rte_Runnable_SWC_AppMode_Test_Return(void);
#else
#define Rte_Runnable_SWC_AppMode_Test_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_WakeupEventValidated_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_WakeupEventValidated_Start
#endif

#if defined(Rte_Runnable_SWC_AppMode_WakeupEventValidated_Start)
#undef Rte_Runnable_SWC_AppMode_WakeupEventValidated_Start
extern void Rte_Runnable_SWC_AppMode_WakeupEventValidated_Start(void);
#else
#define Rte_Runnable_SWC_AppMode_WakeupEventValidated_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_AppMode_WakeupEventValidated_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_AppMode_WakeupEventValidated_Return
#endif

#if defined(Rte_Runnable_SWC_AppMode_WakeupEventValidated_Return)
#undef Rte_Runnable_SWC_AppMode_WakeupEventValidated_Return
extern void Rte_Runnable_SWC_AppMode_WakeupEventValidated_Return(void);
#else
#define Rte_Runnable_SWC_AppMode_WakeupEventValidated_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Start)
#undef Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Start
extern void Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Return)
#undef Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Return
extern void Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_ApplicationUpdatedIndication_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Start)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Start
extern void Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Return)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Return
extern void Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StartProtocol_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Start)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Start
extern void Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Return)
#undef Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Return
extern void Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_CallbackDCMRequestServices_StopProtocol_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Start)
#undef Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Start
extern void Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Return)
#undef Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Return
extern void Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_DO_NOT_REMOVE_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Start)
#undef Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Start
extern void Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Return)
#undef Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Return
extern void Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_DiagnosticSessionControlNotification_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Start)
#undef Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Start
extern void Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Return)
#undef Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Return
extern void Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L10_CompareKey_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Start)
#undef Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Start
extern void Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Return)
#undef Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Return
extern void Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L10_GetSeed_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Start)
#undef Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Start
extern void Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Return)
#undef Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Return
extern void Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L9_CompareKey_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Start)
#undef Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Start
extern void Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Return)
#undef Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Return
extern void Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_L9_GetSeed_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Start)
#undef Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Start
extern void Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Return)
#undef Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Return
extern void Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_OEUK_AsyncVerifyFinished_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Start)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Start
extern void Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Return)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Return
extern void Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Confirmation_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Start
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Start)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Start
extern void Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Start(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Return
#endif

#if defined(Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Return)
#undef Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Return
extern void Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Return(void);
#else
#define Rte_Runnable_SWC_DiagnosticService_ServiceRequestSupplierNotification_Indication_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Start
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Start)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Start
extern void Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Start(void);
#else
#define Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Return
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Return)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Return
extern void Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Return(void);
#else
#define Rte_Runnable_SWC_WdgMTest_RE_WdgMTest_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Start
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Start)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Start
extern void Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Start(void);
#else
#define Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Return
#endif

#if defined(Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Return)
#undef Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Return
extern void Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Return(void);
#else
#define Rte_Runnable_SWC_WdgMTest_RE_WdgMTestGlobalMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_CheckpointReached_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_CheckpointReached_Start
#endif

#if defined(Rte_Runnable_WdgM_CheckpointReached_Start)
#undef Rte_Runnable_WdgM_CheckpointReached_Start
extern void Rte_Runnable_WdgM_CheckpointReached_Start(void);
#else
#define Rte_Runnable_WdgM_CheckpointReached_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_CheckpointReached_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_CheckpointReached_Return
#endif

#if defined(Rte_Runnable_WdgM_CheckpointReached_Return)
#undef Rte_Runnable_WdgM_CheckpointReached_Return
extern void Rte_Runnable_WdgM_CheckpointReached_Return(void);
#else
#define Rte_Runnable_WdgM_CheckpointReached_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetFirstExpiredSEID_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetFirstExpiredSEID_Start
#endif

#if defined(Rte_Runnable_WdgM_GetFirstExpiredSEID_Start)
#undef Rte_Runnable_WdgM_GetFirstExpiredSEID_Start
extern void Rte_Runnable_WdgM_GetFirstExpiredSEID_Start(void);
#else
#define Rte_Runnable_WdgM_GetFirstExpiredSEID_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetFirstExpiredSEID_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetFirstExpiredSEID_Return
#endif

#if defined(Rte_Runnable_WdgM_GetFirstExpiredSEID_Return)
#undef Rte_Runnable_WdgM_GetFirstExpiredSEID_Return
extern void Rte_Runnable_WdgM_GetFirstExpiredSEID_Return(void);
#else
#define Rte_Runnable_WdgM_GetFirstExpiredSEID_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetGlobalStatus_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetGlobalStatus_Start
#endif

#if defined(Rte_Runnable_WdgM_GetGlobalStatus_Start)
#undef Rte_Runnable_WdgM_GetGlobalStatus_Start
extern void Rte_Runnable_WdgM_GetGlobalStatus_Start(void);
#else
#define Rte_Runnable_WdgM_GetGlobalStatus_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetGlobalStatus_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetGlobalStatus_Return
#endif

#if defined(Rte_Runnable_WdgM_GetGlobalStatus_Return)
#undef Rte_Runnable_WdgM_GetGlobalStatus_Return
extern void Rte_Runnable_WdgM_GetGlobalStatus_Return(void);
#else
#define Rte_Runnable_WdgM_GetGlobalStatus_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetLocalStatus_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetLocalStatus_Start
#endif

#if defined(Rte_Runnable_WdgM_GetLocalStatus_Start)
#undef Rte_Runnable_WdgM_GetLocalStatus_Start
extern void Rte_Runnable_WdgM_GetLocalStatus_Start(void);
#else
#define Rte_Runnable_WdgM_GetLocalStatus_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetLocalStatus_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetLocalStatus_Return
#endif

#if defined(Rte_Runnable_WdgM_GetLocalStatus_Return)
#undef Rte_Runnable_WdgM_GetLocalStatus_Return
extern void Rte_Runnable_WdgM_GetLocalStatus_Return(void);
#else
#define Rte_Runnable_WdgM_GetLocalStatus_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetMode_Start
#endif

#if defined(Rte_Runnable_WdgM_GetMode_Start)
#undef Rte_Runnable_WdgM_GetMode_Start
extern void Rte_Runnable_WdgM_GetMode_Start(void);
#else
#define Rte_Runnable_WdgM_GetMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_GetMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_GetMode_Return
#endif

#if defined(Rte_Runnable_WdgM_GetMode_Return)
#undef Rte_Runnable_WdgM_GetMode_Return
extern void Rte_Runnable_WdgM_GetMode_Return(void);
#else
#define Rte_Runnable_WdgM_GetMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_MainFunction_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_MainFunction_Start
#endif

#if defined(Rte_Runnable_WdgM_MainFunction_Start)
#undef Rte_Runnable_WdgM_MainFunction_Start
extern void Rte_Runnable_WdgM_MainFunction_Start(void);
#else
#define Rte_Runnable_WdgM_MainFunction_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_MainFunction_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_MainFunction_Return
#endif

#if defined(Rte_Runnable_WdgM_MainFunction_Return)
#undef Rte_Runnable_WdgM_MainFunction_Return
extern void Rte_Runnable_WdgM_MainFunction_Return(void);
#else
#define Rte_Runnable_WdgM_MainFunction_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_PerformReset_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_PerformReset_Start
#endif

#if defined(Rte_Runnable_WdgM_PerformReset_Start)
#undef Rte_Runnable_WdgM_PerformReset_Start
extern void Rte_Runnable_WdgM_PerformReset_Start(void);
#else
#define Rte_Runnable_WdgM_PerformReset_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_PerformReset_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_PerformReset_Return
#endif

#if defined(Rte_Runnable_WdgM_PerformReset_Return)
#undef Rte_Runnable_WdgM_PerformReset_Return
extern void Rte_Runnable_WdgM_PerformReset_Return(void);
#else
#define Rte_Runnable_WdgM_PerformReset_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_SetMode_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_SetMode_Start
#endif

#if defined(Rte_Runnable_WdgM_SetMode_Start)
#undef Rte_Runnable_WdgM_SetMode_Start
extern void Rte_Runnable_WdgM_SetMode_Start(void);
#else
#define Rte_Runnable_WdgM_SetMode_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_SetMode_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_SetMode_Return
#endif

#if defined(Rte_Runnable_WdgM_SetMode_Return)
#undef Rte_Runnable_WdgM_SetMode_Return
extern void Rte_Runnable_WdgM_SetMode_Return(void);
#else
#define Rte_Runnable_WdgM_SetMode_Return() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_UpdateAliveCounter_Start) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_UpdateAliveCounter_Start
#endif

#if defined(Rte_Runnable_WdgM_UpdateAliveCounter_Start)
#undef Rte_Runnable_WdgM_UpdateAliveCounter_Start
extern void Rte_Runnable_WdgM_UpdateAliveCounter_Start(void);
#else
#define Rte_Runnable_WdgM_UpdateAliveCounter_Start() ((void)(0))
#endif

#if defined(Rte_Runnable_WdgM_UpdateAliveCounter_Return) && (RTE_VFB_TRACE == RTE_FALSE)
#undef Rte_Runnable_WdgM_UpdateAliveCounter_Return
#endif

#if defined(Rte_Runnable_WdgM_UpdateAliveCounter_Return)
#undef Rte_Runnable_WdgM_UpdateAliveCounter_Return
extern void Rte_Runnable_WdgM_UpdateAliveCounter_Return(void);
#else
#define Rte_Runnable_WdgM_UpdateAliveCounter_Return() ((void)(0))
#endif

#define RTE_STOP_SEC_CODE
#include "MemMap.h"

/* COMPATIBLE WITH C and C++ languages */

 #ifdef __cplusplus
 } /* extern \"C\" */
 #endif /* __cplusplus */

#endif

/*******************************************************************************
* PRE-JUSTIFICATION END SECTION (MISRA-C RULE CHECKER)
*******************************************************************************/
/*
  polyspace:end<MISRA-C:5.1:Not a defect:Justify with annotations> Number of character is depends on user configuration
  polyspace:end<MISRA-C:19.1:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Memory Mapping)
  polyspace:end<MISRA-C:19.4:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Rte SWS #1154, #6713)
  polyspace:end<MISRA-C:19.6:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Memory Mapping)
  polyspace:end<MISRA-C:19.7:Not a defect:Justify with annotations> No Impact of this rule violation (AUTOSAR Standard : Rte SWS #1236)
*/

/*******************************************************************************
**                          END OF FILE                                       **
*******************************************************************************/

