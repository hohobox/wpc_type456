/** \brief AUTOSAR Adc Driver
 **
 ** This file contains API definitions of the configuration of the AUTOSAR module ADC that is
 ** target independent.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef ADC_PBCFG_H_INCLUDED
#define ADC_PBCFG_H_INCLUDED

/*==================[inclusions]=============================================*/

/*==================[macros]=================================================*/

/** Number of configured ADC config settings               */
#define ADC_CONFIG_SET_COUNT         ( 1U )

/** Number of HW units for current config settings         */
#define ADC_CFG0_HWUNIT_COUNT        ( 1U )

/** Number of channel groups for current config settings   */
#define ADC_CFG0_GROUP_COUNT         ( 2U )

/** Number of logical channels for current config settings */
#define ADC_CFG0_CHANNEL_COUNT       ( 2U )

/** Number of configured groups            */
#define ADC_GROUP_MAX_COUNT          ( 2U )

/*------------------[Symbolic Names of ADC Config Settings]------------------*/
#define AdcConf_AdcConfigSet_AdcConfigSet_0 ( Adc_Config[0U] )

/*------------------[ADC MMIO Base Address]----------------------------------*/
/** Register base address of PASS_MMIO register
    The macro can be overridden by the integrator via command line parameter.
    Doing so is at own risk! */
#ifndef ADC_REGISTER_BASE_PASS_MMIO
#define ADC_REGISTER_BASE_PASS_MMIO ( 0x409F0000U )
#else
  /* Deviation from MISRA-C:2004 rule 19.16, MISRA-C:2012 Rule-20.13
     Justification: The preprocessing directive is a warning that indicates a special build configuration 
                    which is not suitable for production software. */
  /* PRQA S 3115 1 */
  #warning ADC_REGISTER_BASE_PASS_MMIO is overridden by the environment. This is not intended for production software!
#endif

/*------------------[ADC HW Unit Hardware Address]---------------------------*/
/** Register base address of ADC hardware unit ADC_SAR_2.
    The macro can be overridden by the integrator via command line parameter.
    Doing so is at own risk! */
#ifndef ADC_REGISTER_BASE_SAR_2
#define ADC_REGISTER_BASE_SAR_2 ( 0x40902000U )
#else
  /* Deviation from MISRA-C:2004 rule 19.16, MISRA-C:2012 Rule-20.13
     Justification: The preprocessing directive is a warning that indicates a special build configuration 
                    which is not suitable for production software. */
  /* PRQA S 3115 1 */
  #warning ADC_REGISTER_BASE_SAR_2 is overridden by the environment. This is not intended for production software!
#endif

/*------------------[Definition of ADC HW unit configuration]----------------*/
#define ADC_CFG0_HWUNIT_CONFIGS /* AdcConfigSet_0 */ \
{ \
  { /* ADC HW unit 'AdcHwUnit_2' */ \
    ADC_REGISTER_BASE_SAR_2, /* RegisterBase */ \
    0x43210U,                /* Setting value of SAR_TR_IN_SEL register */ \
    2U,                      /* HwUnit Id */ \
    ADC_DIAG_VREFL,          /* Diagnostic reference */ \
    1U,                      /* Precondition cycle */ \
    FALSE,                   /* Diagnostic enabled */ \
    0xE0U,                   /* Power control setting */ \
    TRUE                     /* SAR enabled */ \
  } \
}

/*------------------[ADC Channel Hardware Address]---------------------------*/
/** Register base address of ADC_SAR_2 Channel1 */
#define ADC_REGISTER_BASE_SAR_2_CH1    ( ADC_REGISTER_BASE_SAR_2 + 0x840U )
/** Register base address of ADC_SAR_2 Channel0 */
#define ADC_REGISTER_BASE_SAR_2_CH0    ( ADC_REGISTER_BASE_SAR_2 + 0x800U )

/*------------------[Definition of ADC channel configuration]----------------*/
#define ADC_CFG0_CHANNEL_CONFIGS /* AdcConfigSet_0 */ \
{ \
  /* ----- Group 0 begin ----- */ \
  { \
    ADC_REGISTER_BASE_SAR_2_CH0, /* RegisterBase for ESAR channel register */ \
    0x0U,                   /* POST_CTL register setting value */ \
    60U,                          /* Sampling cycle */ \
    0U,                          /* Range comparator upper thresholds */ \
    0U,                          /* Range comparator lower thresholds */ \
    0U,                          /* LogicalChannelId */ \
    129U                           /* PhysicalChannelId */ \
  }, \
  /* ----- Group 0 end   ----- */ \
  /* ----- Group 1 begin ----- */ \
  { \
    ADC_REGISTER_BASE_SAR_2_CH1, /* RegisterBase for ESAR channel register */ \
    0x0U,                   /* POST_CTL register setting value */ \
    60U,                          /* Sampling cycle */ \
    0U,                          /* Range comparator upper thresholds */ \
    0U,                          /* Range comparator lower thresholds */ \
    1U,                          /* LogicalChannelId */ \
    129U                           /* PhysicalChannelId */ \
  } \
  /* ----- Group 1 end   ----- */ \
}

/*------------------[Definition of ADC group configuration]------------------*/
#define ADC_CFG0_GROUP_CONFIGS /* AdcConfigSet_0 */ \
{ \
  { /* ADC Group 'AdcGroup_U2C1' */ \
    0x1U,                                  /* Initial value for interrupt mask */ \
    &Adc_AdcConfigSet_0_HwUnitConfigs[0U], /* HwUnitConfigPtr */ \
    NULL_PTR,                              /* DmaChannelConfigPtr */ \
    (Adc_VoidFctPtrType)NULL_PTR,          /* NotificationPtr - no notification configured */ \
    &Adc_NotificationEnableSettings[0U],   /* NotificationEnableSettingPtr */ \
    &Adc_StreamInfos[0U],                  /* StreamInfoPtr */ \
    &Adc_GroupStatusList[0U],              /* GroupStatusPtr */ \
    ADC_ACCESS_MODE_SINGLE,             /* GroupAccessMode */ \
    ADC_CONV_MODE_ONESHOT,              /* GroupConvMode */ \
    ADC_GROUP_REPL_SUSPEND_RESUME,         /* GroupReplacement */ \
    ADC_STREAM_BUFFER_CIRCULAR,            /* StreamBufferMode */ \
    ADC_TRIGG_SRC_SW,                      /* TriggerSource */ \
    ADC_HWTRIGG_SRC_OFF,                   /* HwTriggerSource */ \
    1U,                                    /* StreamNumSamples */ \
    0U,                                    /* FirstLogicalChannelConfigIndex */ \
    0U,                                    /* LastLogicalChannelConfigIndex */ \
    ADC_SAMPLE_NORMAL,                     /* SamplingMode */ \
    1U,                                    /* NumberOfChannels */ \
    7U,                                    /* GroupHwPriority */ \
    TRUE,                                  /* InterruptMode */ \
    FALSE,                                  /* UseDma */ \
    FALSE                                 /* UseAlternateCalibration */ \
  }, \
  { /* ADC Group 'AdcGroup_U2All' */ \
    0x1U,                                  /* Initial value for interrupt mask */ \
    &Adc_AdcConfigSet_0_HwUnitConfigs[0U], /* HwUnitConfigPtr */ \
    NULL_PTR,                              /* DmaChannelConfigPtr */ \
    (Adc_VoidFctPtrType)NULL_PTR,          /* NotificationPtr - no notification configured */ \
    &Adc_NotificationEnableSettings[1U],   /* NotificationEnableSettingPtr */ \
    &Adc_StreamInfos[1U],                  /* StreamInfoPtr */ \
    &Adc_GroupStatusList[1U],              /* GroupStatusPtr */ \
    ADC_ACCESS_MODE_SINGLE,             /* GroupAccessMode */ \
    ADC_CONV_MODE_ONESHOT,              /* GroupConvMode */ \
    ADC_GROUP_REPL_SUSPEND_RESUME,         /* GroupReplacement */ \
    ADC_STREAM_BUFFER_CIRCULAR,            /* StreamBufferMode */ \
    ADC_TRIGG_SRC_SW,                      /* TriggerSource */ \
    ADC_HWTRIGG_SRC_OFF,                   /* HwTriggerSource */ \
    1U,                                    /* StreamNumSamples */ \
    1U,                                    /* FirstLogicalChannelConfigIndex */ \
    1U,                                    /* LastLogicalChannelConfigIndex */ \
    ADC_SAMPLE_NORMAL,                     /* SamplingMode */ \
    1U,                                    /* NumberOfChannels */ \
    7U,                                    /* GroupHwPriority */ \
    TRUE,                                  /* InterruptMode */ \
    FALSE,                                  /* UseDma */ \
    FALSE                                 /* UseAlternateCalibration */ \
  } \
}

/*------------------[Definition of general ADC module configuration]---------*/
#define ADC_CFG_CONFIG \
{ \
  { /* AdcConfigSet_0 */ \
    &Adc_AdcConfigSet_0_ChannelConfigs[0U],   /* A pointer to a head of configuration for ADC channel */ \
    &Adc_AdcConfigSet_0_GroupConfigs[0U],     /* A pointer to a head of configuration for ADC group */ \
    &Adc_AdcConfigSet_0_HwUnitConfigs[0U],    /* A pointer to a head of configuration for HwUnit */ \
    NULL_PTR,                                 /* A pointer to DMA config: no group used DMA*/ \
    &Adc_AdcConfigSet_0_GroupId_Location[0U], /* A pointer to Group Id location data */ \
    ADC_CFG0_GROUP_COUNT,      /* Number of GroupConfigs */ \
    ADC_CFG0_HWUNIT_COUNT,     /* Number of HwUnitConfigs */ \
    0U,                        /* Number of DmaUnitConfigs */ \
    0xf0000000U                /* Pass control setting value */ \
  } \
}

/*------------------[Definition of used interrupt resources]-----------------*/
/* Index definition of used interrupt resources for all groups */
#define ADC_INDEX_INTERRUPT_153    ( 0U )  /* Interrupt index for ADC logical channel65 */
#define ADC_INDEX_INTERRUPT_152    ( 1U )  /* Interrupt index for ADC logical channel64 */

/* Count number of used resources */
#define ADC_INDEX_INTERRUPT_COUNT  ( 2U )

/* Invalid group identifier definition */
#define ADC_INVALID_GRPID          ( 65535U )

/* Definition of used resources location data */
#define ADC_CFG0_GROUPID_LOCATION \
{ \
  1U,                /* AdcGroupId: 1, Interrupt: 153 */ \
  0U                 /* AdcGroupId: 0, Interrupt: 152 */ \
}

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

#define ADC_START_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Adc_MemMap.h>

extern CONST(Adc_ConfigType, ADC_APPL_CONST) Adc_Config[ADC_CONFIG_SET_COUNT];

#define ADC_STOP_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Adc_MemMap.h>

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#endif /*!defined(ADC_PBCFG_H_INCLUDED)*/

/*==================[end of file]============================================*/
