/** \brief Can_PBcfg.h
 **
 ** This generated interface declares configuration items.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef CAN_PBCFG_H_INCLUDED
#define CAN_PBCFG_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Can.h>
#include <Can_Data.h>
#include <Can_Cfg.h>

/*==================[macros]================================================*/

/* CanConfigSet 0: CanConfigSet */
/* CanController 0: WPC_BCAN */

/** Part of the initializer to the constant array of dedicated RX IDs. */
#define CAN_CFG_DEDICATED_RX_IDS_00 \
/* Array of uint32 */\
       0x7dfu,                              /* Array index 0, standard identifier (11 bit) */ \
    
/** Part of the initializer to the constant array of FIFO filter elements. */
#define CAN_CFG_RX_FIFO_FILTERS_00 \
/* Array of Can_ControllerFilterType */\
  /*          CanIdValue of the Can filter.*/\
  /*          VAR(uint32, TYPEDEF) FilterIdValue;*/\
  /*          |            CanHwFilterMask of the Can filter. */\
  /*          |            VAR(uint32, TYPEDEF) FilterMaskValue; */\
  /*          |            | */\
  /*          V            V */\
  {      0x725u,      0x7ffu }, /* Array index 0, standard identifier (11 bit), CAN_RX_FIFO1 */ \


/** Part of the initializer to the constant array of HRHs.
    The list must be sorted ascending by buffer index, FIFOs last. */
#define CAN_CFG_HRH_FILTERS_00 \
/* Array of Can_RxHandleMappingType */\
  /* The index of the controller where the HRH is allocated. */\
  /* VAR(Can_ControllerIdType, TYPEDEF) ControllerIndex, */\
  /* |    */\
  /* |    The unique object identifier to identify the Hardware object. */\
  /* |    VAR(Can_HwHandleType, TYPEDEF) RxHwHandle */\
  /* |    |    */\
  /* |    |    The filter index which filter has detected the message. The filter    */\
  /* |    |    index has only 7 bit. The MSB is set for extended messages. With this */\
  /* |    |    index a search to the allocated HRH is possible, if the order of the  */\
  /* |    |    filters in Message RAM is in the order lower CAN IDs first and first  */\
  /* |    |    all standard IDs and then extended IDs. This order have to match to   */\
  /* |    |    the initialization order. */\
  /* |    |    VAR(Can_ControllerRxHandleType, TYPEDEF) RxHandle */\
  /* |    |    |    */\
  /* |    |    |    Flag indicating whether it is an RxHandler dedicated to pretended */\
  /* |    |    |    networking mode. */\
  /* |    |    |    VAR(boolean, TYPEDEF) IcomDedicatedEnable */\
  /* |    |    |    |  */\
  /* V    V    V    V  */\
  { 0u,  0u,  0u, FALSE}, /* Array index 0, standard filter, CAN_RX_DEDICATED */\
  { 0u,  1u,  1u, FALSE}, /* Array index 1, standard filter, CAN_RX_FIFO1 */\


/** Part of the initializer to the constant array of baudrates. */
#define CAN_CFG_BAUDRATES_00 \
/* Array of Can_ControllerBaudrateConfigType */\
  /* The value by which the CAN prescaler output frequency is divided for generating */\
  /* the bit time quanta. (I.e. there is a global CAN prescaler maintained by */\
  /* Can_ModuleManager, and an additional individual prescaler per CAN controller.) */\
  /* The bit time is built up from a multiple of this quanta. */\
  /* Valid values for the Baud Rate Prescaler are 1 to 1024. */\
  /* CONST(uint16, TYPEDEF) NominalBaudratePrescaler; */\
  /*    |      */\
  /*    |      The value of the baudrate in kbps. */\
  /*    |      CONST(uint16, TYPEDEF) BaudrateValue; */\
  /*    |      |    */\
  /*    |      |    (Re) Synchronization Jump Width: Valid values are 1 to 16. */\
  /*    |      |    CONST(uint8, TYPEDEF) SyncJumpWidth; */\
  /*    |      |    |    */\
  /*    |      |    |    Time segment before sample point: Valid values are 2 to 64. */\
  /*    |      |    |    CONST(uint8, TYPEDEF) TSeg1; */\
  /*    |      |    |    |    */\
  /*    |      |    |    |    Time segment after sample point: Valid values are 1 to 16. */\
  /*    |      |    |    |    CONST(uint8, TYPEDEF) TSeg2; */\
  /*    |      |    |    |    |      Switches support of CAN-FD features for this CAN object on or off.           */\
  /*    |      |    |    |    |      TRUE := Valid CAN-FD baudrate settings available and should be used for this */\
  /*    |      |    |    |    |      CAN object.                                                                  */\
  /*    |      |    |    |    |      FALSE := No valid CAN-FD baudrate settings available. Standard CAN should be */\
  /*    |      |    |    |    |      used for this CAN object. */\
  /*    |      |    |    |    |      CONST(boolean, TYPEDEF) FdEnabled; */\
  /*    |      |    |    |    |      |    (Re) Synchronization Jump Width for CAN FD: Valid values are 1 to 16. */\
  /*    |      |    |    |    |      |    CONST(uint8, TYPEDEF) FdSyncJumpWidth; */\
  /*    |      |    |    |    |      |    |    Time segment for CAN FD before sample point: Valid values are 2 to 64. */\
  /*    |      |    |    |    |      |    |    CONST(uint8, TYPEDEF) FdTSeg1; */\
  /*    |      |    |    |    |      |    |    |    Time segment for CAN FD after sample point: Valid values are 1 to 16. */\
  /*    |      |    |    |    |      |    |    |    CONST(uint8, TYPEDEF) FdTSeg2; */\
  /*    |      |    |    |    |      |    |    |    |      Specifies if the bit rate switching shall be used for transmissions. */\
  /*    |      |    |    |    |      |    |    |    |      FALSE := CAN FD frames shall be sent without bit rate switching */\
  /*    |      |    |    |    |      |    |    |    |      TRUE := CAN FD frames shall be sent with bit rate switching */\
  /*    |      |    |    |    |      |    |    |    |      CONST(boolean, TYPEDEF) FdTxBitRateSwitch; */\
  /*    |      |    |    |    |      |    |    |    |      |     Transceiver delay compensation offset for CAN FD in time quanta of the CAN FD */\
  /*    |      |    |    |    |      |    |    |    |      |     clock: Valid values are 0 to 127 (normal range) and 0xFF (compensation is */\
  /*    |      |    |    |    |      |    |    |    |      |     disabled). */\
  /*    |      |    |    |    |      |    |    |    |      |     CONST(uint8, TYPEDEF) FdTrcvDelayCompensationOffset; */\
  /*    |      |    |    |    |      |    |    |    |      |     |      The value of the CAN FD baudrate in kbps. */\
  /*    |      |    |    |    |      |    |    |    |      |     |      CONST(uint16, TYPEDEF) FdBaudrateValue; */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      The value by which the CAN prescaler output frequency for Data section if bit */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      rate switching is set is divided for generating the bit time quanta. (I.e.    */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      there is a global CAN prescaler maintained by Can_ModuleManager, and an       */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      additional individual prescaler per CAN controller.) The bit time is built up */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      from a multiple of this quanta. */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      Valid values for the Baud Rate Prescaler are 1 to 1024. */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      CONST(uint16, TYPEDEF) DataBaudratePrescaler; */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      |       Unique identifier to identify one baud rate configuration. */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      |       Valid range is 0..65535. */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      |       CONST(uint16, TYPEDEF) BaudrateConfigId; */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      |       |  */\
  /*    |      |    |    |    |      |    |    |    |      |     |      |      |       |  */\
  /*    V      V    V    V    V      V    V    V    V      V     V      V      V       V  */\
  {    1u,  500u, 16u, 63u, 16u,  TRUE,  4u, 14u,  5u,  TRUE,  15u, 1000u,    2u,     0u }, /* Array index 0; CanFdBaudrateValue: 1000; deviation to configured nominal/data baudrate 0.0%/0.0%, deviation to configured TrcvDelayCompensation 0.0% */\

/** Pointer to the base address of the Message RAM. It must point to the hardware
    base address, even if the beginning of the message RAM is not used by this
    controller.
    
    The macro can be overridden by the integrator via command line parameter.
    Doing so is at own risk! */
#ifndef CAN_CFG_MESSAGE_RAM_BASE_PTR_00
  #define CAN_CFG_MESSAGE_RAM_BASE_PTR_00 (P2VAR(uint8, TYPEDEF, TYPEDEF))0x40530000u
#else
  /* Deviation from MISRA-C:2004 Rule 19.16:, MISRA-C:2012 Rule-20.13
     Unrecognized preprocessing directive has been ignored because of conditional inclusion directives.
     Justification: The preprocessing directive is a warning that indicates a special build 
     configuration which is not suitable for production software. */
  /* PRQA S 3115 1 */
  #warning CAN_CFG_MESSAGE_RAM_BASE_PTR_00 is overridden by the environment. This is not intended for production software!
#endif

/** Message RAM size */
#define CAN_CFG_MESSAGE_RAM_SIZE_00 0x8000u

/** Base address of the CAN FD controller's registers.
    
    The macro can be overridden by the integrator via command line parameter.
    Doing so is at own risk! */
#ifndef CAN_CFG_REGISTER_BASE_ADDRESS_00
  #define CAN_CFG_REGISTER_BASE_ADDRESS_00 0x40520000u
#else
  /* Deviation from MISRA-C:2004 Rule 19.16:, MISRA-C:2012 Rule-20.13
     Unrecognized preprocessing directive has been ignored because of conditional inclusion directives.
     Justification: The preprocessing directive is a warning that indicates a special build 
     configuration which is not suitable for production software. */
  /* PRQA S 3115 1 */
  #warning CAN_CFG_REGISTER_BASE_ADDRESS_00 is overridden by the environment. This is not intended for production software!
#endif


/*  Message RAM (0x40530000) linking table:

    Item                     | Size in elements | Start offset | Size in bytes
    -------------------------+------------------+--------------+--------------
    Standard (11bit) filters |                2 |          0x0 |           0x8
    Extended (29bit) filters |                0 |          0x8 |           0x0
    RX FIFO 0                |                0 |          0x8 |           0x0
    RX FIFO 1                |               10 |          0x8 |         0x2d0
    RX dedicated buffers     |                1 |        0x2d8 |          0x48
    Event FIFO               |                1 |        0x320 |           0x8
    TX dedicated buffers     |                1 |        0x328 |          0x48
    TX FIFO                  |                0 |        0x370 |           0x0
 */
    
/** Part of the initializer to the constant array of controllers. */
#define CAN_CFG_CONTROLLER_00 \
{\
  /* Pointer to an array of baudrates. */\
  .BaudratesCfgPtr = &(Can_Baudrates_0[0u]), /* CONSTP2(Can_ControllerBaudrateConfigType, TYPEDEF, TYPEDEF) */\
  \
  /* Id of the controller. */\
  .ControllerId = 0u, /* CONST(Can_ControllerIdType, TYPEDEF) */\
  \
  /* Pointer to the default baudrate setting. */\
  .DefaultBaudratePtr = &(Can_Baudrates_0[0u]), /* CONSTP2(Can_ControllerBaudrateConfigType, TYPEDEF, TYPEDEF) */\
  \
  /* Configuration of the TX Event FIFO. The FIFO element size is ignored, because  */\
  /* it is fixed to 8 bytes. */\
  .EventFifo = \
  {\
    /* The number of elements belonging to the buffer or FIFO, i.e. the buffer/FIFO */\
    /* size in elements. */\
    .ElementCount = 1u, /* CONST(uint8, TYPEDEF) */\
    \
    /* The size of each field in the buffer or FIFO. */\
    .ElementSize = CAN_CONTROLLER_BUFFER_SIZE_8, /* CONST(Can_ControllerBufferSizeType, TYPEDEF) */\
    \
    /* Start address of the buffer or FIFO in bytes relative (offset) to the CAN */\
    /* message RAM base address. */\
    .StartAddress = 0x320u /* CONST(uint16, TYPEDEF) */\
  }, /* CONST(Can_ControllerBufferCfgType, TYPEDEF) */\
  \
  /* Address offset to the message RAM base address where the filters for extended */\
  /* messages shall be located. */\
  .FiltersExtendedAddressOffset = 0x8u, /* CONST(uint16, TYPEDEF) */\
  \
  /* Address offset to the message RAM base address where the filters for standard */\
  /* messages shall be located. */\
  .FiltersStandardAddressOffset = 0x0u, /* CONST(uint16, TYPEDEF) */\
  \
  /* Specifies if bus-off handling shall be done in interrupt mode (TRUE) or polling */\
  /* mode (FALSE). */\
  .InterruptEnableBusOff = TRUE, /* CONST(boolean, TYPEDEF) */\
  \
  /* Specifies if RX handling shall be done in interrupt mode (TRUE) or polling mode */\
  /* (FALSE). */\
  .InterruptEnableRx = TRUE, /* CONST(boolean, TYPEDEF) */\
  \
  /* Specifies if TX handling shall be done in interrupt mode (TRUE) or polling mode */\
  /* (FALSE). */\
  .InterruptEnableTx = TRUE, /* CONST(boolean, TYPEDEF) */\
  \
  /* Specifies if wakeup handling shall be done in interrupt mode (TRUE) or polling */\
  /* mode (FALSE). */\
  .InterruptEnableWakeup = FALSE, /* CONST(boolean, TYPEDEF) */\
  \
  /* Pointer to the base address of the Message RAM. It must point to the hardware */\
  /* base address, even if the beginning of the message RAM is not used by this */\
  /* controller. */\
  .MessageRamBasePtr = CAN_CFG_MESSAGE_RAM_BASE_PTR_00, /* CONSTP2VAR(uint8, TYPEDEF, TYPEDEF) */\
  \
  /* Message RAM size in 1 Can Instance. It is not Message RAM size occupied */\
  /* by 1 channel. */\
  .MessageRamSize = CAN_CFG_MESSAGE_RAM_SIZE_00, /* CONST(uint32, TYPEDEF) */\
  \
  /* Number of baudrates in the array of baudrates pointed to by BaudratesCfgPtr. */\
  .NumberOfBaudrates = 1u, /* CONST(uint8, TYPEDEF) */\
  \
  /* Base address of the CAN FD controller's registers. */\
  .RegisterBaseAddress = CAN_CFG_REGISTER_BASE_ADDRESS_00, /* CONST(uint32, TYPEDEF) */\
  \
  /* Configuration of the dedicated RX buffers. The ElementCount equals the number */\
  /* of filter settings in the filter settings list. */\
  .RxBuffers = \
  {\
    /* The number of elements belonging to the buffer or FIFO, i.e. the buffer/FIFO */\
    /* size in elements. */\
    .ElementCount = 1u, /* CONST(uint8, TYPEDEF) */\
    \
    /* The size of each field in the buffer or FIFO. */\
    .ElementSize = CAN_CONTROLLER_BUFFER_SIZE_64, /* CONST(Can_ControllerBufferSizeType, TYPEDEF) */\
    \
    /* Start address of the buffer or FIFO in bytes relative (offset) to the CAN */\
    /* message RAM base address. */\
    .StartAddress = 0x2d8u /* CONST(uint16, TYPEDEF) */\
  }, /* CONST(Can_ControllerBufferCfgType, TYPEDEF) */\
  \
  /* Pointer to an array of CAN IDs. There is one ID per dedicated RX buffer; the */\
  /* order is the same as the buffers (same index).  */\
  .RxBuffersFiltersPtr = &(Can_DedicatedRxIds_0[0u]), /* P2CONST(uint32, TYPEDEF, TYPEDEF) */\
  \
  /* Configuration of the RX FIFO 0. */\
  .RxFifo0 = \
  {\
    /* The number of elements belonging to the buffer or FIFO, i.e. the buffer/FIFO */\
    /* size in elements. */\
    .ElementCount = 0u, /* CONST(uint8, TYPEDEF) */\
    \
    /* The size of each field in the buffer or FIFO. */\
    .ElementSize = CAN_CONTROLLER_BUFFER_SIZE_64, /* CONST(Can_ControllerBufferSizeType, TYPEDEF) */\
    \
    /* Start address of the buffer or FIFO in bytes relative (offset) to the CAN */\
    /* message RAM base address. */\
    .StartAddress = 0x8u /* CONST(uint16, TYPEDEF) */\
  }, /* CONST(Can_ControllerBufferCfgType, TYPEDEF) */\
  \
  /* Pointer to an array of different Can filter settings for the RX FIFO 0 */\
  .RxFifo0FiltersPtr = (P2CONST(Can_ControllerFilterType, AUTOMATIC, AUTOMATIC))NULL_PTR, /* P2CONST(Can_ControllerFilterType, TYPEDEF, TYPEDEF) */\
  \
  /* Number of RxFifo0 filters stored in array RxFifo0FiltersPtr. */\
  .RxFifo0FilterElementCount = 0u, /* CONST(uint8, TYPEDEF) */\
  /* Configuration of the RX FIFO 1. */\
  .RxFifo1 = \
  {\
    /* The number of elements belonging to the buffer or FIFO, i.e. the buffer/FIFO */\
    /* size in elements. */\
    .ElementCount = 10u, /* CONST(uint8, TYPEDEF) */\
    \
    /* The size of each field in the buffer or FIFO. */\
    .ElementSize = CAN_CONTROLLER_BUFFER_SIZE_64, /* CONST(Can_ControllerBufferSizeType, TYPEDEF) */\
    \
    /* Start address of the buffer or FIFO in bytes relative (offset) to the CAN */\
    /* message RAM base address. */\
    .StartAddress = 0x8u /* CONST(uint16, TYPEDEF) */\
  }, /* CONST(Can_ControllerBufferCfgType, TYPEDEF) */\
  \
  /* Pointer to an array of different Can filter settings for the RX FIFO 1 */\
  .RxFifo1FiltersPtr = &(Can_RxFifoFilters_0[0u]), /* P2CONST(Can_ControllerFilterType, TYPEDEF, TYPEDEF) */\
  \
  /* Number of RxFifo1 filters stored in array RxFifo1FiltersPtr. */\
  .RxFifo1FilterElementCount = 1u, /* CONST(uint8, TYPEDEF) */\
  /* Configuration of the dedicated TX buffers. */\
  .TxBuffers = \
  {\
    /* The number of elements belonging to the buffer or FIFO, i.e. the buffer/FIFO */\
    /* size in elements. */\
    .ElementCount = 1u, /* CONST(uint8, TYPEDEF) */\
    \
    /* The size of each field in the buffer or FIFO. */\
    .ElementSize = CAN_CONTROLLER_BUFFER_SIZE_64, /* CONST(Can_ControllerBufferSizeType, TYPEDEF) */\
    \
    /* Start address of the buffer or FIFO in bytes relative (offset) to the CAN */\
    /* message RAM base address. */\
    .StartAddress = 0x328u /* CONST(uint16, TYPEDEF) */\
  }, /* CONST(Can_ControllerBufferCfgType, TYPEDEF) */\
  \
  /* Configuration of the TX FIFO element count. The FIFO element size and start */\
  /* offset are shared with the dedicated TX Buffers. */\
  .TxFifoElementCount = 0u, /* CONST(uint8, TYPEDEF) */\
  \
  /* The wakeup source id that is passed to EcuM_CheckWakeup. */\
  .WakeupSource = 1uL << 6u, /* CONST(uint32, TYPEDEF) */\
  \
  /* Channel number excluding CanInstance number. */\
  .ChannelNumber = 2u, /* CONST(uint8, TYPEDEF) */\
  /** Indicates whether ECC error detection can be enabled. */\
  .EccPresentEnable = TRUE /* CONST(boolean, TYPEDEF) */\
},\


/** Initializer to the constant array of baudrates. */
#define CAN_CFG_BAUDRATES_0 \
{\
  CAN_CFG_BAUDRATES_00\
}

/** Initializer to the constant array of controllers. */
#define CAN_CFG_CONTROLLERS_0 \
{\
  CAN_CFG_CONTROLLER_00\
}

/** Initializer to the constant array of dedicated RX IDs. */
#define CAN_CFG_DEDICATED_RX_IDS_0 \
{\
  CAN_CFG_DEDICATED_RX_IDS_00\
}

/** Initializer to the constant array of RX FIFO Filters. */
#define CAN_CFG_RX_FIFO_FILTERS_0 \
{\
  CAN_CFG_RX_FIFO_FILTERS_00\
}


/** Initializer to the constant array of HRHs.
    The list must be sorted ascending by controller index and for the
    same controller index ascending by buffer index, FIFOs last. */
#define CAN_CFG_HRH_FILTERS_0 \
{\
  CAN_CFG_HRH_FILTERS_00\
}

/** Initializer to the constant array of HTHs. 
    The list must be sorted ascending by CanObjectId. */
#define CAN_CFG_HTHS_0 \
{\
/* Can_TxHandleMappingType */\
  /* The index of the controller where the HTH is allocated. */\
  /* VAR(Can_ControllerIdType, TYPEDEF) ControllerIndex, */\
  /* |       The index pointed to right position in the Message Queue. */\
  /* |       VAR(uint32, TYPEDEF) QueueStartIndex, */\
  /* |       |       The length of the Object message queue.*/\
  /* |       |       VAR(uint32, TYPEDEF) QueueLength, */\
  /* |       |       |      Enables the possibility to request the data for this HW object with the */\
  /* |       |       |      CanIf_TriggerTransmit from CanIf instead of getting the data by call of */\
  /* |       |       |      Can_Write. */\
  /* |       |       |      VAR(boolean, TYPEDEF) TriggerTransmitEnable, */\
  /* |       |       |      |     Value to initialize unused bytes in a transmit message, when the     */\
  /* |       |       |      |     PduInfo->SduLength does not match possible DLC values and the driver */\
  /* |       |       |      |     have to use the next higher valid DLC for transmission. */\
  /* |       |       |      |     VAR(uint8, TYPEDEF) PaddingValue, */\
  /* |       |       |      |     |     This is the index of the buffer in scope of the controller, */\
  /* |       |       |      |     |     where the HTH is allocated. */\
  /* |       |       |      |     |     0..CAN_CONTROLLER_TX_BUFFER_MAX is a dedicated buffer, */\
  /* |       |       |      |     |     CAN_CONTROLLER_TX_FIFO is the FIFO. */\
  /* |       |       |      |     |     VAR(uint8, TYPEDEF) TxHandle */\
  /* |       |       |      |     |     |    */\
  /* V       V       V      V     V     V    */\
  { 0u,     0u,     1u, FALSE, 255u,  0u },                    /* Array index 0, dedicated TX buffer */\
}


/** Initializer to the constant array of CanIcomConfig. */
#define CAN_CFG_ICOMS_0 \
{\
}

/** Initializer to the constant array of CanIcomRxMessageConfig. */
#define CAN_CFG_ICOM_RX_MESSAGES_0 \
{\
}

/** Initializer to the constant array of CanIcomRxMessageSignalConfig. */
#define CAN_CFG_ICOM_RX_MESSAGE_SIGNALS_0 \
{\
}

/** The number of baudrates that are configured. */
#define CAN_CFG_NUMBER_OF_BAUDRATES_0 1u

/** The number of controllers that are configured. */
#define CAN_CFG_NUMBER_OF_CONTROLLERS_0 1u

/** The number of dedicated RX objects that are configured. */
#define CAN_CFG_NUMBER_OF_DEDICATED_RX_IDS_0 1u

/** The number of filters for RX FIFO CAN objects. */
#define CAN_CFG_NUMBER_OF_RX_FIFO_FILTERS_0 1u

/** The number of configured HRH filters. */
#define CAN_CFG_NUMBER_OF_HRH_FILTERS_0 2u

/** The number of HRHs are configured. */
#define CAN_CFG_NUMBER_OF_HRHS_0 2u

/** The number of HTHs are configured. */
#define CAN_CFG_NUMBER_OF_HTHS_0 1u

/** Number of TX buffers that are available in hardware over all CAN controllers. */
#define CAN_CFG_NUMBER_OF_TX_BUFFERS_0 1u

/** The number of CanIcomConfigs are configured. */
#define CAN_CFG_NUMBER_OF_ICOMS_0 0u

/** The number of CanIcomRxMessageConfigs are configured. */
#define CAN_CFG_NUMBER_OF_ICOM_RX_MESSAGES_0 0u

/** The number of CanIcomRxMessageSignalConfigs are configured. */
#define CAN_CFG_NUMBER_OF_ICOM_RX_MESSAGE_SIGNALS_0 0u


/** The number of CanConfigSet */
#define CAN_CFG_NUMBER_OF_SET_CONFIGS 1u

/* Array of interrupt to controller list. */
#define CAN_CFG_INTERRUPT_TO_CONTROLLER_LIST_0 \
{\
  CanConf_CanController_0_WPC_BCAN, \
}

/* Number of interrupt to controller list. */
#define CAN_CFG_NUMBER_OF_INTERRUPT_TO_CONTROLLER_LISTS_0  1u


/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define CAN_START_SEC_CODE_ASIL_B
#include "Can_MemMap.h"

/** \brief Can_CheckConfigPtr
 **
 ** This function checks the pointer of the configuration set.
 **
 ** \param [in]  ConfigPtr  Pointer of data stored configuration set information.
 **
 ** \return If parameter ConfigPtr is a valid config set pointer, 
 **         return TRUE, else return FALSE. 
 */
extern FUNC(boolean, CAN_CODE) Can_CheckConfigPtr
(
  P2CONST(Can_ConfigType, AUTOMATIC, CAN_APPL_CONST) ConfigPtr
);

#define CAN_STOP_SEC_CODE_ASIL_B
#include "Can_MemMap.h"

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

#define CAN_START_SEC_CONST_ASIL_B_UNSPECIFIED
#include "Can_MemMap.h"

extern CONST(Can_ConfigType, CAN_CONST) Can_Config[CAN_CFG_NUMBER_OF_SET_CONFIGS];

#define CAN_STOP_SEC_CONST_ASIL_B_UNSPECIFIED
#include "Can_MemMap.h"

#endif /**defined(CAN_PBCFG_H_INCLUDED)*/

/*==================[end of file]===========================================*/
