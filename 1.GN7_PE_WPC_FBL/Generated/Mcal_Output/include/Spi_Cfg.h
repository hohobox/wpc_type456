
/** \brief AUTOSAR SPI Driver
 **
 ** This file contains definitions for configuration.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef SPI_CFG_H_INCLUDED
#define SPI_CFG_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Os.h>
#include <Spi_Types.h>



/*==================[macros]================================================*/

/*------------------[Cypress module config version identification]---------*/

#if (defined SPI_CFG_MAJOR_VERSION) /* to prevent double declaration */
#error SPI_CFG_MAJOR_VERSION already defined
#endif /* if (defined SPI_CFG_MAJOR_VERSION) */

/** Driver config major version */
#define SPI_CFG_MAJOR_VERSION 1U


#if (defined SPI_CFG_MINOR_VERSION) /* to prevent double declaration */
#error SPI_CFG_MINOR_VERSION already defined
#endif /* if (defined SPI_CFG_MINOR_VERSION) */

/** Driver config minor version */
#define SPI_CFG_MINOR_VERSION 19U


#if (defined SPI_CFG_PATCH_VERSION) /* to prevent double declaration */
#error SPI_CFG_PATCH_VERSION already defined
#endif /* if (defined SPI_CFG_PATCH_VERSION) */

/** Driver config patch version */
#define SPI_CFG_PATCH_VERSION 0U


/* SPI feature definitions */

#define SPI_LEVEL_DELIVERED 2U

#define SPI_SUPPORT_CONCURRENT_SYNC_TRANSMIT SPI_FALSE

#define SPI_CHANNEL_BUFFERS_ALLOWED 2U

#define SPI_DEV_ERROR_DETECT STD_ON

#define SPI_CANCEL_API STD_ON

#define SPI_VERSION_INFO_API STD_ON

#define SPI_HW_STATUS_API STD_ON

#define SPI_INTERRUPTIBLE_SEQ_ALLOWED STD_OFF
#define SPI_CS_GPIO_USED  STD_OFF

/** This parameter defines the existence and the name of a callout function 
 that is called each time an error was detected.
 The function has to have the following parameters: (ModuleId: uint16,
 InstanceId: uint8, ApiId: uint8, ErrorId: uint8) */
#define SPI_ERROR_CALLOUT_FUNCTION Det_ReportError

/** \brief maximum size of sequence transmit queue
 **
 ** this is the maximum number of sequences pending at a given time.
 ** only valid for level 1 or level 2.
 ** */
#define SPI_QUEUE_ITEM_MAX   1U

/* Id of configuration set */
#define SPI_CONFIG  0U /* SpiDriver */
#define SpiConf_SpiDriverIndex_SpiDriver  0U

/* symbolic names for channels */
/* symbolic name of SpiChannel_0 */
#define SpiChannel_0                     ((Spi_ChannelType) 0U)
#define Spi_SpiChannel_0                 ((Spi_ChannelType) 0U)
#define SpiConf_SpiChannel_SpiChannel_0  ((Spi_ChannelType) 0U)


/* overall number of channels */
#define SPI_MAX_CHANNEL    ((Spi_ChannelType) 1U)

/*------------------[channels]--------------------------------------------- */


#define SPI_CHANNEL_CONFIG  /* SpiDriver */ \
{ \
  { /* SpiChannel_0 */ \
    Spi_ChRxB_SpiChannel_0, /* RxBufferPtr */ \
    Spi_ChTxB_SpiChannel_0, /* TxBufferPtr */ \
    0U, /* DefaultData */ \
    1U, /* BufferSize */ \
    SPI_CHANNEL_TYPE_IB, /* ChannelType */ \
    SPI_TRANSFER_START_LSB, /* TransferStart */ \
    1U, /* DataWidth */ \
    SPI_SCB_DATA_WIDTH_8, /* DataWidthBitMask */ \
    SPI_FALSE, /* AlignedBuffer */ \
    0U, /* Channel Id */ \
    NULL_PTR, /* DmaRxDescriptorRegsPtr */ \
    NULL_PTR, /* DmaTxDescriptorRegsPtr */ \
    0U /* DmaDescriptorCount */ \
  } \
}

/* for SpiDriver */


/* symbolic names for jobs */
/* symbolic name of SpiJob_0 */
#define SpiJob_0                 ((Spi_JobType) 0U)
#define Spi_SpiJob_0             ((Spi_JobType) 0U)
#define SpiConf_SpiJob_SpiJob_0  ((Spi_JobType) 0U)


/* overall number of jobs */
#define SPI_MAX_JOB    ((Spi_JobType) 1U)

/* overall number of external devices */
#define SPI_MAX_EXTERNAL_DEVICE    ((uint8) 1U)

/** Specifies the identification (ID) for a SPI external device.
 **
 */
/* symbolic names for external device */
#define SPI_EXT_SpiExternalDevice_0  ((Spi_ExtDeviceType) 0U)
#define SpiConf_SpiExternalDevice_SpiExternalDevice_0  ((Spi_ExtDeviceType) 0U)

/** Number of different SPI peripherals available and handled by this module.
 ** [SPI094]
 **
 */
/* number of HwUnit */
#define SPI_MAX_HW_UNIT    1U
  
/** Specifies the identification (ID) for a SPI Hardware microcontroller
 ** peripheral.
 **
 */
/** symbolic names for hardware units */
#define SPI_SCB0  ((Spi_HWUnitType) 0U)

/*------------------[external device configuration]--- */

#define SPI_EXTERNAL_DEVICE_CONFIG  /*  SpiDriver */\
{ \
  { /* SpiExternalDevice_0 */ \
    0U,  /* no chip select: unused */ \
    SPI_FALSE, /* no chip select */ \
    STD_LOW, /* no chip select: unused */ \
    9U, /* OVS register setting (baud rate expected:1000000; supported:1000000) */ \
    STD_HIGH,   /* shift clock idle level */ \
    SPI_DATA_SHIFT_EDGE_TRAILING, /* data shift edge */ \
    0U,  /* chip select setup delay */ \
    0U,  /* chip select hold delay */ \
    SPI_SCB0, /* Hw unit */ \
    SPI_TRUE, /* using fifo or not */ \
    SPI_FALSE, /* using dma or not */ \
    SPI_SELECT0, /* chip select handling method */ \
    SPI_FALSE, /* Force overwrite control registers. */ \
    &Spi_ActiveOvsValues[0] /* Pointer to Active Ovs value */ \
  } \
}

/*------------------[job configuration]--- */

#define SPI_JOB_CONFIG  /* SpiDriver */ \
{ \
  { /* SpiJob_0 */ \
    Spi_JCh_SpiJob_0,  /* ChannelListPtr */ \
    NULL_PTR,  /* JobEndNotification */ \
    &Spi_ExternalDeviceConfig[0U], /* ExternalDevicePtr */ \
    0U, /* Job Id */ \
    0U,  /* JobPriority */ \
    1U,  /* ChannelCount */ \
    SPI_HWUNIT_ASYNC, /* HwUnitSync */ \
    SPI_SINGLE_WIDTH,   /* WidthType */ \
    NULL_PTR,  /* DmaRxDescriptorRegsPtr */ \
    NULL_PTR   /* DmaTxDescriptorRegsPtr */ \
  }  \
}

/* symbolic names for sequences */
/* symbolic name of SpiSequence_0 */
#define SpiSequence_0                      ((Spi_SequenceType) 0U)
#define Spi_SpiSequence_0                  ((Spi_SequenceType) 0U)
#define SpiConf_SpiSequence_SpiSequence_0  ((Spi_SequenceType) 0U)


/* overall number of sequences */
#define SPI_MAX_SEQUENCE    ((Spi_SequenceType) 1U)
  
/*------------------[sequences]-------------------------------------------- */
#define SPI_SEQUENCE_CONFIG  /* SpiDriver */ \
{ \
  { /* SpiSequence_0 */ \
    Spi_SJb_SpiSequence_0, /* JobListPtr */ \
    NULL_PTR, /* SeqEndNotification */ \
    &Spi_SpiSequence_0_SharedHwUnitSeqList[0], /* SharedHwUnitSeqListPtr */ \
    1U, /* JobCount */ \
    SPI_SpiSequence_0_SHARED_HW_UNIT_SEQ_COUNT,  /* SharedHwUnitSeqCount */ \
    SPI_FALSE, /* InterruptibleSequence */ \
    0U /* Sequence Id */ \
   }  \
}

/* The DemEventParameter */
#define SPI_DEM_E_HW_ERROR STD_OFF
#define SPI_INTERNAL_E_HW_ERROR SPI_E_HARDWARE_ERROR

/* for SpiDriver */
#define  SPI_SpiSequence_0_SHARED_HW_UNIT_SEQ_COUNT   1U
#define  SPI_SpiSequence_0_SHARED_HW_UNIT_SEQ_LIST { \
  0U \
}


/*------------------[Symbolic Names of Spi Config Settings]------------------*/
#define SpiDriver  (Spi_Config[0])
#define SpiConf_SpiDriver_SpiDriver  (Spi_Config[0])
/*------------------[Number of Spi Config Settings]------------------*/
#define SPI_CONFIG_COUNT  1U

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/
#define SPI_START_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/** \brief Spi_Cfg_GetDefaultConfig
 **
 ** Returns Spi default config address.
 **
 ** \return Pointer to Spi default config address.
 **
 */
 extern FUNC_P2CONST(Spi_ConfigType, AUTOMATIC, SPI_CODE) Spi_Cfg_GetDefaultConfig(void);

/** \brief Spi_Cfg_SetConfig
 **
 ** Set configuration.
 **
 ** \return None.
 ** \param [in] ConfigPtr   Pointer to driver configuration set
 **
 */
extern FUNC(void, SPI_CODE) Spi_Cfg_SetConfig
(
  P2CONST( Spi_ConfigType, AUTOMATIC, AUTOMATIC ) ConfigPtr
);

/** \brief Spi_Cfg_CheckConfig
 **
 ** Check if it is included in the configuration array.
 **
 ** \return check result.
 **   SPI_TRUE:   Included
 **   SPI_FALSE:  Not included 
 ** \param [in] ConfigPtr   Pointer to driver configuration set
 */
extern FUNC(boolean, SPI_CODE) Spi_Cfg_CheckConfig
(
  P2CONST( Spi_ConfigType, AUTOMATIC, AUTOMATIC ) ConfigPtr
);


/** \brief Spi_Interrupt_SCB0_Cat1
 **
 ** Spi interrupt service routine (Cat 1):
 ** Entry point for interrupt vector 17.
 **
 */
extern ISR_NATIVE(Spi_Interrupt_SCB0_Cat1);

/** \brief Spi_Interrupt_SCB0_Cat2
 **
 ** Spi interrupt service routine (Cat 2):
 ** Entry point for interrupt vector 17.
 **
 */
extern ISR(Spi_Interrupt_SCB0_Cat2);



#if defined(SPI_DECLARATION_MAINFUNCTION)

/** \brief Spi_MainFunction_Handling
 **
 ** Scheduled function that polls the SPI interrupt flags for advancing 
 ** the transmission state machine.
 ** Only available if SPI_LEVEL_DELIVERED is 2.
 ** The function is only called if the transmission mode is set to 
 ** SPI_POLLING_MODE using Spi_SetAsyncMode().
 **
 */
extern FUNC(void, SPI_CODE) Spi_MainFunction_Handling(void);

#endif /* defined(SPI_DECLARATION_MAINFUNCTION) */

#define SPI_STOP_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/*==================[external constants]====================================*/
#define SPI_START_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Spi_MemMap.h>

extern CONST(Spi_ConfigType, SPI_CONST) Spi_Config[SPI_CONFIG_COUNT];

extern CONST(Spi_InfoType, SPI_VAR_NO_INIT) Spi_Info;

#define SPI_STOP_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Spi_MemMap.h>
/*==================[external data]=========================================*/
#define SPI_START_SEC_VAR_INIT_ASIL_B_UNSPECIFIED
#include <Spi_MemMap.h>

extern P2CONST(Spi_ConfigType, SPI_VAR_NO_INIT, SPI_VAR_NO_INIT) Spi_Current_ConfigPtr;

#define SPI_STOP_SEC_VAR_INIT_ASIL_B_UNSPECIFIED
#include <Spi_MemMap.h>
#endif /*!defined(SPI_CFG_H_INCLUDED)*/

/*==================[end of file]===========================================*/
