#if !defined( FLS_INTERNALLIB_H )
#define FLS_INTERNALLIB_H

/** \brief AUTOSAR Fls Flash Driver
 **
 ** This file contains internal declarations and macros needed for
 ** the AUTOSAR module Fls.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/

#include <Fls_Check.h>          /* Module version check */
#include <Fls_InternalDerLib.h> /* internal derivative specific declarations */
#include <Fls_Sub.h>            /* Hardware Abstraction Layer (HAL) */

/*==================[macros]=================================================*/

/** \brief value in erased flash cell before write */
#define FLS_ERASED_W_VALUE      (0xFFFFFFFFUL)


/** \brief value in erased flash cell after erase */
#if FLS_MULTI_READ_SIZE == 2
    #define FLS_ERASED_E_VALUE  (0xFFFFU)
#elif FLS_MULTI_READ_SIZE == 8
    #define FLS_ERASED_E_VALUE  (0xFFFFFFFFFFFFFFFFULL)
#else
    #define FLS_ERASED_E_VALUE  (0xFFFFFFFFUL)
#endif


/** \brief shift value for verify erase before write */
#define FLS_SHIFT_W_VALUE       (0x02U)


/** \brief shift value for read/compare or verify erase after erase */
#if FLS_MULTI_READ_SIZE == 2
    #define FLS_SHIFT_R_VALUE   (0x01U)
#elif FLS_MULTI_READ_SIZE == 8
    #define FLS_SHIFT_R_VALUE   (0x03U)
#else
    #define FLS_SHIFT_R_VALUE   (0x02U)
#endif

/*==================[macro functions]========================================*/

/*==================[type definitions]=======================================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

#define FLS_START_SEC_VAR_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

/** \brief flash driver state */
extern VAR( MemIf_StatusType, FLS_VAR_INIT ) Fls_DriverState;

#define FLS_STOP_SEC_VAR_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

#define FLS_START_SEC_VAR_NO_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

/** \brief job result of last job */
extern VAR( MemIf_JobResultType, FLS_VAR_NO_INIT ) Fls_JobResult;

/** \brief current flash mode */
extern VAR( MemIf_ModeType, FLS_VAR_NO_INIT ) Fls_Mode;

/** \brief holds data for the current job */
extern VAR( Fls_JobRequestType, FLS_VAR_NO_INIT ) Fls_JobRequest;

/** \brief holds data for verifing job */
extern VAR( Fls_WriteJobType, FLS_VAR_NO_INIT ) Fls_WriteGlobalJob;

/** \brief holds saved data for the suspended job */
extern VAR( Fls_JobRequestType, FLS_VAR_NO_INIT ) Fls_SuspendedJobRequest;

/** \brief holds saved data for suspended verifying job */
extern VAR( Fls_WriteJobType, FLS_VAR_NO_INIT ) Fls_WriteGlobalSuspendedJob;

/** \brief holds fault information */
extern VAR( Fls_FaultType, FLS_VAR_NO_INIT ) Fls_Fault;

/** \brief current cycle mode */
extern VAR( MemIf_ModeType, FLS_VAR_NO_INIT ) Fls_CycleMode;

#if defined( FLS_IO_DEFINE )

extern VAR( uint8, FLS_VAR_NO_INIT ) Fls_DummyFlash[FLS_NUMBER_OF_SECTORS * FLS_MAX_SECTOR_SIZE];

#endif /* if defined( FLS_IO_DEFINE ) */

#define FLS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED
#include <Fls_MemMap.h>

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

#define FLS_START_SEC_CODE
#include <Fls_MemMap.h>

/** \brief Fls_ConvertLogicalFlashAddress
 **
 ** The function calculates the physical flash address and the length to the sector end
 ** from the given logical flash address.
 **
 ** \param[in]  ConfigPtr            Configuration address
 ** \param[in]  MemoryMap            Memory map address
 ** \param[in]  LogicalAddress       Logical flash address
 ** \param[out] PhysicalAddressPtr   Pointer to store physical address
 ** \param[out] LengthToSectorEndPtr Pointer to store length to sector end
 **
 ** \return     none
 */
extern FUNC(void, FLS_CODE) Fls_ConvertLogicalFlashAddress
(
    P2CONST(Fls_ConfigType, AUTOMATIC, FLS_APPL_CONST) ConfigPtr,
    P2CONST(Fls_MemoryMapType, FLS_CONST, FLS_APPL_CONST) MemoryMap,
    Fls_AddressType LogicalAddress,
    P2VAR(Fls_PhysicalAddressType, AUTOMATIC, FLS_APPL_DATA) PhysicalAddressPtr,
    P2VAR(Fls_PhysicalLengthType, AUTOMATIC, FLS_APPL_DATA) LengthToSectorEndPtr
);

#define FLS_STOP_SEC_CODE
#include <Fls_MemMap.h>

/*==================[internal function definitions]==========================*/

#endif /* if !defined( FLS_INTERNALLIB_H ) */
/*==================[end of file]============================================*/
