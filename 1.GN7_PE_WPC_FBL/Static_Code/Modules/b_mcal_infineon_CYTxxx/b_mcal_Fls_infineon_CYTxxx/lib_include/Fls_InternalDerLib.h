#if !defined( FLS_INTERNALDERLIB_H )
#define FLS_INTERNALDERLIB_H

/** \brief AUTOSAR Fls Flash Driver
 **
 ** This file contains derivative specific internal declarations and
 ** macros needed for the AUTOSAR module Fls.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/

/*==================[macros]=================================================*/

  /* --- value of Mainfunction count ------------------------------------- */

/** \brief time-limit value for initializing */
#define FLS_MAX_TIME_INIT       (sint32)0

/** \brief value 0 for judging timeout */
#define FLS_MAX_TIME_ZERO       (sint32)0

/** \brief MainFunction time-limit for a write job */
#define FLS_MAX_TIME_WRITE      ((((sint32)((Length >> 2U) + ((Length * 2) / MaxReadCurrentMode) + (ConfigPtr->NumberOfSectors * 2)) + 4) * \
                                 (ConfigPtr->CallCycle)) + 1)

/** \brief MainFunction time-limit for a read job */
#define FLS_MAX_TIME_READ       ((((sint32)((Length / MaxReadCurrentMode) + ConfigPtr->NumberOfSectors) + 4) * \
                                 (ConfigPtr->CallCycle)) + 1)

/** \brief MainFunction time-limit for an erase job */
#define FLS_MAX_TIME_ERASE      (((sint32)FLS_ERASE_TIME * ConfigPtr->NumberOfSectors) + \
                                 (((sint32)((Length / MaxReadCurrentMode) + ConfigPtr->NumberOfSectors) + 4) * \
                                  (ConfigPtr->CallCycle)) + 1)

/** \brief MainFunction time-limit for a compare job */
#define FLS_MAX_TIME_COMPARE    ((((sint32)((Length / MaxReadCurrentMode) + ConfigPtr->NumberOfSectors) + 4) * \
                                 (ConfigPtr->CallCycle)) + 1)

/** \brief MainFunction time-limit for a compare job */
#define FLS_MAX_TIME_BLANKCHECK ((((sint32)((Length / MaxReadCurrentMode) + ConfigPtr->NumberOfSectors) + 4) * \
                                 (ConfigPtr->CallCycle)) + 1)

/** \brief MainFunction time-limit for waiting for flash controler stop */
#define FLS_MAX_TIME_SECTOR_ERASE     (((sint32)FLS_ERASE_TIME) + (4 * (ConfigPtr->CallCycle)))

/** \brief MainFunction time-limit for retrying for write enable acquisition */
#define FLS_MAX_TIME_RETRY_ACQUIRE    ((uint16)(((uint16)Fls_MaxRetryTime) + (4U * (uint16)(ConfigPtr->CallCycle))))

  /* --- value for verifing erase ---------------------------------- */

/*==================[macro functions]========================================*/

/*==================[macro]==================================================*/

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#endif /* if !defined( FLS_INTERNALDERLIB_H ) */
/*==================[end of file]============================================*/
