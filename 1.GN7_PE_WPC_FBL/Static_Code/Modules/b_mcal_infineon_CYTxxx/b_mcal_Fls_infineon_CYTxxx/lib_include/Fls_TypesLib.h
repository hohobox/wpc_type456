#if !defined( FLS_TYPESLIB_H )
#define FLS_TYPESLIB_H

/** \brief AUTOSAR Fls Flash Driver
 **
 ** This file contains the type definitions of
 ** the AUTOSAR module Fls.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]==============================================*/

/*==================[macros]==================================================*/

/*==================[type definitions]========================================*/

/** \brief Type definition of callback function Fee_JobEndNotification
 **
 ** This type denotes the function prototype of Fee_JobEndNotification
 **
 ** Platform independent */
typedef P2FUNC(void, TYPEDEF, Fls_FeeJobEndNotificationFctPtr)(void);


/** \brief Type definition of callback function Fee_JobErrorNotification
 **
 ** This type denotes the function prototype of Fee_JobErrorNotification
 **
 ** Platform independent */
typedef P2FUNC(void, TYPEDEF, Fls_FeeJobErrorNotificationFctPtr)(void);

/** \brief Type definition of callback function Fee_DedErrorNotification
 **
 ** This type denotes the function prototype of Fee_DedErrorNotification
 **
 ** Platform independent */
typedef P2FUNC(void, TYPEDEF, Fls_FeeDedErrorNotificationFctPtr)(void);

/** \brief Type definition of callback function Fee_SedErrorNotification
 **
 ** This type denotes the function prototype of Fee_SedErrorNotification
 **
 ** Platform independent */
typedef P2FUNC(void, TYPEDEF, Fls_FeeSedErrorNotificationFctPtr)(void);

/** \brief Type definition of callback function Fls_SystemcallCalloutFunction
 **
 ** This type denotes the function prototype of Fls_SystemcallCalloutFunction
 **
 ** Platform independent */
typedef P2FUNC(Std_ReturnType, TYPEDEF, Fls_SystemcallCalloutFctPtr)(uint32 *Fls_IpcContext);

/** \brief Type definition of Fls_AddressType
 **
 ** This type is used as address offset from the configured flash base
 ** address to access a certain flash memory area.
 **
 ** Fls197: flash address type to access flash memory area
 **
 ** Platform dependent */
typedef uint32 Fls_AddressType;

/** \brief Type definition of Fls_LengthType
 **
 ** This type denotes the number of bytes to read/write/erase/compare/blank check jobs.
 **
 ** Platform dependent */
typedef Fls_AddressType Fls_LengthType;

/** \brief flash configuration structure
 **
 ** Configuration structure to initialze the flash driver.
 */
typedef struct fls_configType
{
    Fls_LengthType                    TotalSize;            /* flash total size                                            */
    sint32                            CallCycle;            /* Cycle time of calls of the main function (msec)             */
    Fls_FeeJobEndNotificationFctPtr   JobEndNotifFctPtr;    /* function ptr to Fee_JobEndNotification                      */
    Fls_FeeJobErrorNotificationFctPtr JobErrorNotifFctPtr;  /* function ptr to Fee_JobErrorNotification                    */
    Fls_FeeDedErrorNotificationFctPtr DedErrorNotifFctPtr;  /* function ptr to Fee_DedErrorNotification                    */
    Fls_FeeSedErrorNotificationFctPtr SedErrorNotifFctPtr;  /* function ptr to Fee_SedErrorNotification                    */
    Fls_LengthType                    MaxReadNormalMode;    /* max number of bytes to read/compare/blank check             */
    Fls_LengthType                    MaxReadFastMode;      /* max number of bytes to read/compare/blank check (fast mode) */
    Fls_LengthType                    MaxWriteNormalMode;   /* max number of bytes to write                                */
    Fls_LengthType                    MaxWriteFastMode;     /* max number of bytes to write (fast mode)                    */
    uint32                            PageSize;             /* number of bytes to be written at once                       */
    uint32                            NumberOfDelayLoop;    /* number of delay (wait) loop for writing a flash block       */
    uint16                            NumberOfSectors;      /* number of flash sectors                                     */
    uint8                             VerificationFlag;     /* flag for specifying which verification to do                */
    MemIf_ModeType                    DefaultMode;          /* default FLS device mode after initialization                */
} Fls_ConfigType;

/*==================[external function declarations]==========================*/

/*==================[internal function declarations]==========================*/

/*==================[external constants]======================================*/

/*==================[internal constants]======================================*/

/*==================[external data]===========================================*/

/*==================[internal data]===========================================*/

/*==================[external function definitions]===========================*/

/*==================[internal function definitions]===========================*/

#endif /* if !defined( FLS_TYPESLIB_H ) */
/*==================[end of file]=============================================*/
