
#ifndef COMPILER_H
#define COMPILER_H

/** \brief AUTOSAR compiler abstraction header
 **
 ** This file contains compiler specific declarations for the
 ** platform using the compiler GHS for ARM architectures
 **
 ** See "Specification of Compiler Abstraction"
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */


/*==================[inclusions]=============================================*/

#include <Compiler_Cfg.h> /* module specific memory and pointer classes */

/*==================[macros]=================================================*/

/*------------------[Autosar compiler vendor idenfitication]-----------------*/

#if (defined COMPILER_VENDOR_ID) /* to prevent double definition */
#error COMPILER_VENDOR_ID already defined
#endif /* if (defined COMPILER_VENDOR_ID) */

/** \brief Vendor ID of the dedicated implementation of this module */
#define COMPILER_VENDOR_ID 66U /* Cypress */

/*------------------[Autosar specification version]--------------------------*/

#if (defined COMPILER_AR_RELEASE_MAJOR_VERSION) /* to prevent double definition */
#error COMPILER_AR_RELEASE_MAJOR_VERSION already defined
#endif /* if (defined COMPILER_AR_RELEASE_MAJOR_VERSION) */

#define COMPILER_AR_RELEASE_MAJOR_VERSION 4U /** \brief major version number */

#if (defined COMPILER_AR_RELEASE_MINOR_VERSION) /* to prevent double definition */
#error COMPILER_AR_RELEASE_MINOR_VERSION already defined
#endif /* if (defined COMPILER_AR_RELEASE_MINOR_VERSION) */

#define COMPILER_AR_RELEASE_MINOR_VERSION 2U /** \brief minor version number */

#if (defined COMPILER_AR_RELEASE_REVISION_VERSION) /* to prevent double definition */
#error COMPILER_AR_RELEASE_REVISION_VERSION already defined
#endif /* if (defined COMPILER_AR_RELEASE_REVISION_VERSION) */

#define COMPILER_AR_RELEASE_REVISION_VERSION 2U /** \brief patch version number */

#if (defined COMPILER_MODULE_ID) /* to prevent double definition */
#error COMPILER_MODULE_ID already defined
#endif /* if (defined COMPILER_MODULE_ID) */

#define COMPILER_MODULE_ID 198U /** \brief Defines the module IDr */

/*------------------[Autosar module software version]------------------------*/

#if (defined COMPILER_SW_MAJOR_VERSION) /* to prevent double definition */
#error COMPILER_SW_MAJOR_VERSION already defined
#endif /* if (defined COMPILER_SW_MAJOR_VERSION) */

#define COMPILER_SW_MAJOR_VERSION 1U /** \brief major version number */

#if (defined COMPILER_SW_MINOR_VERSION) /* to prevent double definition */
#error COMPILER_SW_MINOR_VERSION already defined
#endif /* if (defined COMPILER_SW_MINOR_VERSION) */

#define COMPILER_SW_MINOR_VERSION 4U /** \brief minor version number */

#if (defined COMPILER_SW_PATCH_VERSION) /* to prevent double definition */
#error COMPILER_SW_PATCH_VERSION already defined
#endif /* if (defined COMPILER_SW_PATCH_VERSION) */

#define COMPILER_SW_PATCH_VERSION 0U /** \brief patch version number */

/*------------------[compiler symbol]----------------------------------------*/

#if (defined _GREENHILLS_C_MXS40_) /* to prevent double definition */
#error _GREENHILLS_C_MXS40_ already defined
#endif /* if (defined _GREENHILLS_C_MXS40_) */

/** \brief compiler symbol for GHS Compiler for MXS40 */
/* Deviation from MISRA-C:2004 rule 1.2, 20.2 and QA-C message 602, MISRA-C:2012 Rule-1.3, Rule-21.2.
   Justification: Naming convention is required by AUTOSAR specification. */
/* PRQA S 602 1 */
#define _GREENHILLS_C_MXS40_ 1U

/*------------------[storage classes]----------------------------------------*/

#if (defined AUTOMATIC) /* to prevent double definition */
#error AUTOMATIC already defined
#endif /* if (defined AUTOMATIC) */

/** \brief definition of an automatic memory class
 **
 ** To be used for local non static variables */
#define AUTOMATIC

#if (defined INLINE) /* to prevent double definition */
#error INLINE already defined
#endif /* if (defined INLINE) */

/** \brief abstraction of compiler keyword 'inline'
 **
 ** values: 'inline' or empty */
#define INLINE

#if (defined LOCAL_INLINE) /* to prevent double definition */
#error LOCAL_INLINE already defined
#endif /* if (defined LOCAL_INLINE) */

/** \brief Definition of an inline keyword with "static" scope */
#define LOCAL_INLINE

#if (defined TYPEDEF) /* to prevent double definition */
#error TYPEDEF already defined
#endif /* if (defined TYPEDEF) */

/** \brief definition of TYPEDEF
 **
 ** values: empty */
#define TYPEDEF

#if (defined NEAR) /* to prevent double definition */
#error NEAR already defined
#endif /* if (defined NEAR) */

/** \brief definition of an near memory class
 **
 ** To be used for near addresses */
#define NEAR

#if (defined FAR) /* to prevent double definition */
#error FAR already defined
#endif /* if (defined FAR) */

/** \brief definition of an far memory class
 **
 ** To be used for far addresses */
#define FAR

/*------------------[null pointer constant]----------------------------------*/

#if (defined NULL_PTR) /* to prevent double definition */
#error NULL_PTR already defined
#endif /* if (defined NULL_PTR) */

/** \brief abstraction of the null pointer constant */
#define NULL_PTR ((void *) 0)

/*------------------[macros for functions]-----------------------------------*/

#if (defined FUNC) /* to prevent double definition */
#error FUNC already defined
#endif /* if (defined FUNC) */

/** \brief abstraction for function declaration and definition
 **
 ** This macro abstracts the declaration and definition of functions
 ** and ensures the correct syntax of function declaration as
 ** required by the specific compiler.
 **
 ** \param[in] rettype return type of the function
 ** \param[in] memclass classification of the function itself */
/* Deviation from MISRA-C:2004 rule 19.10, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define FUNC(rettype, memclass) memclass rettype
#define FUNC(rettype, memclass) rettype
/* Changed by mobilgene - End */


#if (defined ISR_NATIVE) /* to prevent double definition */
#error ISR_NATIVE already defined
#endif /* if (defined ISR_NATIVE) */

/* Deviation from MISRA-C:2004 rule 19.7 and QA-C message 3453, MISRA-C:2012 Dir-4.9.
   Justification: Use the same style with ISR macro defined by the AUTOSAR specification. */
/* PRQA S 3453 1 */
#define ISR_NATIVE(x)     void  x(void)

#if (defined FUNC_P2CONST) /* to prevent double definition */
#error FUNC_P2CONST already defined
#endif /* if (defined FUNC_P2CONST) */

/** \brief abstraction for function declaration and definition
 **
 ** This macro abstracts the declaration and definition of functions
 ** and ensures the correct syntax of function declaration as
 ** required by the specific compiler.
 **
 ** \param[in] rettype return type of the function
 ** \param[in] ptrclass classification of the pointer distance
 ** \param[in] memclass classification of the function itself */
/* Deviation from MISRA-C:2004 rule 19.10, 19.4, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
#define FUNC_P2CONST(rettype, ptrclass, memclass) const ptrclass rettype * memclass

#if (defined FUNC_P2VAR) /* to prevent double definition */
#error FUNC_P2VAR already defined
#endif /* if (defined FUNC_P2VAR) */

/** \brief abstraction for function declaration and definition
 **
 ** This macro abstracts the declaration and definition of functions a pointer
 ** to a variable and ensures the correct syntax of function declaration as
 ** required by the specific compiler.
 **
 ** \param[in] rettype return type of the function
 ** \param[in] ptrclass defines the classification of the pointer's distance
 ** \param[in] memclass classification of the function itself */
/* Deviation from MISRA-C:2004 rule 19.10, 19.4, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
#define FUNC_P2VAR(rettype, ptrclass, memclass) ptrclass rettype * memclass

/*------------------[macros for pointers]------------------------------------*/

#if (defined P2VAR) /* to prevent double definition */
#error P2VAR already defined
#endif /* if (defined P2VAR) */

/** \brief abstraction for pointers in RAM pointing to RAM
 **
 ** This macro abstracts the declaration and definition of pointers
 ** in RAM pointing to variables in RAM.
 **
 ** The pointer itself is modifiable.
 ** The pointer's target is modifiable.
 **
 ** \param[in] ptrtype type of the referenced variable
 ** \param[in] memclass classification of the pointer's variable itself
 ** \param[in] defines the classification of the pointer's distance */
/* Deviation from MISRA-C:2004 rule 19.10, 19.4, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define P2VAR(ptrtype, memclass, ptrclass) ptrclass ptrtype * memclass
#define P2VAR(ptrtype, memclass, ptrclass) ptrtype *
/* Changed by mobilgene - End */

#if (defined P2CONST) /* to prevent double definition */
#error P2CONST already defined
#endif /* if (defined P2CONST) */

/** \brief abstraction for pointers in RAM pointing to ROM
 **
 ** This macro abstracts the declaration and definition of pointers
 ** in RAM pointing to constants in ROM.
 **
 ** The pointer itself is modifiable.
 ** The pointer's target is not modifiable (read only).
 **
 ** \param[in] ptrtype type of the referenced constant
 ** \param[in] memclass classification of the pointer's variable itself
 ** \param[in] defines the classification of the pointer's distance */
/* Deviation from MISRA-C:2004 rule 19.10, 19.4, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define P2CONST(ptrtype, memclass, ptrclass) const ptrtype ptrclass * memclass
#define P2CONST(ptrtype, memclass, ptrclass) const ptrtype *
/* Changed by mobilgene - End */

#if (defined CONSTP2VAR) /* to prevent double definition */
#error CONSTP2VAR already defined
#endif /* if (defined CONSTP2VAR) */

/** \brief abstraction for pointers in ROM pointing to RAM
 **
 ** This macro abstracts the declaration and definition of pointers
 ** in ROM pointing to variables in RAM.
 **
 ** The pointer is not modifiable. (read only).
 ** The pointer's target is modifiable.
 **
 ** \param[in] ptrtype type of the referenced variable
 ** \param[in] memclass classification of the pointer's variable itself
 ** \param[in] defines the classification of the pointer's distance */
/* Deviation from MISRA-C:2004 rule 19.10, 19.4, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define CONSTP2VAR(ptrtype, memclass, ptrclass) ptrclass ptrtype * const memclass
#define CONSTP2VAR(ptrtype, memclass, ptrclass) ptrtype * const
/* Changed by mobilgene - End */

#if (defined CONSTP2CONST) /* to prevent double definition */
#error CONSTP2CONST already defined
#endif /* if (defined CONSTP2CONST) */

/** \brief abstraction for pointers in ROM pointing to ROM
 **
 ** This macro abstracts the declaration and definition of pointers
 ** in ROM pointing to constants in ROM.
 **
 ** The pointer itself is not modifiable (read only).
 ** The pointer's target is not modifiable (read only).
 **
 ** \param[in] ptrtype type of the referenced constant
 ** \param[in] memclass classification of the pointer's variable itself
 ** \param[in] defines the classification of the pointer's distance */
/* Deviation from MISRA-C:2004 rule 19.10, 19.4, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define CONSTP2CONST(ptrtype, memclass, ptrclass) const ptrclass ptrtype * const memclass
#define CONSTP2CONST(ptrtype, memclass, ptrclass) const ptrtype * const
/* Changed by mobilgene - End */

#if (defined CONSTP2FUNC) /* to prevent double definition */
#error CONSTP2FUNC already defined
#endif /* if (defined CONSTP2FUNC) */

/** \brief abstraction for declaration and definition of function pointers
 **
 ** This macro abstracts the declaration and definition of constant pointers
 ** to functions.
 **
 ** \param[in] rettype return type of the function
 ** \param[in] ptrclass defines the classification of the pointer's distance
 ** \param[in] function name respectively name of the defined type
 ** */
#ifndef STACK_ANALYSIS_ENABLE
/* Deviation from MISRA-C:2004 rule 19.10, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
#define CONSTP2FUNC(rettype, ptrclass, fctname) rettype ptrclass (* const fctname)
#else
/* Deviation from MISRA-C:2004 rule 19.10, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
#define CONSTP2FUNC(rettype, ptrclass, fctname) __attribute__((strong_fptr)) rettype ptrclass (* const fctname)
#endif

#if (defined P2FUNC) /* to prevent double definition */
#error P2FUNC already defined
#endif /* if (defined P2FUNC) */

/** \brief abstraction for declaration and definition of function pointers
 **
 ** This macro abstracts the declaration and definition of pointers
 ** to functions.
 **
 ** \param[in] rettype return type of the function
 ** \param[in] ptrclass defines the classification of the pointer's distance
 ** \param[in] function name respectively name of the defined type
 ** */
#ifndef STACK_ANALYSIS_ENABLE
/* Deviation from MISRA-C:2004 rule 19.10, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define P2FUNC(rettype, ptrclass, fctname) rettype ptrclass (* fctname)
#define P2FUNC(rettype, ptrclass, fctname) rettype (*fctname)
/* Changed by mobilgene - End */
#else
/* Deviation from MISRA-C:2004 rule 19.10, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define P2FUNC(rettype, ptrclass, fctname) __attribute__((strong_fptr)) rettype ptrclass (* fctname)
#define P2FUNC(rettype, ptrclass, fctname) __attribute__((strong_fptr)) rettype (* fctname)
/* Changed by mobilgene - End */
#endif

/*------------------[keywords for constants]---------------------------------*/

#if (defined CONST) /* to prevent double definition */
#error CONST already defined
#endif /* if (defined CONST) */

/** \brief abstraction for declaration and definition of constants
 **
 ** This macro abstracts the declaration and definition of constants.
 **
 ** \param[in] consttype type of the constant
 ** \param[in] memclass classification of the constant itself */
/* Deviation from MISRA-C:2004 rule 19.7 and QA-C message 3453, MISRA-C:2012 Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3453 1 */
/* Changed by mobilgene - Start */
//#define CONST(consttype, memclass) memclass const consttype
#define CONST(consttype, memclass) const consttype
/* Changed by mobilgene - End */

/*------------------[keywords for variables]---------------------------------*/

#if (defined VAR) /* to prevent double definition */
#error VAR already defined
#endif /* if (defined VAR) */

/** \brief abstraction for the declaration and definition of variables
 **
 ** This macro abstracts the declaration and definition of variables.
 **
 ** \param[in] vartype type of the variable
 ** \param[in] memclass classification of the variable itself */
/* Deviation from MISRA-C:2004 rule 19.10, 19.7 and QA-C message 3410, 3453, MISRA-C:2012 Rule-20.7, Dir-4.9.
   Justification: Macro definition by the AUTOSAR specification. */
/* PRQA S 3410, 3453 1 */
/* Changed by mobilgene - Start */
//#define VAR(vartype, memclass) memclass vartype
#define VAR(vartype, memclass) vartype
/* Changed by mobilgene - End */

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#endif /* ifndef COMPILER_H */
/*==================[end of file]============================================*/
