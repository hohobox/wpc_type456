/** \brief AUTOSAR Adc Driver
 **
 ** This file contains the declaration of the AUTOSAR module Adc function
 ** for processing internal functionality.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef ADC_INTERNAL_H_INCLUDED
#define ADC_INTERNAL_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Adc_Types.h>   /* Module public types */

/*==================[macros]================================================*/

/* Definition for max sample time value */
#define ADC_SAMPLE_CYCLE_MAX      ( 0xFFFU )

/* Definition for mask to take actual physical channel number out */
#define ADC_MASK_PHYSICAL_CHANNEL ( 0x3FU )

/* Definition for bit position to take actual physical port number out */
#define ADC_POS_PHYSICAL_PORT     ( 6U )

/* Definition for return value of Adc_IsInterruptPending function           */
#define ADC_INT_DONE              ( 0U )  /* Interrupt flag is set          */
#define ADC_INT_NO                ( 1U )  /* Interrupt flag is not set      */
#define ADC_INT_ERROR             ( 2U )  /* Interrupt flag is set of error */

/* Max and Min correction value for AOFFSET and AGAIN */
#define ADC_AGAIN_MAX             ( 15 )
#define ADC_AGAIN_MIN             ( -16 )

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define ADC_START_SEC_CODE_ASIL_B
#include <Adc_MemMap.h>

/** \brief Adc_DeInitHw
 **
 ** De-initializes all HW units as configured.
 **
 ** PRECONDITIONS:
 **  - 'ConfigPtr' must be a valid config pointer.
 **
 ** \param [in] ConfigPtr   Pointer to configuration setting.
 **
 */
extern FUNC(void, ADC_CODE) Adc_DeInitHw
(
  P2CONST(Adc_ConfigType, AUTOMATIC, ADC_APPL_CONST) ConfigPtr
);

/** \brief Adc_GetGroupStatusInternal
 **
 ** Returns the status of current group.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \return                      Return status of group described by the given GroupConfigPtr.
 ** \param [in] GroupConfigPtr   Config pointer of the group that shall be affected by the operation.
 **
 */
extern FUNC(Adc_StatusType, ADC_CODE) Adc_GetGroupStatusInternal
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr
);

/** \brief Adc_GetStreamLastPointerInternal
 **
 ** Returns the number of valid samples per channel, stored in the result buffer.
 ** Reads a pointer, pointing to a position in the group result buffer. With the
 ** pointer position, the results of all group channels of the last completed
 ** conversion round can be accessed.
 ** With the pointer and the return value, all valid group conversion results can
 ** be accessed (the user has to take the layout of the result buffer into account).
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **  - 'PtrToSamplePtr' must be a valid buffer pointer.
 **
 ** \return                       Number of valid samples per channel.
 ** \param [in] GroupConfigPtr    Pointer to channel group config.
 ** \param [in] GroupStatus       Channel group status.
 ** \param [out] PtrToSamplePtr   Pointer to result buffer pointer.
 **
 */
extern FUNC(Adc_StreamNumSampleType, ADC_CODE) Adc_GetStreamLastPointerInternal
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr,
  VAR(Adc_StatusType, AUTOMATIC) GroupStatus,
  P2VAR(P2VAR(Adc_ValueGroupType, AUTOMATIC, ADC_APPL_DATA), AUTOMATIC, ADC_APPL_DATA) PtrToSamplePtr
);

/** \brief Adc_InitHw
 **
 ** Initializes all HW units as configured.
 **
 ** PRECONDITIONS:
 **  - 'ConfigPtr' must be a valid config pointer.
 **
 ** \param [in] ConfigPtr   A pointer to ADC driver configuration.
 **
 */
extern FUNC(void, ADC_CODE) Adc_InitHw
(
  P2CONST(Adc_ConfigType, AUTOMATIC, ADC_APPL_CONST) ConfigPtr
);

/** \brief Adc_InitResultBuffer
 **
 ** Initializes the group to run with the given result buffer. The stream is also
 ** reset to the beginning.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **  - 'BufferPtr' must be a valid pointer.
 **
 ** \param [in] GroupConfigPtr  Config pointer of the group that shall be affected by the operation.
 ** \param [in] BufferPtr       Pointer to the result buffer.
 **
 */
extern FUNC(void, ADC_CODE) Adc_InitResultBuffer
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr,
  P2VAR(Adc_ValueGroupType,    AUTOMATIC, ADC_APPL_DATA)  BufferPtr
);

/** \brief Adc_IsAllTriggerEnabled
 **
 ** Returns that whether there is any group is on running.
 **
 ** \return  TRUE : At least one channel group is on-going.
 **          FALSE: All of channel groups are not on-going.
 **
 */
extern FUNC(boolean, ADC_CODE) Adc_IsAllTriggerEnabled(void);

/** \brief Adc_IsrGroupConversionFinished
 **
 ** Internal function called by ISRs to handle the finished group conversions
 ** or the finished DMA transfer of conversion data or DMA error.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \param [in] GroupConfigPtr   Config pointer of the group that shall be affected by the operation.
 **
 */
extern FUNC(void, ADC_CODE) Adc_IsrGroupConversionFinished
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr
);

/** \brief Adc_ReadGroupInternal
 **
 ** Reads the result registers or the result buffer, returns the values
 ** and performs the required state transition.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **  - 'ResultPtr' must be a valid pointer.
 **
 ** \param [in] GroupConfigPtr  Config pointer of the group that shall be affected by the operation.
 ** \param [in] GroupStatus     Current status for the specified ADC channel group.
 ** \param [out] ResultPtr      Pointer to the result buffer.
 **
 */
extern FUNC(void, ADC_CODE) Adc_ReadGroupInternal
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr,
  VAR(Adc_StatusType, AUTOMATIC) GroupStatus,
  P2VAR(Adc_ValueGroupType, AUTOMATIC, ADC_APPL_DATA) ResultPtr
);

/** \brief Adc_SetGroupNotification
 **
 ** Enables/disables the group notification. 
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \param [in] GroupConfigPtr  The configuration pointer of the group that is affected by
 **                              the operation.
 ** \param [in] EnableSetting   TRUE : Enable notification.
 **                             FALSE: Disable notification.
 **
 */
extern FUNC(void, ADC_CODE) Adc_SetGroupNotification
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr,
  VAR(boolean, AUTOMATIC) EnableSetting
);

/** \brief Adc_IsSwTriggerEnabled
 **
 ** Checks whether the request for starting the channel group conversion
 ** can be accepted.
 ** TRUE is returned if it is accepted. Otherwise FALSE is returned.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \return                      TRUE : The request is accepted.
 **                              FALSE: The request is NOT accepted.
 **
 ** \param [in] GroupConfigPtr   The configuration pointer of the group that is affected by the operation.
 **
 */
extern FUNC(boolean, ADC_CODE) Adc_IsSwTriggerEnabled
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr
);

/** \brief Adc_IsHwTriggerEnabled
 **
 ** Checks whether the request for enabling hw trigger in the channel group
 ** can be accepted.
 ** TRUE is returned if it is accepted. Otherwise FALSE is returned.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \return                      TRUE : The request is accepted.
 **                              FALSE: The request is NOT accepted.
 **
 ** \param [in] GroupConfigPtr   The configuration pointer of the group that is affected by the operation.
 **
 */
extern FUNC(boolean, ADC_CODE) Adc_IsHwTriggerEnabled
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr
);

/** \brief Adc_SetChannelEnable
 **
 ** This function is intended to enable/disable ADC channels and start/stop DMA for the group if used DMA.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \param [in] GroupConfigPtr   Config pointer of the group that shall be affected by the operation.
 ** \param [in] EnableSetting    Represent that the channel is enabled or disabled.
 **
 */
extern FUNC(void, ADC_CODE) Adc_SetChannelEnable
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr,
  VAR(boolean, AUTOMATIC) EnabledSetting
);

/** \brief Adc_SetSwTrigger
 **
 ** Triggers the SW trigger group described by GroupConfigPtr.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \param [in] GroupConfigPtr   Config pointer of the group that shall be affected by the operation.
 **
 */
extern FUNC(void, ADC_CODE) Adc_SetSwTrigger
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr
);

/** \brief Adc_GetTargetPowerStateInternal
 **
 ** Gets the target power state.
 **
 ** \return Target power state.
 **
 */
extern FUNC(Adc_PowerStateType, ADC_CODE) Adc_GetTargetPowerStateInternal(void);

/** \brief Adc_SetTargetPowerStateInternal
 **
 ** Sets the target power state.
 **
 ** PRECONDITIONS:
 **  - 'PowerState' must be a valid value.
 **
 ** \param [in] PowerState   Target power state.
 **
 */
extern FUNC(void, ADC_CODE) Adc_SetTargetPowerStateInternal
(
  VAR(Adc_PowerStateType, AUTOMATIC) PowerState
);

/** \brief Adc_GetCurrentPowerStateInternal
 **
 ** Gets the current power state.
 **
 ** \return Current power state.
 **
 */
extern FUNC(Adc_PowerStateType, ADC_CODE) Adc_GetCurrentPowerStateInternal(void);

/** \brief Adc_SetCurrentPowerStateInternal
 **
 ** Sets the current power state.
 **
 */
extern FUNC(void, ADC_CODE) Adc_SetCurrentPowerStateInternal(void);

/** \brief Adc_ChangeSamplingTimeInternal
 **
 ** Changes sampling time for an ADC channel.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **  - 'PhysicalChannel' must be a valid channel.
 **  - 'SamplingTime' must be a valid setting value.
 **
 ** \return                     E_OK    : sampling time changed
 **                             E_NOT_OK: request rejected
 **
 ** \param [in] GroupConfigPtr  A pointer to config for a group.
 ** \param [in] PhysicalChannel An ADC physical channel that its sampling time is changed.
 ** \param [in] SamplingTime    Sampling time that it is set for the specified ADC channel.
 **
 */
extern FUNC(Std_ReturnType, ADC_CODE) Adc_ChangeSamplingTimeInternal
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr,
  VAR(Adc_ChannelType, AUTOMATIC) PhysicalChannel,
  VAR(Adc_SamplingTimeType, AUTOMATIC) SamplingTime
);

/** \brief Adc_ClearChannelInterrupt
 **
 ** This function is used to clear the interrupt flag for the ADC channel
 ** which is specified by logical channel index.
 **
 ** \param [in] LogicalChannelConfigIndex    Index of logical channel config.
 **
 */
extern FUNC(void, ADC_CODE) Adc_ClearChannelInterrupt
(
  CONST(uint16, AUTOMATIC) LogicalChannelConfigIndex
);

/** \brief Adc_ClearChannelInterruptByBaseAddr
 **
 ** This function is used to clear the interrupt flag for the ADC channel
 ** which is specified by register address directly.
 **
 ** \param [in] EsarChannelBaseAddr    Base address for the ESAR channel.
 **
 */
extern FUNC(void, ADC_CODE) Adc_ClearChannelInterruptByBaseAddr
(
  VAR(uint32, AUTOMATIC) EsarChannelBaseAddr
);

/** \brief Adc_ClearChannelInterruptDmaByBaseAddr
 **
 ** This function is used to clear the interrupt flag for the DMA channel
 ** which is specified by register address directly.
 **
 ** \param [in] DmaChannelBaseAddr    Base address for the DMA channel.
 **
 */
extern FUNC(void, ADC_CODE) Adc_ClearChannelInterruptDmaByBaseAddr
(
  VAR(uint32, AUTOMATIC) DmaChannelBaseAddr
);

/** \brief Adc_InitDma
 **
 ** Initialize all DMA channels used to transfer ADC result data.
 **
 ** PRECONDITIONS:
 **  - 'ConfigPtr' must be a valid config pointer.
 **
 ** \param [in] ConfigPtr   Pointer to ADC driver configuration.
 **
 */
extern FUNC(void, ADC_CODE) Adc_InitDma
(
  P2CONST(Adc_ConfigType, AUTOMATIC, ADC_APPL_CONST) ConfigPtr
);

/** \brief Adc_SetCalibrationValueInternal
 **
 ** Sets alternate calibration values.
 ** And if paramter "Update" is true, triggers updating regular calibration 
 ** values with alternate calibration values.
 **
 ** PRECONDITIONS:
 **  - 'HwUnitConfigPtr' must be a valid HwUnit config pointer.
 **
 ** \param [in] HwUnitConfigPtr  Config pointer of the HwUnit that shall be affected by the operation.
 ** \param [in] Offset           Offset correction setting value.
 ** \param [in] Gain             Gain correction setting value.
 ** \param [in] Update           Update regular calibration values or not.
 **
 */
extern FUNC(void, ADC_CODE) Adc_SetCalibrationValueInternal
(
  P2CONST(Adc_HwUnitConfigType, AUTOMATIC, ADC_APPL_CONST) HwUnitConfigPtr,
  VAR(Adc_OffsetValueType, AUTOMATIC) Offset,
  VAR(Adc_GainValueType,   AUTOMATIC) Gain,
  VAR(boolean,             AUTOMATIC) Update
);

/** \brief Adc_GetCalibrationAlternateInternal
 **
 ** Gets alternate calibration values.
 **
 ** PRECONDITIONS:
 **  - 'HwUnitConfigPtr' must be a valid HwUnit config pointer.
 **
 ** \param [in]  HwUnitConfigPtr  Config pointer of the HwUnit that shall be affected by the operation.
 ** \param [out] OffsetPtr        Buffer pointer stored offset value of alternate calibration.
 ** \param [out] GainPtr          Buffer pointer stored gain value of alternate calibration.
 **
 */
extern FUNC(void, ADC_CODE) Adc_GetCalibrationAlternateInternal
(
  P2CONST(Adc_HwUnitConfigType, AUTOMATIC, ADC_APPL_CONST) HwUnitConfigPtr,
  P2VAR(Adc_OffsetValueType,    AUTOMATIC, ADC_APPL_DATA)  OffsetPtr,
  P2VAR(Adc_GainValueType,      AUTOMATIC, ADC_APPL_DATA)  GainPtr
);

/** \brief Adc_GetCalibrationInternal
 **
 ** Gets regular calibration values.
 **
 ** PRECONDITIONS:
 **  - 'HwUnitConfigPtr' must be a valid HwUnit config pointer.
 **
 ** \param [in]  HwUnitConfigPtr  Config pointer of the HwUnit that shall be affected by the operation.
 ** \param [out] OffsetPtr        Buffer pointer stored offset value of regular calibration.
 ** \param [out] GainPtr          Buffer pointer stored gain value of regular calibration.
 **
 */
extern FUNC(void, ADC_CODE) Adc_GetCalibrationInternal
(
  P2CONST(Adc_HwUnitConfigType, AUTOMATIC, ADC_APPL_CONST) HwUnitConfigPtr,
  P2VAR(Adc_OffsetValueType,    AUTOMATIC, ADC_APPL_DATA)  OffsetPtr,
  P2VAR(Adc_GainValueType,      AUTOMATIC, ADC_APPL_DATA)  GainPtr
);

/** \brief Adc_ChangeCalibrationChannelInternal
 **
 ** Changes all input signals of the group to the specified calibration measurement analog signal.
 **
 ** PRECONDITIONS:
 **  - 'GroupConfigPtr' must be a valid group config pointer.
 **
 ** \param [in] GroupConfigPtr  Config pointer of the group that shall be affected by the operation.
 ** \param [in] Signal          Calibration measurement analog signal.
 **
 */
extern FUNC(void, ADC_CODE) Adc_ChangeCalibrationChannelInternal
(
  P2CONST(Adc_GroupConfigType, AUTOMATIC, ADC_APPL_CONST) GroupConfigPtr,
  VAR(Adc_SignalType, AUTOMATIC) Signal
);

/** \brief  Adc_EnterCriticalSection
 **
 ** This function is process of entering critical section.
 ** Calls SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_0.
 **
 */
extern FUNC(void, ADC_CODE) Adc_EnterCriticalSection(void);

/** \brief Adc_ExitCriticalSection
 **
 ** This function is process of exiting critical section.
 ** Calls SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_0.
 **
 */
extern FUNC(void, ADC_CODE) Adc_ExitCriticalSection(void);

#define ADC_STOP_SEC_CODE_ASIL_B
#include <Adc_MemMap.h>

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/

#endif /* #ifndef ADC_INTERNAL_H_INCLUDED */

/*==================[end of file]===========================================*/
