#ifndef GPT_PUBLIC_H
#define GPT_PUBLIC_H

/** \brief AUTOSAR Gpt GPT Driver
 **
 ** This file contains the implementation of the AUTOSAR module Gpt type
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Gpt_Version.h>         /* GPT driver Version check type defines */

/*==================[macros]================================================*/
/* AUTOSAR version number check */
#if (GPT_AR_RELEASE_MAJOR_VERSION != 4U)               /* Autosar release major version check */
#error "AUTOSAR AR release major number mismatch"
#endif

#if (GPT_AR_RELEASE_MINOR_VERSION != 2U)              /* Autosar release minor version check */
#error "AUTOSAR AR release minor number mismatch"
#endif

#if (GPT_AR_RELEASE_REVISION_VERSION != 2U)           /* Autosar release revision version check */
#error "AUTOSAR AR release revision number mismatch"
#endif

#if (GPT_SW_MAJOR_VERSION != 1U)                      /* Software major version check */
#error "AUTOSAR SW major number mismatch"
#endif

#if (GPT_SW_MINOR_VERSION != 13U)                      /* Software minor version check */
#error "AUTOSAR SW minor number mismatch"
#endif

#if !(GPT_SW_PATCH_VERSION >= 0U)                      /* Software patch version check */
#error "AUTOSAR SW patch version number mismatch"
#endif


/** \brief size optimized boolean
 **
 ** Gpt use uint8 for boolean represantation
*/
#define GPT_FALSE                         0U
#define GPT_TRUE                          1U

/** \brief defines for working with channelConfigFlags
**
** (new) defines, defining masks and symbolic names for the values of the bits in the flag field
** can be used instead
*/
/* configuration flag */
/* bit 0 = channel mode */
#define GPT_MODE_ONESHOT                  0x00U    /* one shot mode                     */
#define GPT_MODE_CONTINUOUS               0x01U    /* the continuous mode               */
/* bit 1 = wakeup source enabled */
#define GPT_WAKEUPSOURCE_FALSE            0x00U    /* the disable wakeup source         */
#define GPT_WAKEUPSOURCE_TRUE             0x02U    /* the enable wakeup source          */
/* bit 2 = debug enabled */
#define GPT_DEBUG_FALSE                   0x00U    /* channel debug is disabled         */
#define GPT_DEBUG_TRUE                    0x04U    /* channel debug is enabled          */
#define GPT_DEBUG_BIT_POSITION            0x02U    /* channel debug bit position        */
/* bit 3 4 = trigger output selection */
#define GPT_NO_TR_OUT                     0x00U    /* disable trigger out               */
#define GPT_TR_OUT0_EN                    0x08U    /* the enable trigger out0           */
#define GPT_TR_OUT1_EN                    0x10U    /* the enable trigger out1           */
/* bit 5 6 = Gpt PredefTimer type */
#define GPT_PREDEF_TIMER_BIT_POSITION     0x05U    /* Gpt Predef Timer bit position     */
#define GPT_PREDEFTIMER_MASK              0x60U    /* Gpt PredefTimer mask bit          */

/* Status flag */
#define GPT_NOTIFY_EN                     0x02U    /* the enable notification function  */
#define GPT_WAKEUP_EN                     0x04U    /* the enable wakeup capability      */

/* Defines interrupt occurred flag for Gpt_ChannelInterruptOccurredType */
#define GPT_NO_INTERRUPT_DETECT           0x00U    /* state of no interrupt detected    */
#define GPT_INTERRUPT_DETECT              0x01U    /* state of interrupt detected       */

/* Defines source clock for Gpt_ClockType */
#define GPT_CLK_EXT                       0x00U    /* external clock                    */
#define GPT_CLK_INT                       0x01U    /* internal clock                    */

/* Defines return value for Gpt_ReturnType */
#define GPT_NOT_OK                        0x00U    /* return value of not OK            */
#define GPT_OK                            0x01U    /* return value of OK                */

/* Defines state of driver for Gpt_DriverStateValueType */
#define GPT_DRIVER_UNINITIALIZE           0x00U    /* driver state of uninitialized     */
#define GPT_DRIVER_INITIALIZE             0x01U    /* driver state of initialized       */

/* Defines state values for Gpt_ChannelStateValueType */
#define GPT_STATE_UNINITIALIZE            0x00U    /* channel state of uninitialized    */
#define GPT_STATE_INITIALIZED             0x01U    /* channel state of initialization   */
#define GPT_STATE_RUNNING                 0x02U    /* channel state of running          */
#define GPT_STATE_STOPPED                 0x03U    /* channel state of stopped          */
#define GPT_STATE_EXPIRED                 0x04U    /* channel state of expired          */

/* Defines divider value GPT pre-scaling divider */
#define GPT_PRESCALING_DIVIDE_NONE        0U       /* Impossible divider                */
#define GPT_HALF_DIVIDER                  2U       /* Half divider value                */
#define GPT_PRESCALING_DIVIDE_BY_1        1U       /* Pre-scalling is divide by 1       */
#define GPT_PRESCALING_DIVIDE_BY_2        2U       /* Pre-scalling is divide by 2       */
#define GPT_PRESCALING_DIVIDE_BY_4        4U       /* Pre-scalling is divide by 4       */
#define GPT_PRESCALING_DIVIDE_BY_8        8U       /* Pre-scalling is divide by 8       */
#define GPT_PRESCALING_DIVIDE_BY_16       16U      /* Pre-scalling is divide by 16      */
#define GPT_PRESCALING_DIVIDE_BY_32       32U      /* Pre-scalling is divide by 32      */
#define GPT_PRESCALING_DIVIDE_BY_64       64U      /* Pre-scalling is divide by 64      */
#define GPT_PRESCALING_DIVIDE_BY_128      128U     /* Pre-scalling is divide by 128     */

/* Timer width */
#define GPT_TIMER_WIDTH_16                16U      /* 16bit timer width                 */
#define GPT_TIMER_WIDTH_32                32U      /* 32bit timer width                 */

/* Defines invalid start trigger register value for Predef Timer. */
#define GPT_PREDEF_TIMER_START_TRIGGER_INVALID               0x00U    /* invalid start trigger register value */

/* Defines invalid identifier of channel. */
#define GPT_INVALID_CHANNELID                                0xFFFFU  /* invalid channel identifier */


/*==================[type definitions]======================================*/

/* Gpt_ChannelType defines numeric identifier of the GPT channel. */
typedef uint16 Gpt_ChannelType;

/* Gpt_PredefTimerIdType defines numeric identifier of the GPT Predef Timer. */
typedef uint16  Gpt_PredefTimerIdType;

/* Gpt_ChannelStateFlagType defines notification/wakeup flag of each channel. */
typedef uint8 Gpt_ChannelStateFlagType;

/* Gpt_ValueType is the type for reading and setting the timer values (in number of ticks). */
typedef uint32 Gpt_ValueType;

/** \brief Gpt_ModeType holds one of the two values GPT_MODE_SLEEP and GPT_MODE_NORMAL.
 **
 ** Gpt_ModeType is defined as an enum type so that the symbols are available in the
 ** debugger. It is only ever used as a parameter, so the size of the variable is
 ** unimportant. The two values are deliberately set apart and non-zero so that
 ** the most common errors in API calls can be detected.
*/
typedef enum
{
  GPT_MODE_NORMAL = 3U,    /* Normal operation mode of the GPT. */
  GPT_MODE_SLEEP  = 5U     /* Operation for reduced power operation mode. In sleep mode only wakeup capable channels are available. */
} Gpt_ModeType;

/* Gpt_PredefTimerType  defines an enum type GPT Predef Timers tick duration. */
typedef enum
{
  GPT_PREDEF_TIMER_1US_16BIT   = 0U,     /* tick duration 1us and range 16bit   */
  GPT_PREDEF_TIMER_1US_24BIT   = 1U,     /* tick duration 1us and range 24bit   */
  GPT_PREDEF_TIMER_1US_32BIT   = 2U,     /* tick duration 1us and range 32bit   */
  GPT_PREDEF_TIMER_100US_32BIT = 3U      /* tick duration 100us and range 32bit */
} Gpt_PredefTimerType;

/* Gpt_ChannelInterruptOccurredType defines interrupt occurred flag. */
typedef uint8 Gpt_ChannelInterruptOccurredType;

/* Gpt_ChannelStateValueType defines state values of each channel. */
typedef uint8 Gpt_ChannelStateValueType;

/* Gpt_HwTimerType defines counter width for peripheral. */
typedef uint8 Gpt_HwTimerType;

/* Gpt_ClockType defines source clock. */
typedef uint8 Gpt_ClockType;

/* Gpt_ReturnType defines return value. */
typedef uint8 Gpt_ReturnType;

/* Gpt_InputTriggerType defines GPT Input Trigger type. */
typedef uint8 Gpt_InputTriggerType;

/* Gpt_Frequency Type. */
typedef uint32 Gpt_ClkFrequencyType;

/* Gpt_NotificationFunctionType defines function pointer for the notification functions. */
typedef P2FUNC(void, TYPEDEF, Gpt_NotificationFunctionType)(void);

/* Gpt_DriverStateValueType defines state of driver. */
typedef uint8 Gpt_DriverStateValueType;

/* Gpt_DriverStateType is structure of driver state and mode. */
typedef struct
{
  Gpt_ModeType               driverStateFlags;    /* status of sleep          */
  Gpt_DriverStateValueType   driverInitialised;   /* status of initialization */
} Gpt_DriverStateType;

/* Gpt_ChannelStateType is structure of channel's state */
typedef struct
{
  Gpt_ValueType                      interval;                  /* interval time                        */
  Gpt_ClkFrequencyType               frequency;                 /* tick frequency                       */
  Gpt_ChannelStateValueType          state;                     /* status of channel                    */
  Gpt_ChannelInterruptOccurredType   channelInterruptOccurred;  /* status of interrupt                  */
  Gpt_ChannelStateFlagType           channelStateFlags;         /* status of notification/wakeup        */
  uint8                              prescaler;                 /* the current prescaler register value */
} Gpt_ChannelStateType;

/* Gpt_PredefTimerStateType is structure of PredefTimer's state. */
typedef struct
{
  Gpt_ClkFrequencyType               frequency;                 /* tick frequency                       */
  Gpt_ChannelStateValueType          state;                     /* status of PredefTimer                */
  uint8                              prescaler;                 /* the current prescaler register value */
} Gpt_PredefTimerStateType;

typedef struct Gpt_ChannelConfigStruct Gpt_ChannelConfigType;

typedef P2FUNC(void,           GPT_CODE, Gpt_drvVoidFct_t             )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr);
typedef P2FUNC(void,           GPT_CODE, Gpt_drvVoidAndPassValueFct_t )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr, Gpt_ValueType Interval);
typedef P2FUNC(void,           GPT_CODE, Gpt_drvVoidAndPassBoolFct_t  )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr, boolean Operation);
typedef P2FUNC(void,           GPT_CODE, Gpt_drvVoidAndPassCharFct_t  )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr, uint8 Prescaler);
typedef P2FUNC(void,           GPT_CODE, Gpt_drvVoidAndPassChar2Fct_t )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr, Gpt_InputTriggerType PredefTimerStartTrigger);
typedef P2FUNC(void,           GPT_CODE, Gpt_drvVoidAndPassChar3Fct_t )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr, Gpt_InputTriggerType PredefTimerStartTrigger, boolean Operation);
typedef P2FUNC(Gpt_ValueType,  GPT_CODE, Gpt_drvValueFctAndPassValue_t)(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr, Gpt_ValueType Interval);
typedef P2FUNC(Gpt_ValueType,  GPT_CODE, Gpt_drvValueFct_t            )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr);
typedef P2FUNC(Gpt_ReturnType, GPT_CODE, Gpt_drvResultFct_t           )(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr);
typedef P2FUNC(Gpt_ReturnType, GPT_CODE, Gpt_drvResultFctAndPassInfo_t)(P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST) ChannelCfgPtr, P2CONST(Gpt_DriverStateType, AUTOMATIC, GPT_APPL_DATA)  DriverStatusPtr, P2CONST(Gpt_ChannelStateType, AUTOMATIC, GPT_APPL_DATA) ChannelStatusPtr, Gpt_InputTriggerType PredefTimerStartTrigger);

/* Gpt_TcpwmDrvFctTable_t defins function table structure. */
typedef struct Gpt_drvFctTable_s
{
  Gpt_drvVoidFct_t                 drvCancelFct;                     /* cancel timer function                */
  Gpt_drvResultFct_t               drvClearInterruptFlagFct;         /* clear interrupt flag function        */
  Gpt_drvResultFctAndPassInfo_t    drvCheckRegisterFct;              /* check register function              */
  Gpt_drvVoidFct_t                 drvDeInitFct;                     /* de-initialize channel function       */
  Gpt_drvVoidAndPassBoolFct_t      drvSetInterrupt;                  /* enable or disable interrupt function */
  Gpt_drvValueFct_t                drvGetTimeElapsedContinuousFct;   /* get elapsed timer function           */
  Gpt_drvValueFctAndPassValue_t    drvGetTimeElapsedOneShotFct;      /* get elapsed timer function           */
  Gpt_drvValueFctAndPassValue_t    drvGetTimeRemainContinuousFct;    /* get remaining timer function         */
  Gpt_drvValueFctAndPassValue_t    drvGetTimeRemainOneShotFct;       /* get remaining timer function         */
  Gpt_drvVoidAndPassChar2Fct_t     drvInitFct;                       /* initialize channel function          */
  Gpt_drvVoidAndPassValueFct_t     drvStartFct;                      /* start timer function                 */
  Gpt_drvVoidAndPassCharFct_t      drvSetPrescalerFct;               /* set prescaler function               */
  Gpt_drvVoidAndPassChar3Fct_t     drvSetStartTriggerFct;            /* set start trigger function           */
  Gpt_drvResultFct_t               drvCheckRunningFct;               /* check running state function         */
} Gpt_TcpwmDrvFctTable_t;

/* Gpt_GetTblType defines function defination of get table pointer. */
typedef P2FUNC(P2CONST(Gpt_TcpwmDrvFctTable_t, AUTOMATIC, GPT_CONST), GPT_CODE, Gpt_GetTblType)(void);

/** \brief Gpt_ChannelConfigType holds the configuration for a single channel.
 ** This structure holds a channel's configuration:
 ** in order to reinforce the connection between the macros and the structure.
*/
struct Gpt_ChannelConfigStruct
{
  volatile CONSTP2VAR(uint32, GPT_CONST, REGSPACE)  BaseAddrPtr;        /* register base address for each channel              */
  Gpt_GetTblType                                    getFuncTable;       /* function pointer to get each function table pointer */
  CONST(Gpt_NotificationFunctionType, GPT_CONST)    notifyFunction;     /* pointer of notification function                    */
  CONST(Gpt_ValueType, GPT_CONST)                   timerMax;           /* maximum value of timer                              */
  CONST(Gpt_ClkFrequencyType, GPT_CONST)            TickFrequency;      /* GptChannelTickFrequency                             */
  CONST(Gpt_InputTriggerType, GPT_CONST)            InputTrigger;       /* input trigger                                       */
  CONST(Gpt_ClockType, GPT_CONST)                   SourceClock;        /* source clock                                        */
  CONST(Gpt_HwTimerType, GPT_CONST)                 TimerWide;          /* used peripheral timer with width of timer counter   */
  CONST(uint8, GPT_CONST)                           ChannelConfigFlags; /* mode flag                                           */
  CONST(uint8, GPT_CONST)                           Prescaler;          /* prescaler                                           */
};

/** \brief Gpt_ConfigType is the type associated with the config data structure.
 **
 ** This data type is public, but the underlying structure is private.
*/
typedef struct
{
  P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST)     ChannelsCfgPtr;                   /* channel's configuration information                 */
  P2CONST(Gpt_ChannelConfigType, AUTOMATIC, GPT_CONST)     PredefTimersCfgPtr;               /* Predefine Timer channel's configuration information */
  P2CONST(uint32, AUTOMATIC, GPT_CONST)                    WakeupSourcePtr;                  /* array of wakeup source.                             */
  P2CONST(Gpt_ChannelType, AUTOMATIC, GPT_CONST)           ResAssignedChannelidPtr;          /* pointer to channel id list of HW resource           */
  Gpt_ChannelType                                          nChannels;                        /* number of channel                                   */
  uint8                                                    nPredefTimers;                    /* number of Predefine Timer channel                   */
  uint8                                                    PredefTimerStartTriggerSelect;    /* Synchronous start trigger of Predefine Timers       */
} Gpt_ConfigType;

/* Structure type of MXTCPWM COUNTER register map. */
typedef struct
{
  uint32 CTRL;           /* Counter control register                       */
  uint32 STATUS;         /* Counter status register                        */
  uint32 COUNTER;        /* Counter count register                         */
  uint32 Dummy1;         /* reserved                                       */
  uint32 CC0;            /* Counter compare/capture 0 register             */
  uint32 CC0_BUFF;       /* Counter buffered compare/capture 0 register    */
  uint32 CC1;            /* Counter compare/capture 1 register             */
  uint32 CC1_BUFF;       /* Counter buffered compare/capture 1 register    */
  uint32 PERIOD;         /* Counter period register                        */
  uint32 PERIOD_BUFF;    /* Counter buffered period register               */
  uint32 LINE_SEL;       /* Counter line selection register                */
  uint32 LINE_SEL_BUFF;  /* Counter buffered line selection register       */
  uint32 DT;             /* Counter PWM dead time register                 */
  uint32 Dummy2;         /* reserved                                       */
  uint32 Dummy3;         /* reserved                                       */
  uint32 Dummy4;         /* reserved                                       */
  uint32 TR_CMD;         /* Counter trigger command register               */
  uint32 TR_IN_SEL0;     /* Counter input trigger selection register 0     */
  uint32 TR_IN_SEL1;     /* Counter input trigger selection register 1     */
  uint32 TR_IN_EDGE_SEL; /* Counter input trigger edge selection register  */
  uint32 TR_PWM_CTRL;    /* Counter trigger PWM control register           */
  uint32 TR_OUT_SEL;     /* Counter output trigger selection register      */
  uint32 Dummy5;         /* reserved                                       */
  uint32 Dummy6;         /* reserved                                       */
  uint32 Dummy7;         /* reserved                                       */
  uint32 Dummy8;         /* reserved                                       */
  uint32 Dummy9;         /* reserved                                       */
  uint32 Dummy10;        /* reserved                                       */
  uint32 INTR;           /* Interrupt request register                     */
  uint32 INTR_SET;       /* Interrupt set request register                 */
  uint32 INTR_MASK;      /* Interrupt mask register                        */
  uint32 INTR_MASKED;    /* Interrupt masked request register              */
} Gpt_CTimerType;


/*==================[external function declarations]========================*/
/*==================[internal function declarations]========================*/
/*==================[external constants]====================================*/
/*==================[internal constants]====================================*/
/*==================[external data]=========================================*/
/*==================[internal data]=========================================*/
/*==================[external function definitions]=========================*/
/*==================[internal function definitions]=========================*/

#endif
/*==================[end of file]===========================================*/
