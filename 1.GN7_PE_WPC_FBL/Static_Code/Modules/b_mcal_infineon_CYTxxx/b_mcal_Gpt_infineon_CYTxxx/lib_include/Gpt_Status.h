#ifndef GPT_STATUS_H
#define GPT_STATUS_H

/** \brief AUTOSAR Gpt GPT Driver
 **
 ** This file defines interface for accessing to staus data.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Gpt_Public.h>          /* Module public types */

/*==================[macros]================================================*/
/*==================[type definitions]======================================*/
/*==================[external function declarations]========================*/
#define GPT_START_SEC_CODE_ASIL_B
#include <Gpt_MemMap.h>

/** \brief Gpt_ReadChannelInterruptOccurred()
 **
 ** This function reads the interrupt's status of the specified channel
 ** from the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return the interrupt's status of the specified channel.
 **/
extern FUNC(Gpt_ChannelInterruptOccurredType, GPT_CODE) Gpt_ReadChannelInterruptOccurred(Gpt_ChannelType Channel);

/** \brief Gpt_ReadChannelInterval()
 **
 ** This function reads the interval time of the specified channel
 ** from the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return the interval time of the specified channel.
 **/
extern FUNC(Gpt_ValueType, GPT_CODE) Gpt_ReadChannelInterval(Gpt_ChannelType Channel);

/** \brief Gpt_ReadChannelTickFrequency()
 **
 ** This function reads the tick frequency of the specified channel
 ** from the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return the tick frequency of the specified channel.
 **/
extern FUNC(Gpt_ClkFrequencyType, GPT_CODE) Gpt_ReadChannelTickFrequency(Gpt_ChannelType Channel);

/** \brief Gpt_ReadChannelPrescalerValue()
 **
 ** This function reads the prescaler value of the specified channel
 ** from the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return the prescaler value of the specified channel.
 **/
 
extern FUNC(uint8, GPT_CODE) Gpt_ReadChannelPrescalerValue(Gpt_ChannelType Channel);
/** \brief Gpt_ReadChannelStateFlag()
 **
 ** This function reads the notification's status of the specified channel
 ** from the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 **
 ** \return the channel state flag.
 **/
extern FUNC(Gpt_ChannelStateFlagType, GPT_CODE) Gpt_ReadChannelStateFlag(Gpt_ChannelType Channel);

/** \brief Gpt_ReadPredefTimerTickFrequency()
 **
 ** This function reads the tick frequency of the specified PredefTimer
 ** from the variable of Gpt_PredefTimerState.
 **
 ** \param[in] PredefTimerId  Numeric identifier of the GPT Predef Timer.
 **
 ** \return the tick frequency of the specified PredefTimer.
 **/
extern FUNC(Gpt_ClkFrequencyType, GPT_CODE) Gpt_ReadPredefTimerTickFrequency(Gpt_PredefTimerIdType PredefTimerId);

/** \brief Gpt_ReadPredefTimerPrescalerValue()
 **
 ** This function reads the prescaler value of the specified Predef Timer
 ** from the variable of Gpt_PredefTimerState.
 **
 ** \param[in] PredefTimerId  Numeric identifier of the GPT Predef Timer.
 **
 ** \return the prescaler value of the specified PredefTimer.
 **/
extern FUNC(uint8, GPT_CODE) Gpt_ReadPredefTimerPrescalerValue(Gpt_PredefTimerIdType PredefTimerId);

/** \brief Gpt_ReadChannelStatus()
 **
 ** This function reads the channel's status of the specified channel.
 ** from the variable of Gpt_ChannelState.
 **
 ** \param[in] ChannelNumber  Numeric identifier of the GPT channel.
 **
 ** \return the channel's status of the specified channel.
 **/
extern FUNC(Gpt_ChannelStateValueType, GPT_CODE) Gpt_ReadChannelStatus(Gpt_ChannelType ChannelNumber);

/** \brief Gpt_ReadPredefTimerStatus()
 **
 ** This function reads the PredefTimer's status of the specified Predef Timer
 ** from the variable of Gpt_PredefTimerState.
 **
 ** \param[in] PredefTimerId  Numeric identifier of the GPT Predef Timer.
 **
 ** \return the PredefTimer's status of the specified PredefTimer.
 **/
extern FUNC(Gpt_ChannelStateValueType, GPT_CODE) Gpt_ReadPredefTimerStatus(Gpt_PredefTimerIdType PredefTimerId);

/** \brief Gpt_ReadDriverInitialised()
 **
 ** This function reads the driver's initialization status of the driver
 ** from the variable of Gpt_DriverState.
 **
 ** \return the driver's initialization status of the driver.
 **/
extern FUNC(Gpt_DriverStateValueType, GPT_CODE) Gpt_ReadDriverInitialised(void);

/** \brief Gpt_ReadDriverStatus()
 **
 ** This function reads the driver's sleep status of the driver
 ** from the variable of Gpt_DriverState.
 **
 ** \return the driver status.
 **/
extern FUNC(Gpt_ModeType, GPT_CODE) Gpt_ReadDriverStatus(void);

/** \brief Gpt_SetChannelInterruptOccurred()
 **
 ** This function sets the interrupt's status of the specified channel
 ** to the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Value    Value of interrupt status.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetChannelInterruptOccurred(Gpt_ChannelType Channel, Gpt_ChannelInterruptOccurredType Value);

/** \brief Gpt_SetChannelInterval()
 **
 ** This function sets the interval time of the specified channel
 ** to the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Value    Value of the channel interval time.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetChannelInterval(Gpt_ChannelType Channel, Gpt_ValueType Value);

/** \brief Gpt_SetChannelTickFrequency()
 **
 ** This function sets the tick frequency of the specified channel
 ** to the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Value    A value for the tick frequency.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetChannelTickFrequency(Gpt_ChannelType Channel, Gpt_ClkFrequencyType  Value);

/** \brief Gpt_SetPredefTimerTickFrequency()
 **
 ** This function sets the tick frequency of the specified Predef Timer
 ** to the variable of Gpt_PredefTimerState.
 **
 ** \param[in] PredefTimerId  Numeric identifier of the GPT Predef Timer.
 ** \param[in] Value        A value for the tick frequency.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetPredefTimerTickFrequency(Gpt_PredefTimerIdType PredefTimerId, Gpt_ClkFrequencyType Value);

/** \brief Gpt_SetChannelPrescalerValue()
 **
 ** This function sets the prescaler value of the specified channel
 ** to the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel  Numeric identifier of the GPT channel.
 ** \param[in] Value    A value for prescaler.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetChannelPrescalerValue(Gpt_ChannelType Channel, uint8 Value);

/** \brief Gpt_SetPredefTimerPrescalerValue()
 **
 ** This function sets the tick frequency of the specified Predef Timer
 ** to the variable of Gpt_PredefTimerState.
 **
 ** \param[in] PredefTimerId  Numeric identifier of the GPT Predef Timer.
 ** \param[in] Value        A value for prescaler.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetPredefTimerPrescalerValue(Gpt_PredefTimerIdType PredefTimerId, uint8 Value);

/** \brief Gpt_SetChannelStateFlag()
 **
 ** This function sets the notification's status of the specified channel
 ** to the variable of Gpt_ChannelState.
 ** This function runs the bit write operation of AND, if Operation is TRUE.
 ** This function runs the bit write operation of OR, if Operation is FALSE.
 **
 ** \param[in] Channel   Numeric identifier of the GPT channel.
 ** \param[in] Value     Value of channel state flag.
 ** \param[in] Operation GPT_TRUE : This function runs the bit write operation of AND.
 **                      GPT_FALSE : This function runs the bit write operation of OR.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetChannelStateFlag(Gpt_ChannelType Channel, Gpt_ChannelStateFlagType Value, boolean Operation);

/** \brief Gpt_SetChannelStatus()
 **
 ** This function sets the channel's status of the specified channel
 ** to the variable of Gpt_ChannelState.
 **
 ** \param[in] Channel   Numeric identifier of the GPT channel.
 ** \param[in] Value     Value of the channel's state.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetChannelStatus(Gpt_ChannelType Channel, Gpt_ChannelStateValueType Value);

/** \brief Gpt_SetPredefTimerStatus()
 **
 ** This function sets the PredefTimer's status of the specified Predef Timer
 ** to the variable of Gpt_PredefTimerState.
 **
 ** \param[in] PredefTimerId   Numeric identifier of the GPT Predef Timer.
 ** \param[in] Value         A value for the PredefTimer's status.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetPredefTimerStatus(Gpt_PredefTimerIdType PredefTimerId, Gpt_ChannelStateValueType Value);

/** \brief Gpt_SetDriverInitialised()
 **
 ** This function sets the driver's initialization status of the driver
 ** to the variable of Gpt_DriverState.
 **
 ** \param[in] Value  Value of driver initialization flag.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetDriverInitialised(Gpt_DriverStateValueType Value);

/** \brief Gpt_SetDriverStatus()
 **
 ** This function sets the driver's sleep status of the driver
 ** to the variable of Gpt_DriverState.
 **
 ** \param[in] Value  Value of driver status.
 **/
extern FUNC(void, GPT_CODE) Gpt_SetDriverStatus(Gpt_ModeType Value);

#define GPT_STOP_SEC_CODE_ASIL_B
#include <Gpt_MemMap.h>

/*==================[internal function declarations]========================*/
/*==================[external constants]====================================*/
/*==================[internal constants]====================================*/
/*==================[external data]=========================================*/
/*==================[internal data]=========================================*/
/*==================[external function definitions]=========================*/
/*==================[internal function definitions]=========================*/

#endif
/*==================[end of file]===========================================*/
