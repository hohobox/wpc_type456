/** \brief AUTOSAR Fee Flash EEPROM Emulation
 **
 ** This file contains or includes all external identifiers of the
 ** AUTOSAR module Fee.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-FEE42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
*/

#ifndef FEE_H_INCLUDED
#define FEE_H_INCLUDED


/*****************************************************************************/
/* Include files                                                             */
/*****************************************************************************/
#include "Std_Types.h"
#include "Fee_Cfg.h"
#include "Fee_Version.h"
#include "Fee_Types.h"

#if ( FEE_DEV_ERROR_DETECT == STD_ON )
#include "Det.h"
#endif

/*****************************************************************************/
/* Global pre-processor symbols/macros ('#define')                           */
/*****************************************************************************/
/* DET Error */
#define FEE_E_UNINIT                 ((uint8)0x01)
#define FEE_E_INVALID_BLOCK_NO       ((uint8)0x02)
#define FEE_E_INVALID_BLOCK_OFS      ((uint8)0x03)
#define FEE_E_PARAM_POINTER          ((uint8)0x04)
#define FEE_E_INVALID_BLOCK_LEN      ((uint8)0x05)
#define FEE_E_BUSY                   ((uint8)0x06)
#define FEE_E_BUSY_INTERNAL          ((uint8)0x07)
#define FEE_E_INVALID_CANCEL         ((uint8)0x08)
#define FEE_E_INIT_FAILED            ((uint8)0x09)

/* Callout Error */
#define FEE_E_HARDWARE_ERROR_OCCURRED            ((uint8)0x10)
#define FEE_E_TIMEOUT_ERROR_OCCURRED             ((uint8)0x11)
#define FEE_E_IMMEDIATEDATASPACE_UNAVAILABLE     ((uint8)0x12)
#define FEE_E_NO_ERROR                           ((uint8)0x13)
#define FEE_E_BLOCKID_UNMATCHED_ERROR_OCCURRED   ((uint8)0x14)
#define FEE_E_BLOCKSIZE_UNMATCHED_ERROR_OCCURRED ((uint8)0x15)
#define FEE_E_1BIT_ECC_ERROR_OCCURRED            ((uint8)0x16)
#define FEE_E_2BIT_ECC_ERROR_OCCURRED            ((uint8)0x17)

#define FEE_INVALID_BLOCK_NO         ((uint16)0xFFFF)

#define FEE_INIT_ID                  ((uint8)0x00)
#define FEE_SETMODE_ID               ((uint8)0x01)
#define FEE_READ_ID                  ((uint8)0x02)
#define FEE_WRITE_ID                 ((uint8)0x03)
#define FEE_CANCEL_ID                ((uint8)0x04)
#define FEE_GETSTATUS_ID             ((uint8)0x05)
#define FEE_GETJOBRESULT_ID          ((uint8)0x06)
#define FEE_INVALIDATEBLOCK_ID       ((uint8)0x07)
#define FEE_GETVERSIONINFO_ID        ((uint8)0x08)
#define FEE_ERASEIMMEDIATEBLOCK_ID   ((uint8)0x09)
#define FEE_JOBENDNOTIFICATION_ID    ((uint8)0x10)
#define FEE_JOBERRORNOTIFICATION_ID  ((uint8)0x11)
#define FEE_MAINFUNCTION_ID          ((uint8)0x12)
#define FEE_CLEAR_ID                 ((uint8)0x30)
#define FEE_GETREMAININGPAGES_ID     ((uint8)0x31)
#define FEE_CLEANUPANDERASE_ID       ((uint8)0x33)
#define FEE_SETCYCLEMODE_ID          ((uint8)0x34)
#define FEE_BLANKCHECK_ID            ((uint8)0x35)


/*****************************************************************************/
/* Global type definitions ('typedef')                                       */
/*****************************************************************************/

/*****************************************************************************/
/* Global variable declarations ('extern', definition in C source)           */
/*****************************************************************************/

/*****************************************************************************/
/* Global function prototypes ('extern', definition in C source)             */
/*****************************************************************************/
#define FEE_START_SEC_CODE_ASIL_B
#include "Fee_MemMap.h"

extern FUNC(void, FEE_CODE) Fee_Cancel(void);


#if ( FEE_CLEANUP_AND_ERASE_API == STD_ON )
extern FUNC(Std_ReturnType, FEE_CODE) Fee_CleanupAndErase(void);
#endif /* (FEE_CLEANUP_AND_ERASE_API == STD_ON) */


#if ( FEE_USE_CONFIG_EX == STD_ON && FEE_CLEANUP_AND_ERASE_API == STD_ON )
extern FUNC(Std_ReturnType, FEE_CODE) Fee_CleanupAndEraseEx(void);
#endif /* (FEE_USE_CONFIG_EX == STD_ON && FEE_CLEANUP_AND_ERASE_API == STD_ON) */


extern FUNC(Std_ReturnType, FEE_CODE) Fee_EraseImmediateBlock(
  VAR(uint16, AUTOMATIC) BlockNumber);


extern FUNC(MemIf_StatusType, FEE_CODE) Fee_GetStatus(void);


extern FUNC(MemIf_JobResultType, FEE_CODE) Fee_GetJobResult(void);


#if ( FEE_VERSION_INFO_API == STD_ON )
extern FUNC(void, FEE_CODE) Fee_GetVersionInfo(
  P2VAR(Std_VersionInfoType, AUTOMATIC, FEE_APPL_DATA) VersionInfoPtr);
#endif /* (FEE_VERSION_INFO_API == STD_ON) */


extern FUNC(void, FEE_CODE) Fee_Init(
  P2CONST(Fee_ConfigType, AUTOMATIC, FEE_APPL_CONST) ConfigPtr);


extern FUNC(Std_ReturnType, FEE_CODE) Fee_InvalidateBlock(
  VAR(uint16, AUTOMATIC) BlockNumber);


#if defined( FEE_DECLARATION_MAINFUNCTION )
extern FUNC(void, FEE_CODE) Fee_MainFunction(void);
#endif /* if defined( FEE_DECLARATION_MAINFUNCTION ) */


extern FUNC(Std_ReturnType, FEE_CODE) Fee_Read(
  VAR(uint16, AUTOMATIC) BlockNumber,
  VAR(uint16, AUTOMATIC) BlockOffset,
  P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr,
  VAR(uint16, AUTOMATIC) Length);


extern FUNC(void, FEE_CODE) Fee_SetMode(
  VAR(MemIf_ModeType, AUTOMATIC) Mode);


#if ( FEE_SETCYCLEMODE_API == STD_ON )
extern FUNC(Std_ReturnType, FEE_CODE) Fee_SetCycleMode(
  VAR(MemIf_ModeType, AUTOMATIC) Mode);
#endif /* (FEE_SETCYCLEMODE_API == STD_ON) */


extern FUNC(Std_ReturnType, FEE_CODE) Fee_Write(
  VAR(uint16, AUTOMATIC) BlockNumber,
  P2CONST(uint8, AUTOMATIC, FEE_APPL_CONST) DataBufferPtr);


#if ( FEE_CLEAR_API == STD_ON )
extern FUNC(Std_ReturnType, FEE_CODE) Fee_Clear(void);
#endif /* (FEE_CLEAR_API == STD_ON) */


#if ( FEE_USE_CONFIG_EX == STD_ON && FEE_CLEAR_API == STD_ON )
extern FUNC(Std_ReturnType, FEE_CODE) Fee_ClearEx(void);
#endif /* (FEE_USE_CONFIG_EX == STD_ON && FEE_CLEAR_API == STD_ON) */


#if ( FEE_GET_REMAINING_PAGES_API == STD_ON )
extern FUNC(uint32, FEE_CODE) Fee_GetRemainingPages(void);
#endif /* (FEE_GET_REMAINING_PAGES_API == STD_ON) */


#if ( FEE_USE_CONFIG_EX == STD_ON && FEE_GET_REMAINING_PAGES_API == STD_ON )
extern FUNC(uint32, FEE_CODE) Fee_GetRemainingPagesEx(void);
#endif /* (FEE_USE_CONFIG_EX == STD_ON && FEE_GET_REMAINING_PAGES_API == STD_ON) */

#if ( FEE_BLANKCHECK_API == STD_ON )
extern FUNC(Std_ReturnType, FEE_CODE) Fee_EnableBlankCheckBlock(void);

extern FUNC(Std_ReturnType, FEE_CODE) Fee_DisableBlankCheckBlock(void);

extern FUNC(Std_ReturnType, FEE_CODE) Fee_EnableBlankCheckSector(void);

extern FUNC(Std_ReturnType, FEE_CODE) Fee_DisableBlankCheckSector(void);
#endif

#define FEE_STOP_SEC_CODE_ASIL_B
#include "Fee_MemMap.h"


#endif /*!defined(FEE_H_INCLUDED)*/

