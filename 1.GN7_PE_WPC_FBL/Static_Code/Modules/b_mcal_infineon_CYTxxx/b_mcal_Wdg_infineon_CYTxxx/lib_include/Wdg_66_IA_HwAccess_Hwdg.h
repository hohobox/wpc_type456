
#ifndef WDG_66_IA_HWACCESS_HWDG_H
#define WDG_66_IA_HWACCESS_HWDG_H 1

/** \brief AUTOSAR Wdg Driver
 **
 ** This file contains HARDWARE watchdog access interface used by the library.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/

#include <Wdg_66_IA_Types.h>
#include <Wdg_66_IA_HwAccess.h>

/*==================[macros]=================================================*/
/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/
/*==================[internal function declarations]=========================*/

#define WDG_66_IA_START_SEC_CODE
#include <Wdg_66_IA_MemMap.h>


/** \brief Wdg_66_IA_HW_Init_Arch
 **
 ** This function initializes watchdog registers related to watchdog timer.
 **
 ** \param [in] ConfigPtr    Pointer to configuration which be used to
 **                          initialize hardware.
 **
 ** \return E_OK    : Initialization has been successfully completed.
 **         E_NOT_OK: Initialization has failed.
 */
extern FUNC( Std_ReturnType, WDG_CODE )
Wdg_66_IA_HW_Init_Arch(
  P2CONST( Wdg_66_IA_ConfigType, AUTOMATIC, WDG_APPL_CONST ) ConfigPtr
);

/** \brief Wdg_66_IA_HW_SetMode
 **
 ** This function sets the timeout, window and interrupt time value according to
 ** mode setting.
 **
 ** \param [in] Mode      One of the following statically configured modes:
 **                       1. WDGIF_OFF_MODE
 **                       2. WDGIF_SLOW_MODE
 **                       3. WDGIF_FAST_MODE
 ** \param [in] ConfigPtr Pointer to configuration which be used to initialize
 **                       hardware.
 **
 ** \return E_OK    : Success
 **         E_NOT_OK: Failure
 */
extern FUNC( Std_ReturnType, WDG_CODE )
Wdg_66_IA_HW_SetMode(
  WdgIf_ModeType Mode,
  P2CONST( Wdg_66_IA_ConfigType, AUTOMATIC, WDG_APPL_CONST ) ConfigPtr
);

/** \brief Wdg_66_IA_HW_SetTriggerCondition
 **
 ** This function sets the timeout value for the trigger counter.
 **
 ** \param [in] timeout    Timeout value (milliseconds) for setting the trigger
 **                        counter.
 ** \param [in] CurMode    Current mode value.
 ** \param [in] ConfigPtr  Pointer to configuration which be used to initialize
 **                        hardware.
 **
 ** \return E_OK    : Success
 **         E_NOT_OK: Failure
 */
extern FUNC( Std_ReturnType, WDG_CODE )
Wdg_66_IA_HW_SetTriggerCondition(
  uint16 timeout,
  WdgIf_ModeType CurMode,
  P2CONST( Wdg_66_IA_ConfigType, AUTOMATIC, WDG_APPL_CONST ) ConfigPtr
);

/** \brief Wdg_66_IA_HW_ClearWarningIrq
 **
 ** This function clears the interrupt flag related to warning interrupt.
 **
 ** \param [in] TimerKind  One of the following watchdog timer:
 **                        0. WDG_66_IA_TIMER_MCWDT0
 **                        1. WDG_66_IA_TIMER_MCWDT1
 **                        2. WDG_66_IA_TIMER_MCWDT2
 **                        3. WDG_66_IA_TIMER_MCWDT3
 **                        4. WDG_66_IA_TIMER_WDT
 ** \param [in] SrssRegisterPtr  Pointer to hardware which be used to access
 **                              its registers.
 */
extern FUNC( void, WDG_CODE )
Wdg_66_IA_HW_ClearWarningIrq(
  Wdg_66_IA_TimerKindType TimerKind,
  P2VAR( volatile Wdg_66_IA_SrssRegType, AUTOMATIC, REGSPACE ) SrssRegisterPtr
);

/** \brief Wdg_66_IA_HW_IsInterruptPending
 **
 ** This function check whether interrupt for watchdog is pending.
 **
 ** \param [in] TimerKind  One of the following watchdog timer:
 **                        0. WDG_66_IA_TIMER_MCWDT0
 **                        1. WDG_66_IA_TIMER_MCWDT1
 **                        2. WDG_66_IA_TIMER_MCWDT2
 **                        3. WDG_66_IA_TIMER_MCWDT3
 **                        4. WDG_66_IA_TIMER_WDT
 ** \param [in] SrssRegisterPtr  Pointer to hardware which be used to access
 **                              its registers.
 **
 ** \return  Return TRUE if watchdog interrupt is pending, else return FALSE.
 */
extern FUNC( boolean, WDG_CODE )
Wdg_66_IA_HW_IsInterruptPending(
  Wdg_66_IA_TimerKindType TimerKind,
  P2CONST( volatile Wdg_66_IA_SrssRegType, AUTOMATIC, REGSPACE ) SrssRegisterPtr
);

/** \brief Wdg_66_IA_HW_ImmediateReset
 **
 ** This function resets watchdog immediately.
 ** \param [in] CurMode    Current mode value.
 ** \param [in] ConfigPtr  Pointer to configuration which be used to initialize
 **                        hardware.
 **
 ** \return E_OK    : Success
 **         E_NOT_OK: Failure
 */
extern FUNC( Std_ReturnType, WDG_CODE )
Wdg_66_IA_HW_ImmediateReset(
  WdgIf_ModeType CurMode,
  P2CONST( Wdg_66_IA_ConfigType, AUTOMATIC, WDG_APPL_CONST ) ConfigPtr
);
#define WDG_66_IA_STOP_SEC_CODE
#include <Wdg_66_IA_MemMap.h>

/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* if !defined( WDG_66_IA_HWACCESS_HWDG_H ) */
/*==================[end of file]============================================*/
