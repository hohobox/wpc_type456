#ifndef ICU_CHANNEL_TIMESTAMP_H
#define ICU_CHANNEL_TIMESTAMP_H
/** \file
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file contains all architecture dependent Icu driver internal data
 ** and includes the needed derivative specifics.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Icu_Types.h>
/*==================[macros]=================================================*/

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/
#define ICU_START_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>

/** \brief Icu_GetTimestampIndexDma_Internal
 **
 ** This function reads the timestamp index of the given channel, if channel uses DW.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    Timestamp index of the given channel.
 ** */
extern FUNC(Icu_IndexType, ICU_CODE) Icu_GetTimestampIndexDma_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_StartTimestampDma_Internal
 **
 ** This function implements to start timestamp measurement if channel uses DW.
 **
 ** \param[in] ChannelPtr     Pointer to the channel configuration.
 ** \param[in] BufferPtr      Pointer to the buffer-array where the timestamp values shall be placed.
 ** \param[in] BufferSize     Size of the external buffer(number of entries).
 ** \param[in] NotifyInterval Notification interval (number of events).
 **                           This parameter cannot be checked in a reasonable way.
 ** \param[in] ChannelCtrl    Control the channel start or no start.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StartTimestampDma_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  P2VAR(Icu_ValueType, AUTOMATIC, ICU_APPL_DATA)            BufferPtr,
  VAR(uint16, AUTOMATIC)                                    BufferSize,
  VAR(uint16, AUTOMATIC)                                    NotifyInterval,
  VAR(Icu_ChannelCtrlType, AUTOMATIC)                       ChannelCtrl
);

/** \brief Icu_StopTimestampDma_Internal
 **
 ** This function implements to stop timestamp measurement if channel uses DW.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 ** \param[in] ChannelCtrl  Control the channel stop or no stop.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StopTimestampDma_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(Icu_ChannelCtrlType, AUTOMATIC)                       ChannelCtrl
);

/** \brief Icu_GetTimestampIndex_Internal
 **
 ** This function reads the timestamp index of the given channel.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    Timestamp index of the given channel.
 ** */
extern FUNC(Icu_IndexType, ICU_CODE) Icu_GetTimestampIndex_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_StartTimestamp_Internal
 **
 ** This function implements to start timestamp measurement.
 **
 **
 ** \param[in] ChannelPtr       Pointer to the channel configuration.
 ** \param[in] BufferPtr        Pointer to the buffer-array where the 
 **                             timestamp values shall be placed.
 ** \param[in] BufferSize       Size of the external buffer(number of entries).
 ** \param[in] NotifyInterval   Notification interval (number of events).
 **                             This parameter cannot be checked in a reasonable way.
 ** \param[in] ChannelCtrl      Control the channel start or no start.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StartTimestamp_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  P2VAR(Icu_ValueType, AUTOMATIC, ICU_APPL_DATA)            BufferPtr,
  VAR(uint16, AUTOMATIC)                                    BufferSize,
  VAR(uint16, AUTOMATIC)                                    NotifyInterval,
  VAR(Icu_ChannelCtrlType, AUTOMATIC)                       ChannelCtrl
);

/** \brief Icu_StopTimestamp_Internal
 **
 ** This function implements to stop timestamp measurement.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 ** \param[in] ChannelCtrl  Control the channel stop or no stop.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StopTimestamp_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(Icu_ChannelCtrlType, AUTOMATIC)                       ChannelCtrl
);


/** \brief Icu_TimeStamp_Dw_InterruptEvent
 **
 ** Internal function of the DataWire ISRs is based on timestamp mode to call interrupt event.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_TimeStamp_Dw_InterruptEvent
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_TimeStamp_InterruptEvent
 **
 ** This function is the ISR of timestamp mode.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 ** \param[in] IntrFlag     Interrupt request flag of channel.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_TimeStamp_InterruptEvent
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(uint8, AUTOMATIC) IntrFlag
);

/** \brief Icu_SetTimeStampNotification
 **
 ** This function implements to enable/disable the notification of a channel in timestamp mode.
 **
 ** \param[in] ChannelPtr Pointer to the channel configuration.
 ** \param[in] Noti       Value depended to set the notification state of the specified channel.
 **
 ** \return    None.
 ** */

extern FUNC(void, ICU_CODE) Icu_SetTimeStampNotification
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(boolean, AUTOMATIC)                                   Noti
);

/* \brief Icu_SetTimeStampOverflowNotification
 **
 ** This function implements to enable/disable the overflow notification of a channel in timestamp mode.
 **
 ** \param[in] ChannelPtr  Pointer to the channel configuration.
 ** \param[in] OverNoti    Value depended to set the overflow notification state of the specified channel.
 ** \param[in] Mode        ICU_MODE_NORMAL or ICU_MODE_SLEEP.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_SetTimeStampOverflowNotification
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(boolean, AUTOMATIC)                                   OverNoti,
  VAR(Icu_ModeType, AUTOMATIC)                              Mode
);

/** \brief Icu_CheckBufferSizeDma_Internal
 **
 ** This function implements to check timestamp buffer size, if channel uses DW.
 **
 ** \param[in] ChannelPtr     Pointer to the channel configuration.
 ** \param[in] BufferSize     Size of the external buffer(number of entries).
 ** \param[in] NotifyInterval Notification interval (number of events).
 **                           This parameter cannot be checked in a reasonable way.
 **
 ** \return    The return whether buffer size occurs error.
 **            TRUE:  No error occur.
 **            FALSE: Error occur.
 ** */
extern FUNC(boolean, ICU_CODE) Icu_CheckBufferSizeDma_Internal
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(uint16, AUTOMATIC)                                    BufferSize,
  VAR(uint16, AUTOMATIC)                                    NotifyInterval
);

#define ICU_STOP_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>
/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/
#endif
/*==================[end of file]============================================*/
