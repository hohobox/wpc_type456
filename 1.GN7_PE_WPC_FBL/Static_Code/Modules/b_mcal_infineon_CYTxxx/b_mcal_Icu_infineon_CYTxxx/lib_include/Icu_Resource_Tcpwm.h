
#ifndef ICU_RESOURCE_TCPWM_H
#define ICU_RESOURCE_TCPWM_H

/** \file
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file defines interfaces and macros of TCPWM register access function.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */


/*==================[inclusions]=============================================*/
#include <Icu_Types.h>

/*==================[macros]=================================================*/
/* 32bit counter max tick value. */
#define ICU_32BIT_MAX_TIMER_VALUE                ((uint32) 0xFFFFFFFFUL)
/* 16bit counter max tick value. */
#define ICU_16BIT_MAX_TIMER_VALUE                ((uint32) 0x0000FFFFUL)

/* TCPWM CTRL Register */
/* The value for masking UP_DOWN_MODE bits of CTRL register. */
#define ICU_MASK_CTRL_UP_DOWN_MODE               ((uint32) 0x00030000UL)
/* The value for masking MODE bits of CTRL register. */
#define ICU_MASK_CTRL_MODE                       ((uint32) 0x07000000UL)
/* The value for masking ONE_SHOT bits of CTRL register. */
#define ICU_MASK_CTRL_ONE_SHOT                   ((uint32) 0x00040000UL)
/* The value for masking ENABLED bits of CTRL register. */
#define ICU_MASK_CTRL_ENABLED                    ((uint32) 0x80000000UL)
/* The value for masking DBG_FREEZE_EN bits of CTRL register. */
#define ICU_TCPWM_CTRL_DBG_FREEZE_EN             ((uint32) 0x40000000UL)
/* CTRL[17:16] bit position for CTRL register. */
#define ICU_SHIFT_CTRL_UP_DOWN_MODE              ((uint8) 16u)
/* CTRL[18] bit position for CTRL register. */
#define ICU_SHIFT_CTRL_ONE_SHOT                  ((uint8) 18u)
/* CTRL[26:24] bit position for CTRL register. */
#define ICU_SHIFT_CTRL_MODE                      ((uint8) 24u)
/* CTRL[31] bit position for CTRL register. */
#define ICU_SHIFT_CTRL_ENABLED                   ((uint8) 31u)
/* The default value for UP_DOWN_MODE of register CTRL(COUNT_UP). */
#define ICU_REGS_VALUE_CTRL_UP_DOWN_MODE         ((uint32) 0UL)
/* The default value for MODE of register CTRL(CAPTURE). */
#define ICU_REGS_VALUE_CTRL_MODE                 ((uint32) 2UL)

/* TCPWM register CTRL initial value. */
#define ICU_TCPWM_CTRL_INIT_VALUE                ((uint32) 0x020000F0UL)
/* TCPWM register TR_IN_SEL1 initial value. */
#define ICU_TCPWM_TR_IN_SEL_INIT_VALUE           ((uint32) 0x00000000UL)
/* TCPWM register TR_IN_EDGE_SEL initial value. */
#define ICU_TCPWM_TR_IN_EDGE_SEL_INIT_VALUE      ((uint32) 0x00000FFFUL)
/* TCPWM register TR_IN_SEL0 initial value. */
#define ICU_TCPWM_TR_IN_SEL0_INIT_VALUE          ((uint32) 0x00000100UL)
/* TCPWM register TR_IN_SEL1 initial value. */
#define ICU_TCPWM_TR_IN_SEL1_INIT_VALUE          ((uint32) 0x00000000UL)

/* TCPWM register TR_OUT_SEL initial value. */
/* The value for masking OUT0 bits of TR_OUT_SEL register.             */
#define ICU_TCPWM_TR_OUT_SEL_INIT_VALUE          ((uint32) 0x00000077UL)
/* The value for masking OUT0 bits of TR_OUT_SEL register in DW mode. */
#define ICU_TCPWM_DMA_TR_OUT_SEL_INIT_VALUE      ((uint32) 0x00000073UL)

/* Counter initial value. */
#define ICU_RESET_COUNTER_VALUE                  ((uint32) 0x00000000UL)

/* TCPWM register CTRL de-initial value. */
#define ICU_TCPWM_CTRL_DEINIT_VALUE              ((uint32) 0x000000F0UL)

/* TCPWM register TR_OUT_SEL de-initial value. */
/* The value for masking OUT0 bits of TR_OUT_SEL register.             */
#define ICU_TCPWM_TR_OUT_SEL_DEINIT_VALUE        ((uint32) 0x00000032UL)

/* TCPWM STATUS Register */
/* The value for masking TR_CAPTURE0 bits of STATUS register. */
#define ICU_MASK_STATUS_TR_CAPTURE0              ((uint32) 0x00000010UL)
/* The value for masking TR_CAPTURE1 bits of STATUS register. */
#define ICU_MASK_STATUS_TR_CAPTURE1              ((uint32) 0x00000200UL)
/* The value for masking RUNNING bits of STATUS register. */
#define ICU_MASK_STATUS_RUNNING                  ((uint32) 0x00008000UL)
/* Default value of register PERIOD. */
#define ICU_REGS_VALUE_PERIOD                    ((uint32) 0xFFFFFFFFUL)

/* TCPWM register DT de-initial value. */
#define ICU_TCPWM_DT_DEINIT_VALUE              ((uint32) 0x00000000UL)

/* TCPWM TR_CMD Register */
/* The value for masking CAPTURE0 bits of TR_CMD register. */
#define ICU_MASK_TR_CMD_CAPTURE0                 ((uint32) 0x00000001UL)
/* The value for masking RELOAD bits of TR_CMD register.   */
#define ICU_MASK_TR_CMD_RELOAD                   ((uint32) 0x00000004UL)
/* The value for masking STOP bits of TR_CMD register.     */
#define ICU_MASK_TR_CMD_STOP                     ((uint32) 0x00000008UL)
/* The value for masking START bits of TR_CMD register.    */
#define ICU_MASK_TR_CMD_START                    ((uint32) 0x00000010UL)
/* The value for masking CAPTURE1 bits of TR_CMD register. */
#define ICU_MASK_TR_CMD_CAPTURE1                 ((uint32) 0x00000020UL)

/* TCPWM TR_IN_SEL0 register. */
/* The value for masking CAPTURE0_SEL bits of TR_IN_SEL0 register. */
#define ICU_MASK_TR_IN_SEL0_CAPTURE0_SEL         ((uint32) 0x000000FFUL)
/* The value for masking COUNT_SEL bits of TR_IN_SEL0 register.    */
#define ICU_MASK_TR_IN_SEL0_COUNT_SEL            ((uint32) 0x0000FF00UL)
/* The value for masking RELOAD_SEL bits of TR_IN_SEL0 register.   */
#define ICU_MASK_TR_IN_SEL0_RELOAD_SEL           ((uint32) 0x00FF0000UL)
/* The value for masking STOP_SEL bits of TR_IN_SEL0 register.     */
#define ICU_MASK_TR_IN_SEL0_STOP_SEL             ((uint32) 0xFF000000UL)
/* TR_IN_SEL0[7:0] bit position for TR_IN_SEL0 register.   */
#define ICU_SHIFT_TR_IN_SEL0_CAPTURE0_SEL        ((uint8) 0u)
/* TR_IN_SEL0[15:8] bit position for TR_IN_SEL0 register.  */
#define ICU_SHIFT_TR_IN_SEL0_COUNT_SEL           ((uint8) 8u)
/* TR_IN_SEL0[23:16] bit position for TR_IN_SEL0 register. */
#define ICU_SHIFT_TR_IN_SEL0_RELOAD_SEL          ((uint8) 16u)
/* TR_IN_SEL0[31:24] bit position for TR_IN_SEL0 register. */
#define ICU_SHIFT_TR_IN_SEL0_STOP_SEL            ((uint8) 24u)
/* The default value for COUNT_SEL of register TR_IN_SEL0(fixed 1). */
#define ICU_REGS_VALUE_TR_IN_SEL0_COUNT_SEL      ((uint32) 1UL)

/* TCPWM TR_IN_SEL1 register. */
/* The value for masking START_SEL bits of TR_IN_SEL1 register. */
#define ICU_MASK_TR_IN_SEL1_START_SEL            ((uint32) 0x000000FFUL)
/* The value for masking COUNT_SEL bits of TR_IN_SEL1 register. */
#define ICU_MASK_TR_IN_SEL1_CAPTURE1_SEL         ((uint32) 0x0000FF00UL)
/* The value for masking TR_IN_SEL1 register. */
#define ICU_MASK_TR_IN_SEL1                      ((uint32) 0x0000FFFFUL)
/* TR_IN_SEL1[7:0] bit position for TR_IN_SEL1 register.        */
#define ICU_SHIFT_TR_IN_SEL1_START_SEL           ((uint8) 0u)
/* TR_IN_SEL1[15:8] bit position for TR_IN_SEL1 register.       */
#define ICU_SHIFT_TR_IN_SEL1_CAPTURE1_SEL        ((uint8) 8u)

/* TCPWM TR_IN_EDGE_SEL register */
/* The value for masking CAPTURE0_EDGE bits of TR_IN_EDGE_SEL register. */
#define ICU_MASK_TR_IN_EDGE_SEL_CAPTURE0_EDGE    ((uint32) 0x00000003UL)
/* The value for masking COUNT_EDGE bits of TR_IN_EDGE_SEL register.    */
#define ICU_MASK_TR_IN_EDGE_SEL_COUNT_EDGE       ((uint32) 0x0000000CUL)
/* The value for masking RELOAD_EDGE bits of TR_IN_EDGE_SEL register.   */
#define ICU_MASK_TR_IN_EDGE_SEL_RELOAD_EDGE      ((uint32) 0x00000030UL)
/* The value for masking STOP_EDGE bits of TR_IN_EDGE_SEL register.     */
#define ICU_MASK_TR_IN_EDGE_SEL_STOP_EDGE        ((uint32) 0x000000C0UL)
/* The value for masking START_EDGE bits of TR_IN_EDGE_SEL register.    */
#define ICU_MASK_TR_IN_EDGE_SEL_START_EDGE       ((uint32) 0x00000300UL)
/* The value for masking CAPTURE1_EDGE bits of TR_IN_EDGE_SEL register. */
#define ICU_MASK_TR_IN_EDGE_SEL_CAPTURE1_EDGE    ((uint32) 0x00000C00UL)
/* The value for masking TR_IN_EDGE_SEL register. */
#define ICU_MASK_TR_IN_EDGE_SEL                  ((uint32) 0x00000FFFUL)
/* TR_IN_EDGE_SEL[1:0] bit position for TR_IN_EDGE_SEL register.        */
#define ICU_SHIFT_TR_IN_EDGE_SEL_CAPTURE0_EDGE   ((uint8) 0u)
/* TR_IN_EDGE_SEL[3:2] bit position for TR_IN_EDGE_SEL register.        */
#define ICU_SHIFT_TR_IN_EDGE_SEL_COUNT_EDGE      ((uint8) 2u)
/* TR_IN_EDGE_SEL[5:4] bit position for TR_IN_EDGE_SEL register.        */
#define ICU_SHIFT_TR_IN_EDGE_SEL_RELOAD_EDGE     ((uint8) 4u)
/* TR_IN_EDGE_SEL[7:6] bit position for TR_IN_EDGE_SEL register.        */
#define ICU_SHIFT_TR_IN_EDGE_SEL_STOP_EDGE       ((uint8) 6u)
/* TR_IN_EDGE_SEL[9:8] bit position for TR_IN_EDGE_SEL register.        */
#define ICU_SHIFT_TR_IN_EDGE_SEL_START_EDGE      ((uint8) 8u)
/* TR_IN_EDGE_SEL[11:10] bit position for TR_IN_EDGE_SEL register. */
#define ICU_SHIFT_TR_IN_EDGE_SEL_CAPTURE1_EDGE   ((uint8) 10u)

/* Value of TR_IN_EDGE_SEL if select RISING_EDGE.  */
#define ICU_REGS_ICS_RISING_EDGE                 ((uint32) 0x00000000UL)
/* Value of TR_IN_EDGE_SEL if select FALLING_EDGE. */
#define ICU_REGS_ICS_FALLING_EDGE                ((uint32) 0x00000001UL)
/* Value of TR_IN_EDGE_SEL if select ANY_EDGES.    */
#define ICU_REGS_ICS_ANY_EDGES                   ((uint32) 0x00000002UL)
/* Value of TR_IN_EDGE_SEL if select NO_EDGE_DET.  */
#define ICU_REGS_ICS_NO_EDGE_DET                 ((uint32) 0x00000003UL)

/* TCPWM TR_OUT_SEL register */
/* The value for masking OUT0 bits of TR_OUT_SEL register.        */
#define ICU_MASK_TR_OUT_SEL_OUT0                 ((uint32) 0x00000007UL)
/* The value for masking OUT1 bits of TR_OUT_SEL register.        */
#define ICU_MASK_TR_OUT_SEL_OUT1                 ((uint32) 0x00000070UL)
/* The value for masking TR_OUT_SEL register.        */
#define ICU_MASK_TR_OUT_SEL                 ((uint32) 0x00000077UL)
/* TR_OUT_SEL[2:0] bit position for TR_OUT_SEL register.          */
#define ICU_SHIFT_TR_OUT_SEL_OUT0                ((uint8) 0u)
/* TR_OUT_SEL[6:4] bit position for TR_OUT_SEL register.          */
#define ICU_SHIFT_TR_OUT_SEL_OUT1                ((uint8) 4u)
 /* The default value for OUT0 of register TR_OUT_SEL(CC0_MATCH). */
#define ICU_REGS_VALUE_TR_OUT_SEL_OUT0           ((uint32) 3UL)

/* TCPWM INTR register */
/* The value for masking TC bits of INTR register.        */
#define ICU_MASK_INTR_TC                         ((uint32) 0x00000001UL)
/* The value for masking CC0_MATCH bits of INTR register. */
#define ICU_MASK_INTR_CC0_MATCH                  ((uint32) 0x00000002UL)
/* The value for masking CC1_MATCH bits of INTR register. */
#define ICU_MASK_INTR_CC1_MATCH                  ((uint32) 0x00000004UL)

/* TCPWM INTR_SET register */
/* The value for masking TC bits of INTR_SET register.        */
#define ICU_MASK_INTR_SET_TC                     ((uint32) 0x00000001UL)
/* The value for masking CC0_MATCH bits of INTR_SET register. */
#define ICU_MASK_INTR_SET_CC0_MATCH              ((uint32) 0x00000002UL)
/* The value for masking CC1_MATCH bits of INTR_SET register. */
#define ICU_MASK_INTR_SET_CC1_MATCH              ((uint32) 0x00000004UL)

/* TCPWM INTR_MASK register */
/* The value for masking TC bits of INTR_MASK register.        */
#define ICU_MASK_INTR_MASK_TC                    ((uint32) 0x00000001UL)
/* The value for masking CC0_MATCH bits of INTR_MASK register. */
#define ICU_MASK_INTR_MASK_CC0_MATCH             ((uint32) 0x00000002UL)
/* The value for masking CC1_MATCH bits of INTR_MASK register. */
#define ICU_MASK_INTR_MASK_CC1_MATCH             ((uint32) 0x00000004UL)

/* TCPWM INTR_MASKED register */
/* The value for masking TC bits of INTR_MASKED register.        */
#define ICU_MASK_INTR_MASKED_TC                  ((uint32) 0x00000001UL)
/* The value for masking CC0_MATCH bits of INTR_MASKED register. */
#define ICU_MASK_INTR_MASKED_CC0_MATCH           ((uint32) 0x00000002UL)
/* The value for masking CC1_MATCH bits of INTR_MASKED register. */
#define ICU_MASK_INTR_MASKED_CC1_MATCH           ((uint32) 0x00000004UL)

/* Counter compare/capture 0 register.          */
#define ICU_CC0_COUNT                             ((uint8) 0x01u)
/* Counter compare/capture 1 register.          */
#define ICU_CC1_COUNT                             ((uint8) 0x02u)
/* Counter buffered compare/capture 0 register. */
#define ICU_CC0_BUFF_COUNT                        ((uint8) 0x04u)
/* Counter buffered compare/capture 1 register. */
#define ICU_CC1_BUFF_COUNT                        ((uint8) 0x08u)
/* Counter register. */
#define ICU_COUNTER_COUNT                         ((uint8) 0x10u)

/* Output trigger on overflow event.  */
#define ICU_OVERFLOW_EVENT                        ((uint8) 0x00u)
/* Output trigger on cc0 event.       */
#define ICU_CC0_MATCH_EVENT                       ((uint8) 0x03u)
/* Output trigger disabled.          */
#define ICU_DISABLE_EVENT                         ((uint8) 0x07u)

/**********
   DataWire Define Type
**********/

/* DW CH_CTL register initial/de-initial value.     */
#define ICU_DW_CH_CTL_RESET_VALUE          ((uint32) 0x00000002UL)
/* The value for masking ENABLE bits of CH_CTL register. */
#define ICU_DW_MASK_CH_CTL_ENABLE          ((uint32) 0x80000000UL)
/* DW Descr_Ctl register default value.         */
#define ICU_DW_DESC_CTL_DEFAULT            ((uint32) 0xAC000004UL)
/* DW Descr_Ctl register default value in linear buffer mode. */
#define ICU_DW_DESC_CTL_DISABLE_NEXTCH     ((uint32) 0xAD000004UL)
/* The value for masking CH bits of INTR_MASKED register. */
#define ICU_DW_MASK_INTR_MASKED_CH         ((uint32) 0x00000001UL)
/* The value for masking CH bit of INTR register. */
#define ICU_DW_MASK_INTR_CH                ((uint32) 0x00000001UL)
/* The value for masking CH bit of INTR_MASK register. */
#define ICU_DW_MASK_INTR_MASK_CH           ((uint32) 0x00000001UL)
/* The value for masking Ch_Idx bits of DW register. */
#define ICU_DW_MASK_CH_IDX                 ((uint32) 0x000000FFUL)
/* The value for masking INTR_CAUSE bits of CH_STATUS register. */
#define ICU_DW_MASK_CH_INTR_CAUSE          ((uint32) 0x0000000FUL)
/* Y_IDX bit position for Ch_idx register.          */
#define ICU_DW_SHIFT_CH_IDX                    ((uint8) 8u)
/* DST_X_INCR bit position for DESCR_X_CTL register.       */
#define ICU_DW_SHIFT_DST_X_INCR                ((uint8) 12u)
/* X_COUNT bit position for DESCR_X_CTL register.          */
#define ICU_DW_SHIFT_X_COUNT                   ((uint8) 24u)
/* DST_Y_INCR bit position for DESCR_Y_CTL register.       */
#define ICU_DW_SHIFT_DST_Y_INCR                ((uint8) 12u)
/* Y_COUNT bit position for DESCR_Y_CTL register.          */
#define ICU_DW_SHIFT_Y_COUNT                   ((uint8) 24u)
/* DW transfer completion status. */
#define ICU_DW_STATUS_COMPLETION               ((uint8) 1u)


/* Index for Icu_GetInputState()          */
#define ICU_CAPTURE_FLAG_INPUTSTATE        ((uint8) 0u)
/* Index for signal measurement functions */
#define ICU_CAPTURE_FLAG_MEASUREMENT       ((uint8) 1u)

/* The invalid prescaler value.                      */
#define ICU_INVALID_PRESCALER              ((uint8) 0xFFu)
/* Prescaler value of pre-scaling is divide by 1.   */
#define ICU_PRESCALER_DIVIDE_BY_1          ((uint8) 0u)
/* Prescaler value of pre-scaling is divide by 2.   */
#define ICU_PRESCALER_DIVIDE_BY_2          ((uint8) 1u)
/* Prescaler value of pre-scaling is divide by 4.   */
#define ICU_PRESCALER_DIVIDE_BY_4          ((uint8) 2u)
/* Prescaler value of pre-scaling is divide by 8.   */
#define ICU_PRESCALER_DIVIDE_BY_8          ((uint8) 3u)
/* Prescaler value of pre-scaling is divide by 16.  */
#define ICU_PRESCALER_DIVIDE_BY_16         ((uint8) 4u)
/* Prescaler value of pre-scaling is divide by 32.  */
#define ICU_PRESCALER_DIVIDE_BY_32         ((uint8) 5u)
/* Prescaler value of pre-scaling is divide by 64.  */
#define ICU_PRESCALER_DIVIDE_BY_64         ((uint8) 6u)
/* Prescaler value of pre-scaling is divide by 128. */
#define ICU_PRESCALER_DIVIDE_BY_128        ((uint8) 7u)

/*==================[type definitions]=======================================*/
/** \brief definition of the TCPWM input trigger type */

/*==================[external function declarations]=========================*/

#define ICU_START_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>

/** \brief Icu_Resource_Tcpwm_ClearInterruptByBaseAddr
 **
 ** This function clears the interrupt request flag bit of specific TCPWM channel.
 **
 ** \param[in] IcuChannelBaseAddr Base address of the TCPWM hardware resource register structure.
 ** \param[in] IntValue           Clear Interrupt value.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_ClearInterruptByBaseAddr
(
  volatile P2VAR(uint32, ICU_CONST, REGSPACE) IcuChannelBaseAddr,
  VAR(uint32, AUTOMATIC)                      IntValue
);

/** \brief Icu_Resource_Tcpwm_DwClearInterruptFlag
 **
 ** The function clears DataWire interrupt flag.
 **
 **
 ** \param[in] IcuDwBaseAddr   Datawire register base address.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_DwClearInterruptFlag
(
  volatile P2VAR(Icu_DataWireRegType, ICU_CONST, REGSPACE) IcuDwBaseAddr
);

/** \brief Icu_Resource_Tcpwm_ResetCounter
 **
 ** This function resets the counter value of a specific channel.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 ** \param[in] Count        Counter to be reset. 
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_ResetCounter
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(uint8, AUTOMATIC)                                     Count
);

/** \brief Icu_Resource_Tcpwm_GetCounter
 **
 ** This function gets the Counter register value of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    Counter register value.
 ** */
extern FUNC(Icu_ValueType, ICU_CODE) Icu_Resource_Tcpwm_GetCounter
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_GetCc0Counter
 **
 ** This function gets the cc0 register value of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    CC0 register value.
 ** */
extern FUNC(Icu_ValueType, ICU_CODE) Icu_Resource_Tcpwm_GetCc0Counter
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_GetCc1Counter
 **
 ** This function gets the cc1 register value of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    CC1 register value.
 ** */
extern FUNC(Icu_ValueType, ICU_CODE) Icu_Resource_Tcpwm_GetCc1Counter
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_GetCc0BuffCounter
 **
 ** This function gets the cc0_buff register value of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    CC0_BUFF register value.
 ** */
extern FUNC(Icu_ValueType, ICU_CODE) Icu_Resource_Tcpwm_GetCc0BuffCounter
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_GetCc1BuffCounter
 **
 ** This function gets the cc1_buff register value of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    CC1_BUFF register value.
 ** */
extern FUNC(Icu_ValueType, ICU_CODE) Icu_Resource_Tcpwm_GetCc1BuffCounter
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_SetClockDivider
 **
 ** The function sets clock divider of a specific channel.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 ** \param[in] Divider      Counter divider value.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_SetClockDivider
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr,
  VAR(uint8, AUTOMATIC)                                     Divider
);

/** \brief Icu_Resource_Tcpwm_DwSetting
 **
 ** The function set DataWire register to start data transfer.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_DwSetting
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);


/** \brief Icu_Resource_Tcpwm_DwDisable
 **
 ** The function disables DataWire transfer.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_DwDisable
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_DwGetInterruptFlag
 **
 ** The function gets DataWire interrupt flag.
 **
 **
 ** \param[in] IcuDwBaseAddr   DataWire register base address.
 **
 ** \return    Return DataWire interrupt flag.
 ** */
extern FUNC(boolean, ICU_CODE) Icu_Resource_Tcpwm_DwGetInterruptFlag
(
  volatile P2VAR(Icu_DataWireRegType, ICU_CONST, REGSPACE) IcuDwBaseAddr
);

/** \brief Icu_Resource_Tcpwm_GetDwBuffIndex
 **
 ** The function gets DataWire buffer index.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    Return the value of DataWire buffer index.
 ** */

extern FUNC(Icu_IndexType, ICU_CODE) Icu_Resource_Tcpwm_GetDwBuffIndex
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_CalEdgeMode
 **
 ** This function calculates edge mode.
 **
 **
 ** \param[in] Activation   Activation of channel.
 **
 ** \return    Edge mode value.
 ** */
extern FUNC(uint32, ICU_CODE) Icu_Resource_Tcpwm_CalEdgeMode
(
  VAR(Icu_ActivationType, AUTOMATIC) Activation
);

/** \brief Icu_Resource_Tcpwm_GetInterruptFlag
 **
 ** This function gets the INTR register value of specific channel.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    INTR register value.
 **
 ** */
extern FUNC(uint32, ICU_CODE) Icu_Resource_Tcpwm_GetInterruptFlag
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);


/** \brief Icu_Resource_Tcpwm_GetDWStatus
 **
 ** This function gets the DataWire Ch_Status register value of specific channel.
 **
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    DW Ch_Status register value.
 **
 ** */
extern FUNC(uint32, ICU_CODE) Icu_Resource_Tcpwm_GetDWStatus
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_DwInterruptDisable
 **
 ** The function disables DataWire interrupt.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_DwInterruptDisable
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_CheckDwIsrAbility
 **
 ** The function checks Isr ability of channel.
 **
 **
 ** \param[in] ChannelPtr Pointer to the channel configuration.
 **
 ** \return    Isr ability of an ICU channel.
 ** */
extern FUNC(boolean, ICU_CODE) Icu_Resource_Tcpwm_CheckDwIsrAbility
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_DwInterruptEnable
 **
 ** The function enables DataWire interrupt.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_DwInterruptEnable
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);


/** \brief Icu_Resource_Tcpwm_DwResetSetting
 **
 ** This function resets the DataWire registers of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_DwInit
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_DwDeInit
 **
 ** This function de-initialize the DataWire registers of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Resource_Tcpwm_DwDeInit
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

/** \brief Icu_Resource_Tcpwm_DwGetRegisterEnabled
 **
 ** This function gets the CH_CTL register ENABLED bit value of a specific channel.
 **
 ** \param[in] ChannelPtr   Pointer to the channel configuration.
 **
 ** \return    Return CH_CTL register ENABLED bit value.
 **            TRUE :     DW Enabled.
 **            FALSE:     DW Disabled.
 ** */
extern FUNC(boolean, ICU_CODE) Icu_Resource_Tcpwm_DwGetRegisterEnabled
(
  P2CONST(Icu_ChannelConfigType, AUTOMATIC, ICU_APPL_CONST) ChannelPtr
);

#define ICU_STOP_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>
/*==================[internal function definitions]==========================*/

#endif /* ifndef ICU_RESOURCE_TCPWM_H */
/*==================[end of file]============================================*/
