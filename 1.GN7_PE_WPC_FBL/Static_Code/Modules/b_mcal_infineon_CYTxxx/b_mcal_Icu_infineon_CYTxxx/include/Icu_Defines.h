
#ifndef ICU_DEFINES_H
#define ICU_DEFINES_H

/** \file Icu_Defines.h
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file contains resource dependent external interrupt declarations of
 ** the API for the AUTOSAR module Icu.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/

/*==================[macros]================================================*/

/*------------------[DEM status codes] -------------------------------------*/
/** \brief Type for ICU DEM status */
/* Brief type for ICU DEM pass status. */
#define ICU_DEM_EVENT_STATUS_PASSED       ((uint8) 0x00U)
/* Brief type for ICU DEM failed status. */
#define ICU_DEM_EVENT_STATUS_FAILED       ((uint8) 0x01U)

/*------------------[Service identifiers]-----------------------------------*/
/** \brief Definition of the service identifier of Icu_Init. */
#define ICU_API_INIT                      ((uint8) 0x00U)

/** \brief Definition of the service identifier of Icu_DeInit. */
#define ICU_API_DE_INIT                   ((uint8) 0x01U)

/** \brief Definition of the service identifier of Icu_SetMode. */
#define ICU_API_SET_MODE                  ((uint8) 0x02U)

/** \brief Definition of the service identifier of Icu_DisableWakeup. */
#define ICU_API_DISABLE_WAKEUP            ((uint8) 0x03U)

/** \brief Definition of the service identifier of Icu_EnableWakeup. */
#define ICU_API_ENABLE_WAKEUP             ((uint8) 0x04U)

/** \brief Definition of the service identifier of Icu_SetActivationCondition. */
#define ICU_API_SET_ACTIVATION_CONDITION  ((uint8) 0x05U)

/** \brief Definition of the service identifier of Icu_DisableNotification. */
#define ICU_API_DISABLE_NOTIFICATION      ((uint8) 0x06U)

/** \brief Definition of the service identifier of Icu_EnableNotification. */
#define ICU_API_ENABLE_NOTIFICATION       ((uint8) 0x07U)

/** \brief Definition of the service identifier of Icu_GetInputState. */
#define ICU_API_GET_INPUT_STATE           ((uint8) 0x08U)

/** \brief Definition of the service identifier of Icu_StartTimestamp. */
#define ICU_API_START_TIMESTAMP           ((uint8) 0x09U)

/** \brief Definition of the service identifier of Icu_StopTimestamp. */
#define ICU_API_STOP_TIMESTAMP            ((uint8) 0x0AU)

/** \brief Definition of the service identifier of Icu_GetTimestampIndex. */
#define ICU_API_GET_TIMESTAMP_INDEX       ((uint8) 0x0BU)

/** \brief Definition of the service identifier of Icu_ResetEdgeCount. */
#define ICU_API_RESET_EDGE_COUNT          ((uint8) 0x0CU)

/** \brief Definition of the service identifier of Icu_EnableEdgeCount. */
#define ICU_API_ENABLE_EDGE_COUNT         ((uint8) 0x0DU)

/** \brief Definition of the service identifier of Icu_DisableEdgeCount. */
#define ICU_API_DISABLE_EDGE_COUNT        ((uint8) 0x0EU)

/** \brief Definition of the service identifier of Icu_GetEdgeNumbers. */
#define ICU_API_GET_EDGE_NUMBERS          ((uint8) 0x0FU)

/** \brief Definition of the service identifier of Icu_GetTimeElapsed. */
#define ICU_API_GET_TIME_ELAPSED          ((uint8) 0x10U)

/** \brief Definition of the service identifier of Icu_GetDutyCycleValues. */
#define ICU_API_GET_DUTY_CYCLE_VALUES     ((uint8) 0x11U)

/** \brief Definition of the service identifier of Icu_GetVersionInfo. */
#define ICU_API_GET_VERSION_INFO          ((uint8) 0x12U)

/** \brief Definition of the service identifier of Icu_StartSignalMeasurement. */
#define ICU_API_START_SIGNAL_MEAS         ((uint8) 0x13U)

/** \brief Definition of the service identifier of Icu_StopSignalMeasurement. */
#define ICU_API_STOP_SIGNAL_MEAS          ((uint8) 0x14U)

/** \brief Definition of the service identifier of Icu_CheckWakeup. */
#define ICU_API_CHECK_WAKEUP              ((uint8) 0x15U)

/** \brief Definition of the service identifier of Icu_EnableEdgeDetection. */
#define ICU_API_ENABLE_EDGE_DETECTION     ((uint8) 0x16U)

/** \brief Definition of the service identifier of Icu_DisableEdgeDetection. */
#define ICU_API_DISABLE_EDGE_DETECTION    ((uint8) 0x17U)

/** \brief Definition of the service identifier of Icu_CheckChannelStatus. */
#define ICU_API_CHECK_CHANNEL_STATUS      ((uint8) 0xFFU)

/** \brief Definition of the service identifier of Icu_DisableOverflowNotification. */
#define ICU_API_DISABLE_OVERFLOW_NOTIFICATION      ((uint8) 0xF9U)

/** \brief Definition of the service identifier of Icu_EnableOverflowNotification. */
#define ICU_API_ENABLE_OVERFLOW_NOTIFICATION       ((uint8) 0xFAU)

/** \brief Definition of the service identifier of Icu_GetInputLevel. */
#define ICU_API_GET_INPUT_LEVEL           ((uint8) 0xFEU)

/** \brief Definition of the service identifier Icu_SetPrescaler. */
#define ICU_API_SET_PRESCALER             ((uint8) 0xFBU)

/** \brief Definition of the service identifier of Icu_StartGroupTrigger. */
#define ICU_API_START_GROUP_TRIGGER       ((uint8) 0xFDU)

/** \brief Definition of the service identifier of Icu_StopGroupTrigger. */
#define ICU_API_STOP_GROUP_TRIGGER        ((uint8) 0xFCU)

/** \brief Definition of the service identifier of Icu_Isr_Vector_Internal. */
#define ICU_API_INTERRUPT_EVENT           ((uint8) 0xF8U)

/** \brief Definition of the service identifier of Icu_DwIsr_Vector_Internal. */
#define ICU_API_DW_INTERRUPT_EVENT        ((uint8) 0xF7U)

/*------------------[Development errors]------------------------------------*/
/** \brief API service called with invalid pointer. */
#define ICU_E_PARAM_POINTER               ((uint8) 0x0AU)
/** \brief API service used with an invalid channel identifier or channel
           was not configured for the functionality of the calling API. */
#define ICU_E_PARAM_CHANNEL               ((uint8) 0x0BU)
/** \brief API service used with an invalid or not feasible activation. */
#define ICU_E_PARAM_ACTIVATION            ((uint8) 0x0CU)
/** \brief Init function failed with an invalid configuration pointer. */
#define ICU_E_INIT_FAILED                 ((uint8) 0x0DU)
/** \brief API service used with an invalid buffer size. */
#define ICU_E_PARAM_BUFFER_SIZE           ((uint8) 0x0EU)
/** \brief API service Icu_SetMode is used with an invalid mode. */
#define ICU_E_PARAM_MODE                  ((uint8) 0x0FU)
/** \brief API service used without module initialization. */
#define ICU_E_UNINIT                      ((uint8) 0x14U)
/** \brief API service Icu_StopTimestamp is called on a channel which was not started or already stopped. */
#define ICU_E_NOT_STARTED                 ((uint8) 0x15U)
/** \brief API service Icu_SetMode is called while a running operation. */
#define ICU_E_BUSY_OPERATION              ((uint8) 0x16U)
/** \brief API service Icu_Init is called when driver state is already initialized. */
#define ICU_E_ALREADY_INITIALIZED         ((uint8) 0x17U)
/** \brief API service used with an invalid notify interval. */
#define ICU_E_PARAM_NOTIFY_INTERVAL       ((uint8) 0x18U)
/** \brief API service used with an invalid version-info pointer. */
#define ICU_E_PARAM_VINFO                 ((uint8) 0x19U)
/** \brief API service used with an invalid CheckChannelStatusPtr pointer. */
#define ICU_E_PARAM_CHECK_STATUS_POINTER  ((uint8) 0x20U)

/** \brief Hardware error identifier for callout. */
#define ICU_E_HW_ERROR                    ((uint8) 0x40U)
/** \brief API service used with group start condition error. */
#define ICU_E_CHANNEL_GROUP_CONDITION     ((uint8) 0x41U)

/** \brief API service used with an invalid channel group identifier or
           channel group was not configured for the functionality of the calling API. */
#define ICU_E_PARAM_CHANNEL_GROUP         ((uint8) 0x42U)
/** \brief API service used with prescaler parameter error. */
#define ICU_E_PARAM_CLOCK                 ((uint8) 0x43U)
/** \brief API service is called when waiting trigger. */
#define ICU_E_WAITING_TRIGGER             ((uint8) 0x44U)
/** \brief API service is called in sleep mode. */
#define ICU_E_DURING_SLEEP                ((uint8) 0x45U)

/*------------------------[Configuration settings]--------------------------*/
/* Definition of the ICU Resource type */
/* Channel resource type: TCPWM. */
#define ICU_TCPWM                        ((uint8) 0x00U)
/* Channel resource type: GPIO. */
#define ICU_GPIO                         ((uint8) 0x01U)

/* Definition of the channel status of an ICU channel. */
/* The channel has not been started/enabled yet. */
#define ICU_NOT_STARTED                  ((uint8) 0x00U)
/* The channel has been started/enabled and is running. */
#define ICU_RUNNING                      ((uint8) 0x01U)
/* The channel has been stopped/disabled and is not running. */
#define ICU_STOPPED                      ((uint8) 0x02U)
/* The channel has been waiting start trigger. */
#define ICU_WAITING_START_TRIGGER        ((uint8) 0x03U)
/* The channel has been waiting stop trigger. */
#define ICU_WAITING_STOP_TRIGGER         ((uint8) 0x04U)

/* The invalid channel identifier. */
#define ICU_INVALID_CHANNELID            ((uint16) 0xFFFFU)
/* The invalid start trigger value. */
#define ICU_INVALID_TRIGGERVALUE         ((uint8) 0x00U)

/* Definition of the divider value for pre-scaling divider. */
/* Impossible divider. */
#define ICU_PRESCALING_DIVIDE_NONE       ((uint8) 0x00U)
/* Pre-scaling is divided by 1. */
#define ICU_PRESCALING_DIVIDE_BY_1       ((uint8) 0x01U)
/* Pre-scaling is divided by 2. */
#define ICU_PRESCALING_DIVIDE_BY_2       ((uint8) 0x02U)
/* Pre-scaling is divided by 4. */
#define ICU_PRESCALING_DIVIDE_BY_4       ((uint8) 0x04U)
/* Pre-scaling is divided by 8. */
#define ICU_PRESCALING_DIVIDE_BY_8       ((uint8) 0x08U)
/* Pre-scaling is divided by 16. */
#define ICU_PRESCALING_DIVIDE_BY_16      ((uint8) 0x10U)
/* Pre-scaling is divided by 32. */
#define ICU_PRESCALING_DIVIDE_BY_32      ((uint8) 0x20U)
/* Pre-scaling is divided by 64. */
#define ICU_PRESCALING_DIVIDE_BY_64      ((uint8) 0x40U)
/* Pre-scaling is divided by 128. */
#define ICU_PRESCALING_DIVIDE_BY_128     ((uint8) 0x80U)

/* Half divider value. */
#define ICU_HALF_DIVIDER               ((uint8) 0x02U)

/* The invalid resource identifier. */
#define ICU_INVALID_RESOURCEID           ((uint16) 0xFFFFU)

/* Definition of timer width. */
/* 32bit timer width. */
#define ICU_TIMER_WIDTH_32                        ( (uint8) 0x20U )
/* COUNT size for DESCR_X_CTL and DESCR_Y_CTL register. */
#define ICU_DW_COUNT_SIZE                      ((uint16) 256u)

/* Interrupt request flag. */
/* TC interrupt request flag.        */
#define ICU_INT_OVERFLOW                          ((uint8) 0x01U)
/* CC0_MATCH interrupt request flag. */
#define ICU_INT_CAPTURE                           ((uint8) 0x02U)
/* CC1_MATCH interrupt request flag. */
#define ICU_INT_CC1MATCH                          ((uint8) 0x04U)
/* None interrupt request.        */
#define ICU_NO_INT                                ((uint8) 0x00U)


/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/

#endif /* ifndef ICU_DEFINES_H */
/*==================[end of file]===========================================*/
