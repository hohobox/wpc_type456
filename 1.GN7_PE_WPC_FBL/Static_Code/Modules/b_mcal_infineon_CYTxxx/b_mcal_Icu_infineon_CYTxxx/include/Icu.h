
#ifndef ICU_H
#define ICU_H

/** \file Icu.h
 ** \brief AUTOSAR Icu ICU Driver
 **
 ** This file contains all architecture dependent Icu driver internal data
 ** and includes the needed derivative specifics.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Icu_Defines.h>
#include <Icu_Types.h>
#include <Icu_Version.h>
#include <Icu_Cfg.h>             /* Generated configuration */
#include <Icu_PBcfg.h>
#include <Icu_Irq.h>

#if (ICU_REPORT_WAKEUP_SOURCE == STD_ON)
#include <EcuM.h>
#endif
/*==================[macros]================================================*/
/*------------------[AUTOSAR configuration AR version number check]----------*/

#if !defined( ICU_GEN_AR_RELEASE_MAJOR_VERSION)
#  error ICU_GEN_AR_RELEASE_MAJOR_VERSION not defined
#elif !defined( ICU_GEN_AR_RELEASE_MINOR_VERSION)
#  error ICU_GEN_AR_RELEASE_MINOR_VERSION not defined
#elif !defined( ICU_GEN_AR_RELEASE_REVISION_VERSION)
#  error ICU_GEN_AR_RELEASE_REVISION_VERSION not defined
#elif ( ((ICU_AR_RELEASE_MAJOR_VERSION) != (ICU_GEN_AR_RELEASE_MAJOR_VERSION)) || \
        ((ICU_AR_RELEASE_MINOR_VERSION) != (ICU_GEN_AR_RELEASE_MINOR_VERSION)) || \
        ((ICU_AR_RELEASE_REVISION_VERSION) != (ICU_GEN_AR_RELEASE_REVISION_VERSION)) )
#  error AUTOSAR ICU configuration AR version number mismatch
#endif

/*------------------[AUTOSAR configuration SW version number check]----------*/

#if !defined( ICU_GEN_SW_MAJOR_VERSION)
#  error ICU_GEN_SW_MAJOR_VERSION not defined
#elif !defined( ICU_GEN_SW_MINOR_VERSION)
#  error ICU_GEN_SW_MINOR_VERSION not defined
#elif !defined( ICU_GEN_SW_PATCH_VERSION)
#  error ICU_GEN_PATCH_VERSION not defined
#elif ( ((ICU_SW_MAJOR_VERSION) != (ICU_GEN_SW_MAJOR_VERSION)) || \
        ((ICU_SW_MINOR_VERSION) != (ICU_GEN_SW_MINOR_VERSION)) )
#  error AUTOSAR ICU configuration SW version number mismatch
#endif

/*------------------[AUTOSAR configuration additional check]-----------------*/

#if !defined(ICU_GEN_MODULE_ID)
#  error ICU_GEN_MODULE_ID not defined
#elif !defined(ICU_GEN_VENDOR_ID)
#  error ICU_GEN_VENDOR_ID not defined
#elif ( ((ICU_MODULE_ID) != (ICU_GEN_MODULE_ID)) || \
        ((ICU_VENDOR_ID) != (ICU_GEN_VENDOR_ID)) )
#  error AUTOSAR ICU configuration additional checks failed
#endif

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/
#define ICU_START_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>

/** \brief Icu_Init
 **
 ** This function initializes the ICU driver.
 ** 
 ** Preconditions:
 ** - No Init call should be done before.
 **
 ** \param[in] ConfigPtr Configuration pointer to config data.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_Init
(
  P2CONST(Icu_ConfigType, AUTOMATIC, ICU_APPL_CONST) ConfigPtr
);

#if (ICU_DE_INIT_API == STD_ON)
/** \brief Icu_DeInit
 ** 
 ** This function de-initializes the ICU driver.
 ** It checks if error detect is enabled
 ** for init was already done.
 ** It will report an error to DET, if enabled.
 ** It calls the function Icu_DeInit_Internal() and
 ** disable all interrupts.
 ** It sets the module variables to default and sets the internal
 ** variable Icu_DriverStatus = ICU_S_UNINITIALIZED.
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] None.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_DeInit(void);
#endif

#if (ICU_SET_MODE_API == STD_ON)
/** \brief Icu_SetMode
 **
 ** This function sets the ICU mode.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Mode ICU_MODE_NORMAL: Normal operation, all used interrupts are
 **                                  enabled according to the notification requests.
 **                 ICU_MODE_SLEEP: Reduced power mode. In sleep mode only those
 **                                 notifications are available which are configured as wakeup capable.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_SetMode
(
  VAR(Icu_ModeType, AUTOMATIC) Mode
);
#endif

#if (ICU_DISABLE_WAKEUP_API == STD_ON)
/** \brief Icu_DisableWakeup
 **
 ** This function disables the wakeup capability of a single ICU channel.
 ** It will report an error to DET, if enabled.
 ** Disables the wake-up capability of a channel.
 ** 
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_DisableWakeup
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

#if (ICU_ENABLE_WAKEUP_API == STD_ON)
/** \brief Icu_EnableWakeup
 **
 ** This function (re-)enables the wakeup capability of the given ICU channel.
 ** It will report an error to DET, if enabled.
 ** Enables the wake-up capability of a channel.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_EnableWakeup
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

#if (ICU_WAKEUP_FUNCTIONALITY_API == STD_ON)
#if (ICU_REPORT_WAKEUP_SOURCE == STD_ON)
/** \brief Icu_CheckWakeup
 **
 **  This function checks if a wakeup capable ICU channel is the
 **  source for a wakeup event and calls the ECU state manager
 **  service EcuM_SetWakeupEvent in case of a valid ICU channel wakeup event. 
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 **
 ** \param[in] WakeupSource Information on wakeup source to be checked. 
 **                         The associated ICU channel can be determined from
 **                         configuration data.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_CheckWakeup
(
  VAR(EcuM_WakeupSourceType, AUTOMATIC) WakeupSource
);
#endif
#endif

#if (ICU_EDGE_COUNT_API == STD_ON)
/** \brief Icu_DisableEdgeCount
 **
 ** This function disables the counting of edges of the given channel.
 ** It will report an error to DET, if enabled.
 ** The edge count is disabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_DisableEdgeCount
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

/** \brief Icu_EnableEdgeCount
 **
 ** This function enables the counting of edges of the given channel.
 ** It will report an error to DET, if enabled.
 ** The edge count is enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_EnableEdgeCount
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

/** \brief Icu_ResetEdgeCount
 **
 ** This function resets the value of the counted edges to zero.
 ** It will report an error to DET, if enabled.
 ** Reset the value of the counted edges to zero.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_ResetEdgeCount
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

/** \brief Icu_GetEdgeNumbers
 **
 ** This function gets number of edges occurred.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    The number of counted edges.
 **
 ** */
extern FUNC(Icu_EdgeNumberType, ICU_CODE) Icu_GetEdgeNumbers
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

#if (ICU_EDGE_DETECT_API == STD_ON)
/** \brief Icu_DisableEdgeDetection
 **
 ** This function disables the detection of edges of the given channel.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_DisableEdgeDetection
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
 
/** \brief Icu_EnableEdgeDetection
 **
 ** This function enables / re-enables the detection of edges of the given channel.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_EnableEdgeDetection
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

/** \brief Icu_SetActivationCondition
 **
 ** This function sets the activation-edge for the given channel.
 ** It will report an error to DET, if enabled.
 ** Set activation-edge of the channel.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel    Numeric identifier of the ICU channel.
 ** \param[in] Activation Type of activation.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_SetActivationCondition
(
  VAR(Icu_ChannelType, AUTOMATIC)    Channel,
  VAR(Icu_ActivationType, AUTOMATIC) Activation
);

/** \brief Icu_DisableNotification
 **
 ** This function disables the notification of a channel.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 ** - Notification should have been enabled.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_DisableNotification
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

/** \brief Icu_EnableNotification
 **
 ** This function enables the notification on the given channel.
 ** It also checks for allowed notification type.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_EnableNotification
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

#if (ICU_GET_DUTY_CYCLE_VALUES_API == STD_ON)
/** \brief Icu_GetDutyCycleValues
 **
 ** This function reads the coherent active time and period time for the given ICU channel.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel         Numeric identifier of the ICU channel.
 ** \param[out]DutyCycleValues Pointer to a buffer where the results 
 **                            (high time and period time) shall be placed.
 ** 
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_GetDutyCycleValues
(
  VAR(Icu_ChannelType, AUTOMATIC)                    Channel,
  P2VAR(Icu_DutyCycleType, AUTOMATIC, ICU_APPL_DATA) DutyCycleValues
);
#endif

#if (ICU_GET_INPUT_STATE_API == STD_ON)
/** \brief Icu_GetInputState.
 **
 ** This function gets the input state of a channel.
 ** This function checks if init is done and channel is valid.
 ** It will report an error to DET, if enabled.
 ** If an error has been detected ICU_IDLE will be returned.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 ** 
 ** \return    ICU_ACTIVE: An activation edge has been detected.
 **            ICU_IDLE: No activation edge has been detected since
 **            the last call of Icu_GetInputState () or Icu_Init ().
 **
 ** */
extern FUNC(Icu_InputStateType, ICU_CODE) Icu_GetInputState
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

#if (ICU_TIMESTAMP_API == STD_ON)
/** \brief Icu_StartTimestamp.
 **
 ** This function starts the capturing of timer values on the edges.
 ** It will report an error to DET, if enabled.
 ** Start timestamp measurement.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 ** - Icu_StartTimestamp may only be called multiple times if Icu_StopTimestamp
 **   has been called (at least once) between two calls of Icu_StartTimestamp.
 **
 ** \param[in] Channel        Numeric identifier of the ICU channel.
 ** \param[in/out] BufferPtr  Pointer to the buffer-array where the timestamp
 **                           values shall be placed.
 ** \param[in] BufferSize     Size of the external buffer (number of entries).
 ** \param[in] NotifyInterval Notification interval (number of events).
 **                           This parameter cannot be checked in a reasonable way.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_StartTimestamp
(
  VAR(Icu_ChannelType, AUTOMATIC)                Channel,
  P2VAR(Icu_ValueType, AUTOMATIC, ICU_APPL_DATA) BufferPtr,
  VAR(uint16, AUTOMATIC)                         BufferSize,
  VAR(uint16, AUTOMATIC)                         NotifyInterval
);

/** \brief Icu_StopTimestamp
 **
 ** This function stops the timestamp measurement of the given channel.
 ** It will report an error to DET, if enabled.
 ** Stop timestamp measurement.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StopTimestamp
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

/** \brief Icu_GetTimestampIndex
 **
 ** This function gets timestamp index.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    Timestamp index of the given channel.
 **
 ** */
extern FUNC(Icu_IndexType, ICU_CODE) Icu_GetTimestampIndex
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

#if (ICU_GET_TIME_ELAPSED_API == STD_ON)
/** \brief Icu_GetTimeElapsed
 **
 ** This function gets time elapsed.
 ** It will report an error to DET, if enabled.
 ** Get time elapsed.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    Return the elapsed time for the given channel.
 **
 ** */
extern FUNC(Icu_ValueType, ICU_CODE) Icu_GetTimeElapsed
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

#if (ICU_GET_VERSION_INFO_API == STD_ON)
/** \brief Icu_GetVersionInfo
 **
 ** This function gets the version information of the module.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[out] versioninfo Pointer to where to store the version information of this module.
 **
 ** \return     None.
 ** */
extern FUNC(void, ICU_CODE) Icu_GetVersionInfo
(
  P2VAR(Std_VersionInfoType, AUTOMATIC, ICU_APPL_DATA) versioninfo
);
#endif

#if (ICU_SIGNAL_MEASUREMENT_API == STD_ON)
/** \brief Icu_StartSignalMeasurement
 **
 ** This function implements to start signal measurement for given channel.
 ** It will report an error to DET, if enabled.
 ** Start Signal Measurement.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 ** - channel is configured in Signal Measurement mode
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StartSignalMeasurement
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

/** \brief Icu_StopSignalMeasurement
 **
 ** This function implements to stop signal measurement for given channel.
 ** It will report an error to DET, if enabled.
 ** Stop Signal Measurement.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 ** - channel is configured in Signal Measurement mode
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_StopSignalMeasurement
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif

#if (ICU_SAFETY_FUNCTION_API == STD_ON)
/** \brief Icu_CheckChannelStatus
 **
 ** This function checks the register of the ICU driver.
 **
 **
 ** \param[in]  Channel               Numeric identifier of the ICU channel.
 ** \param[out] CheckChannelStatusPtr Pointer to a selected channel
 **                                   configuration status.
 **
 ** \return     Return the result of checking channel status.
 ** */
extern FUNC(Std_ReturnType, ICU_CODE) Icu_CheckChannelStatus
(
  VAR(Icu_ChannelType, AUTOMATIC)                             Channel,
  P2VAR(Icu_CheckChannelStatusType, AUTOMATIC, ICU_APPL_DATA) CheckChannelStatusPtr
);
#endif

#if (ICU_CHANNEL_GROUP_API == STD_ON)
/** \brief Icu_StartGroupTrigger
 **
 ** Service to start the trigger all ICU channels in provided channel group.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Group Numeric identifier of the ICU channel group.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StartGroupTrigger
(
  VAR(Icu_GroupType, AUTOMATIC) Group
);
#endif

#if (ICU_CHANNEL_GROUP_API == STD_ON)
/** \brief Icu_StopGroupTrigger
 **
 ** Service to stop the trigger all ICU channels in provided channel group.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Group Numeric identifier of the ICU channel group.
 **
 ** \return    None.
 ** */
extern FUNC(void, ICU_CODE) Icu_StopGroupTrigger
(
  VAR(Icu_GroupType, AUTOMATIC) Group
);
#endif

#if (ICU_GET_INPUT_STATE_API == STD_ON)
/** \brief Icu_GetInputLevel
 **
 ** An API shall return the level of the input pin related to an ICU channel.
 ** It will report an error to DET, if enabled.
 ** If an error has been detected ICU_IDLE will be returned.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 ** 
 ** \return    The level get from channel.
 **            ICU_HIGH: HIGH level has been detected.
 **            ICU_LOW:  LOW level has been detected.
 ** */
extern FUNC(Icu_LevelType, ICU_CODE) Icu_GetInputLevel
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);
#endif


#if (ICU_SET_PRESCALER_API == STD_ON)
/** \brief Icu_SetPrescaler
 **
 ** Service to set prescaler.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 ** \param [in] Channel        Numeric identifier of the ICU channel.
 ** \param [in] ClockFrequency Clock frequency.
 **
 ** \return     None.
 ** */
extern FUNC(void, ICU_CODE) Icu_SetPrescaler
(
  VAR(Icu_ChannelType, AUTOMATIC)      Channel,
  VAR(Icu_ClkFrequencyType, AUTOMATIC) ClockFrequency
);
#endif /* (ICU_SET_PRESCALER_API == STD_ON) */


/** \brief Icu_DisableOverflowNotification
 **
 ** This function disables the overflow notification on the given channel.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 ** - Notification should have been enabled.
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_DisableOverflowNotification
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

/** \brief Icu_EnableOverflowNotification
 **
 ** This function enables the overflow notification on the given channel.
 ** It also checks for allowed notification type.
 ** It will report an error to DET, if enabled.
 **
 ** Preconditions:
 ** - Icu_Init should have been done.
 **
 **
 ** \param[in] Channel Numeric identifier of the ICU channel.
 **
 ** \return    None.
 **
 ** */
extern FUNC(void, ICU_CODE) Icu_EnableOverflowNotification
(
  VAR(Icu_ChannelType, AUTOMATIC) Channel
);

#define ICU_STOP_SEC_CODE_ASIL_B
#include <Icu_MemMap.h>
/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/

#endif /* ifndef ICU_H */
/*==================[end of file]===========================================*/
