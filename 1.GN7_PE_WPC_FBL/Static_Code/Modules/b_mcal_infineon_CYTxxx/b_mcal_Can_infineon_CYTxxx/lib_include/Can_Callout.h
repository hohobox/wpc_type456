/** \brief Can_Callout.h
 **
 ** This interface provides call-outs to functions of other modules.
 ** 
 ** The functions declared by this interface are driver internal and expect
 ** to be called with valid parameters.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef CAN_CALLOUT_H_INCLUDED
#define CAN_CALLOUT_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Std_Types.h>
#include <Can_ControllerManager.h>
#include <Can.h>

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define CAN_START_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

/** \brief Can_CanIfControllerBusOff
 **
 ** Translates types and forwards the call to CanIf_ControllerBusOff.
 **
 ** \param [in] ControllerConfigPtr   Pointer to controller cfg.
 **
 */
extern FUNC(void, AUTOMATIC) Can_CanIfControllerBusOff
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerConfigPtr
);

/** \brief Can_CanIfControllerModeIndication
 **
 ** Translates types and forwards the call to CanIf_ControllerModeIndication.
 **
 ** \param [in] ControllerConfigPtr   Pointer to controller cfg.
 ** \param [in] ControllerStatus   New status of the controller.
 **
 */
extern FUNC(void, AUTOMATIC) Can_CanIfControllerModeIndication
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerConfigPtr,
  VAR(Can_ControllerStatusType, AUTOMATIC) ControllerStatus
);

/** \brief Can_CanIfRxIndication
 **
 ** Translates types and forwards the call to CanIf_RxIndication.
 **
 ** \param [in] ControllerCfgPtr   Pointer to controller cfg.
 ** \param [inout] ControllerStateDataPtr   Pointer to the controller state data.
 ** \param [in] FilterIndex   Index of the Rx buffer or FIFO that stores the
 **                           message.
 ** \param [in] MessageId   Can Id of the message.
 ** \param [in] MessageLength   Length (in bytes) of the message (DLC).
 ** \param [in] DataPtr   Pointer to the message payload (SDU) in message RAM.
 ** \param [in] ApiId   Id of the service that detected the error.
 **
 */
extern FUNC(void, AUTOMATIC) Can_CanIfRxIndication
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerCfgPtr,
  P2VAR(Can_ControllerStateDataType, AUTOMATIC, AUTOMATIC) ControllerStateDataPtr,
  VAR(Can_ControllerRxHandleType, AUTOMATIC) FilterIndex,
  VAR(uint32, AUTOMATIC) MessageId,
  VAR(uint8, AUTOMATIC) MessageLength,
  P2CONST(uint8, AUTOMATIC, AUTOMATIC) DataPtr,
  VAR(uint8, AUTOMATIC) ApiId
);

/** \brief Can_CanIfTxCancellation
 **
 ** Does the translation of the PduIdBufferIndex to PduId, requests the Tx handler
 ** to free up the buffer and calls CanIf_CancelTxConfirmation.
 **
 ** \param [in] PduIdBufferIndex   Index of the Tx buffer that was used to transmit
 **                                the message.
 ** \param [in] SduDataPtr   Pointer to the message payload data in message RAM.
 ** \param [in] SduLength   Length in bytes of the message payload.
 **
 */
extern FUNC(void, AUTOMATIC) Can_CanIfTxCancellation
(
  VAR(Can_ControllerPduIdBufferIndexType, AUTOMATIC) PduIdBufferIndex,
  P2VAR(uint8, AUTOMATIC, AUTOMATIC) SduDataPtr,
  VAR(uint8, AUTOMATIC) SduLength
);

/** \brief Can_CanIfTxConfirmation
 **
 ** Does the translation of the BufferIndex to PduId, requests the Tx handler to
 ** free up the buffer and calls CanIf_TxConfirmation.
 **
 ** \param [in] PduIdBufferIndex   Index of the Tx buffer that was used to transmit
 **                                the message.
 **
 */
extern FUNC(void, AUTOMATIC) Can_CanIfTxConfirmation
(
  VAR(Can_ControllerPduIdBufferIndexType, AUTOMATIC) PduIdBufferIndex
);

/** \brief Can_EcuMCheckWakeup
 **
 ** Translates types and forwards the call to EcuM_CheckWakeup.
 **
 ** \param [in] ControllerConfigPtr   Pointer to controller cfg.
 **
 */
extern FUNC(void, AUTOMATIC) Can_EcuMCheckWakeup
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerConfigPtr
);

/** \brief Can_EcuMSetWakeupForPretendedNetworkMode
 **
 ** Translates types and forwards the call to EcuM_SetWakeupEvent.
 **
 ** \param [in] ControllerConfigPtr   Pointer to controller cfg.
 ** \param [inout] ControllerStateDataPtr   Pointer to the controller state data.
 **
 */
extern FUNC(void, AUTOMATIC) Can_EcuMSetWakeupForPretendedNetworkMode
(
  P2CONST(Can_ControllerConfigType, AUTOMATIC, AUTOMATIC) ControllerConfigPtr,
  P2VAR(Can_ControllerStateDataType, AUTOMATIC, AUTOMATIC) ControllerStateDataPtr
);

/** \brief Can_EnterCriticalSection
 **
 ** Starts a critical section.
 **
 */
extern FUNC(void, AUTOMATIC) Can_EnterCriticalSection(void);

/** \brief Can_ExitCriticalSection
 **
 ** Ends a critical section that was previously started with
 ** Can_EnterCriticalSection.
 **
 */
extern FUNC(void, AUTOMATIC) Can_ExitCriticalSection(void);

/** \brief Can_OsCheckTimeout
 **
 ** Calculates if a timeout occurred since the given time by the OS counter value.
 **
 ** \return   TRUE: timeout occurred,
 **           FALSE: timeout did not occur yet.
 ** \param [in] StartTime   The start time from which the elapsed time shall be
 **                         calculated.
 ** \param [in] TimeoutDuration   Specify the time-out duration.
 ** \param [in] ApiId   Id of the service that detected the error.
 **
 */
extern FUNC(boolean, AUTOMATIC) Can_OsCheckTimeout
(
  VAR(uint32, AUTOMATIC) StartTime,
  VAR(uint32, AUTOMATIC) TimeoutDuration,
  VAR(uint8, AUTOMATIC) ApiId
);

/** \brief Can_OsGetCounterValue
 **
 ** Reads the OS counter value and returns it in the output parameter CounterValue.
 ** The return value is for an error indication.
 **
 ** \return   Return value is the error status. Function returns E_NOT_OK if no error
 **           is occurred and the CounterValue could be used. Function returns
 **           E_OK, if an error is detected and the CounterValue is invalid and
 **           should not be used.
 ** \param [out] CounterValuePtr   OS counter value
 ** \param [in] ApiId   Id of the service that detected the error.
 **
 */
extern FUNC(Std_ReturnType, AUTOMATIC) Can_OsGetCounterValue
(
  P2VAR(uint32, AUTOMATIC, AUTOMATIC) CounterValuePtr,
  VAR(uint8, AUTOMATIC) ApiId
);

/** \brief Can_ReportError
 **
 ** Reports an error to the error handler and optionally to the DET.
 **
 ** \param [in] ErrorId   Id of the error that was detected.
 ** \param [in] ApiId   Id of the service that detected the error.
 **
 */
extern FUNC(void, AUTOMATIC) Can_ReportError
(
  VAR(uint8, AUTOMATIC) ErrorId,
  VAR(uint8, AUTOMATIC) ApiId
);

/** \brief Can_DemReportErrorStatus
 **
 ** Reports an error to the error handler and optionally to the DEM.
 **
 ** \param [in] ErrorId   Id of the error that was detected.
 ** \param [in] ApiId   Id of the service that detected the error.
 ** \param [in] EventStatus   Status of event.
 **
 */
extern FUNC(void, AUTOMATIC) Can_DemReportErrorStatus
(
  VAR(uint8, AUTOMATIC) ErrorId,
  VAR(uint8, AUTOMATIC) ApiId,
  VAR(uint8, AUTOMATIC) EventStatus
);

#define CAN_STOP_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

#endif /**defined(CAN_CALLOUT_H_INCLUDED)*/

/*==================[end of file]===========================================*/
