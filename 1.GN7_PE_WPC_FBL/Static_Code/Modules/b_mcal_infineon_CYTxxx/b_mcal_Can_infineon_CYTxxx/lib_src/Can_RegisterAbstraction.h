/** \brief Can_RegisterAbstraction.h
 **
 ** The register abstraction provides access to individual HW registers. The
 ** functions are intentionally very simple.
 **
 ** The functions declared by this interface are driver internal and expect
 ** to be called with valid parameters.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef CAN_REGISTERABSTRACTION_H_INCLUDED
#define CAN_REGISTERABSTRACTION_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Std_Types.h>

/*==================[macros]================================================*/

/** Filter setting that rejects all messages. */
#define CAN_RA_GLOBAL_FILTER_REJECT_ALL     0x3Fu
/** Interrupt mask for all interrupts. */
#define CAN_RA_INTERRUPT_MASK_ALL           0xFFFFFFFFu
/** Interrupt mask for bus off interrupt. */
#define CAN_RA_INTERRUPT_MASK_BUSOFF        ((uint32)(((uint32)1uL) << 25u))
/** Interrupt mask for new RX message. */
#define CAN_RA_INTERRUPT_MASK_RX_DEDICATED  ((uint32)(((uint32)1uL) << 19u))
/** Interrupt mask for RX FIFO0 new message. */
#define CAN_RA_INTERRUPT_MASK_RX_FIFO0      ((uint32)(((uint32)1uL) <<  0u))
/** Interrupt mask for RX FIFO1 new message. */
#define CAN_RA_INTERRUPT_MASK_RX_FIFO1      ((uint32)(((uint32)1uL) <<  4u))
/** Interrupt mask for RX FIFO0 message lost and RX FIFO1 message lost. */
#define CAN_RA_INTERRUPT_MASK_RX_MSG_LOST   (((uint32)(((uint32)1uL) <<  3u)) | ((uint32)(((uint32)1uL) <<  7u)))
/** Interrupt mask for TX cancel confirmation. */
#define CAN_RA_INTERRUPT_MASK_TX_CANCEL     ((uint32)(((uint32)1uL) << 10u))
/** Interrupt mask for new TX event in event FIFO. */
#define CAN_RA_INTERRUPT_MASK_TX_EVENT      ((uint32)(((uint32)1uL) << 12u))
/** Interrupt mask for uncorrected bit error in Message RAM, e.g. multiple bit
 errors which the ECC logic could not be corrected. */
#define CAN_RA_INTERRUPT_MASK_MULTIBIT_ERROR ((uint32)(((uint32)1uL) << 21u))
/** Interrupt mask for protocol error interrupt. */
#define CAN_RA_INTERRUPT_MASK_PROTOCOL_ERROR (((uint32)(((uint32)1uL) <<  28u)) | ((uint32)(((uint32)1uL) <<  27u)))
/** Masks the init bit from the status as returned by Can_RaGetStatus. */
#define CAN_RA_STATUS_MASK_INIT             0x01u
/** Masks the MON (bus monitoring) bit from the status as returned by
 Can_RaGetStatus. */
#define CAN_RA_STATUS_MASK_MON              0x20u
/** Masks the LEC (Last Error Code) bit from the status as returned by 
 Can_RaGetPayloadLengthErrorStatus. */
#define CAN_RA_STATUS_MASK_PAYLOAD_ERROR    0x07u
/* RX FIFO0 kind. */
#define CAN_RA_RX_KIND_FIFO0        0u
/* RX FIFO1 kind. */
#define CAN_RA_RX_KIND_FIFO1        1u
/* Default value of NSJW field of NBTP register */
#define CAN_RA_NBTP_NSJW_INIT 0x03u
/* Default value of NBRP field of NBTP register */
#define CAN_RA_NBTP_NBRP_INIT 0x0000u
/* Default value of NTSEG1 field of NBTP register */
#define CAN_RA_NBTP_NTSEG1_INIT 0x0Au
/* Default value of NTSEG2 field of NBTP register */
#define CAN_RA_NBTP_NTSEG2_INIT 0x03u
/* Default value of TDC field of DBTP register */
#define CAN_RA_DBTP_TDC_INIT 0x00u
/* Default value of DBRP field of DBTP register */
#define CAN_RA_DBTP_DBRP_INIT 0x0000u
/* Default value of DTSEG1 field of DBTP register */
#define CAN_RA_DBTP_DTSEG1_INIT 0x0Au
/* Default value of DTSEG2 field of DBTP register */
#define CAN_RA_DBTP_DTSEG2_INIT 0x03u
/* Default value of DSJW field of DBTP register */
#define CAN_RA_DBTP_DSJW_INIT 0x03u
/* Default value of TOCC register */
#define CAN_RA_TOCC_INIT 0xFFFF0000uL

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define CAN_START_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

/** \brief Can_RaClearInterruptFlag
 **
 ** Clear the Interrupt Register (IR).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **                     Each bit corresponds to an interrupt condition (see HWM IR).
 **                     Value 1 clears the corresponding interrupt flag, value 0
 **                     has no effect.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaClearInterruptFlag
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaClearNewDataFlag
 **
 ** Clear the New Data (NDAT1, NDAT2) registers for a given index.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BufferIndex   The index (zero based) of the buffer that shall be
 **                           cleared.
 **                           0..63: the corresponding buffer's new data flag is
 **                           cleared,
 **                           >63: nothing happens.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaClearNewDataFlag
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  BufferIndex
);

/** \brief Can_RaClearEventFifoCfg
 **
 ** Set to clear the TX event FIFO configuration register (TXEFC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value         Set the value to clear the TX event FIFO configuration 
 **                           register (TXEFC).
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaClearEventFifoCfg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaClearTxBufferCfg
 **
 ** Set to clear the TX Buffer Configuration register (TXBC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value         Set the value to clear the TX Buffer Configuration 
 **                           register (TXBC).
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaClearTxBufferCfg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaClearRxFifoCfg
 **
 ** Set to clear the RX FIFO0 or 1 Configuration register (RXF0C, RXF1C).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoIndex     Selects the index of the FIFO to be set.
 **                           0: RX FIFO 0, 1: RX FIFO 1
 ** \param [in] Value         Set the value to clear the RX FIFO0 or 1 Configuration 
 **                           register (RXF0C, RXF1C).
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaClearRxFifoCfg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  FifoIndex,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaClearMode
 **
 ** Set CC control register (CCCR) to default value.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaClearMode
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetEventFifoFillLevel
 **
 ** Polls the TX Event FIFO Fill Level (TXEFS_EFFL).
 **
 ** \return   Indicates FIFO Fill Level in range 0..32.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetEventFifoFillLevel
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetEventFifoGetIndex
 **
 ** Polls the TX Event FIFO Get Index (TXEFS_EFGI).
 **
 ** \return   Indicates FIFO Get Index 0..31.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetEventFifoGetIndex
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetInterruptFlags
 **
 ** Polls the interrupt flags (IR).
 **
 ** \return   Value of IR register. Each bit corresponds to an interrupt condition.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint32, AUTOMATIC) Can_RaGetInterruptFlags
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetErrorPassiveStatus
 **
 ** Polls the Error Passive Counters (TEC (TX counter) and RP (RX flag)) register
 ** flag of the Error Counter Register (ECR).
 **
 ** \return   Returns 0 if Error Passive State is NOT entered. Returns 1 if the
 **           Error Passive State is entered.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetErrorPassiveStatus
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetNewDataIndex
 **
 ** Polls the New Data (NDAT1 and NDAT2) register and returns the highest index of a
 ** buffer that has new data.
 **
 ** \return   0..63: Index of an RX buffer that has new data (the behavior of non-
 **           configured buffers is undefined),
 **           >63: there is no new data.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetNewDataIndex
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetRxFifoFillLevel
 **
 ** Polls the RX FIFO 0/1 Fill Level (RXF0S_F0FL, RXF1S_F1FL).
 **
 ** \return Indicates FIFO Fill Level in range 0..64.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoIndex   Selects the index of the FIFO to be set.
 **                         0: RX FIFO 0,
 **                         1: RX FIFO 1,
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetRxFifoFillLevel
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  FifoIndex
);

/** \brief Can_RaGetRxFifoGetIndex
 **
 ** Polls the RX FIFO 0/1 Get Index (RXF0S_F0G, RXF1S_F1G).
 **
 ** \return Indicates FIFO Get Index 0..63.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoIndex   Selects the index of the FIFO to be set.
 **                         0: RX FIFO 0,
 **                         1: RX FIFO 1,
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetRxFifoGetIndex
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  FifoIndex
);

/** \brief Can_RaGetStatus
 **
 ** Polls the CC control register (CCCR).
 **
 ** \return   Value of CCCR register.
 **           Bit 0: initialization status (1: initialization mode, 0: normal operation)
 **           Bit 5: bus monitoring mode (1: bus monitoring mode, 0: normal mode)
 **           For other bits see HWM.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint32, AUTOMATIC) Can_RaGetStatus
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetTxBufferCancelled
 **
 ** Polls the TX Buffer Transmission Occurred (TXBTO) and TX Buffer Cancellation
 ** Finished (TXBCF) to calculate whether the buffer was successfully sent or
 ** canceled.
 ** 
 ** Precondition: The function assumes that sending and canceling of the buffer was
 **               requested before and that the buffer is not pending for transmission
 **               anymore.
 **
 ** \return   Indicates the dedicated buffer canceled status:
 **           FALSE: Buffer was not canceled (i.e. either it was sent before cancel
 **                  request or it was not requested for cancellation.),
 **           TRUE: Buffer was canceled and transmission did not occur.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BufferIndex   Selects the dedicated TX buffer that shall be checked.
 **                           The index is zero based. Indices of not existing buffers
 **                           return undefined values.
 **
 */
extern FUNC(boolean, AUTOMATIC) Can_RaGetTxBufferCancelled
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  BufferIndex
);

/** \brief Can_RaGetTxFifoPutIndex
 **
 ** Polls the TX FIFO Put Index (TXFQS_TFQPI).
 **
 ** \return   Indicates FIFO Put Index 0..32.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetTxFifoPutIndex
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetPayloadLengthErrorStatus
 **
 ** Polls the Protocol status register (PSR).
 **
 ** \return Value of Last Error Code(LEC).
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaGetPayloadLengthErrorStatus
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetBusOffStatus
 **
 ** Get the status of BusOff event.
 **
 ** \return Value of BusOff state
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(boolean, AUTOMATIC) Can_RaGetBusOffStatus
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetRxFifo0TopData
 **
 ** When enabled (RXFTOP_CTL.F0TPE=1) read data from MRAM at location current
 ** FIFO0 top address.
 **
 ** \return   Receive FIFO 0 top data.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint32, AUTOMATIC) Can_RaGetRxFifo0TopData
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetRxFifo1TopData
 **
 ** When enabled (RXFTOP_CTL.F1TPE=1) read data from MRAM at location current
 ** FIFO1 top address.
 **
 ** \return   Receive FIFO 1 top data.
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint32, AUTOMATIC) Can_RaGetRxFifo1TopData
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetEccControl
 **
 ** Get ECC control Register.
 **
 ** \return   ECC control enable/disable status
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 **
 */
extern FUNC(boolean, AUTOMATIC) Can_RaGetEccControl
(
  VAR(uint32, AUTOMATIC) BaseAddress
);

/** \brief Can_RaGetInterruptEnable
 **
 ** Get the Interrupt Enable Register (IE).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint32, AUTOMATIC) Can_RaGetInterruptEnable
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaGetInterruptLine
 **
 ** Get the Interrupt Line Select Register (ILS).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(uint32, AUTOMATIC) Can_RaGetInterruptLine
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaSetNominalBitTiming
 **
 ** Sets Bit Timing and Prescaler Register (NBTP) according to the values provided.
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BaudratePrescaler   Sets the Baud Rate Prescaler (NBTP_NBRP). The
 **                                 value by which the oscillator frequency is
 **                                 divided for generating the bit time quanta.
 **                                 The bit time is built up from a multiple of
 **                                 this quanta. Valid values for the Baud Rate
 **                                 Prescaler are 0 to 511. The actual interpretation
 **                                 by the hardware of this value is such that one
 **                                 more than the value programmed here is used.
 ** \param [in] TSeg1   Sets the Time Segment before Sample Point (NBTP_NTSEG1).
 **                     Valid values are 1 to 255. The value 0 must not be used.
 **                     The actual interpretation by the hardware of this value
 **                     is such that one more than the programmed value is used.
 ** \param [in] TSeg2   Sets the Time Segment after Sample Point (NBTP_NTSEG2). Valid
 **                     values are 0 to 127. The actual interpretation by the hardware
 **                     of this value is such that one more than the programmed value
 **                     is used.
 ** \param [in] SyncJumpWidth   Sets the (Re) Synchronization Jump Width (NBTP_NSJW).
 **                             Valid values are 0 to 127. The actual interpretation
 **                             by the hardware of this value is such that one more
 **                             than the value programmed here is used.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetNominalBitTiming
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint16, AUTOMATIC) BaudratePrescaler,
  VAR(uint8, AUTOMATIC)  TSeg1,
  VAR(uint8, AUTOMATIC)  TSeg2,
  VAR(uint8, AUTOMATIC)  SyncJumpWidth
);

/** \brief Can_RaSetEventFifoAck
 **
 ** Writes the TX Event FIFO acknowledge, which indicates that the respective FIFO
 ** index has been read and can be re-used for incoming events.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] MessageIndex   Indicates the index to acknowledge (TXEFA_EFA).
 **                            Values that do not correspond to existing FIFO
 **                            elements cause unpredictable behavior.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetEventFifoAck
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  MessageIndex
);

/** \brief Can_RaSetEventFifoCfg
 **
 ** Sets TX event FIFO Configuration register (TXEFC).
 ** Watermark is unconditionally set to 1.
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoSize   Sets the TX event FIFO Size (it can be different to
 **                        FIFO/Queue size):
 **                        0: No event FIFO,
 **                        1..32: Number of event FIFO elements,
 **                        >32: Values are interpreted as 32.
 ** \param [in] FifoStartAddress   Start Address of the Tx event FIFO in RAM. The 2
 **                                LSBs are truncated to 0.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetEventFifoCfg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC) FifoSize,
  VAR(uint16, AUTOMATIC) FifoStartAddress
);

/** \brief Can_RaSetExtendedFilter
 **
 ** Sets the Extended ID Filter Configuration (XIDFC) and Mask (XIDAM). The AND
 ** mask is statically deactivated (i.e. IDs are not modified).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] StartAddress   The offset in bytes from the beginning of the
 **                            message RAM used for the allocation of the extended
 **                            filter list. The 2 LSBs are truncated.
 ** \param [in] Size   Size of the extended filter list in elements.
 **                    Allowed values: 0..64.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetExtendedFilter
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint16, AUTOMATIC) StartAddress,
  VAR(uint8, AUTOMATIC)  Size
);

/** \brief Can_RaSetDataBitTiming
 **
 ** Sets the data bit timing and prescaler register (DBTP).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BaudratePrescaler   Sets the Baud Rate Prescaler (DBTP_DBRP). The
 **                                 value by which the oscillator frequency is
 **                                 divided for generating the bit time quanta.
 **                                 The bit time is built up from a multiple of
 **                                 this quanta. Valid values for the Baud Rate
 **                                 Prescaler are 0 to 31. The actual
 **                                 interpretation by the hardware of this value
 **                                 is such that one more than the value programmed
 **                                 here is used.
 ** \param [in] TSeg1   Sets the Time Segment before Sample Point (DBTP_DTSEG1).
 **                     Valid values are 1 to 31. The value 0 must not be used.
 **                     The actual interpretation by the hardware of this value
 **                     is such that one more than the programmed value is used.
 ** \param [in] TSeg2   Sets the Time Segment after Sample Point (DBTP_DTSEG2). Valid
 **                     values are 0 to 15. The actual interpretation by the hardware
 **                     of this value is such that one more than the programmed
 **                     value is used.
 ** \param [in] SyncJumpWidth   Sets the (Re) Synchronization Jump Width (DBTP_DSJW).
 **                             Valid values are 0 to 15. The actual interpretation
 **                             by the hardware of this value is such that one more
 **                             than the value programmed here is used.
 ** \param [in] TrcvDelayCompensation   Enable/Disable Transmitter Delay Compensation
 **                                    (DBTP_TDC). Valid values 0..1.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetDataBitTiming
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint16, AUTOMATIC) BaudratePrescaler,
  VAR(uint8, AUTOMATIC)  TSeg1,
  VAR(uint8, AUTOMATIC)  TSeg2,
  VAR(uint8, AUTOMATIC)  SyncJumpWidth,
  VAR(uint8, AUTOMATIC)  TrcvDelayCompensation
);

/** \brief Can_RaSetGlobalFilter
 **
 ** Sets the Global Filter Configuration (GFC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetGlobalFilter
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetInitMode
 **
 ** Sets CC control register (CCCR) bits 0..8. CCCR_INIT and CCCR_CCE are set to 1.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetInitMode
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum
);

/** \brief Can_RaSetInterruptEnable
 **
 ** Sets the Interrupt Enable Register (IE).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **                     Each bit corresponds to an interrupt condition (see HWM IE).
 **                     Value 1 enables the corresponding interrupt, value 0 disables
 **                     it.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetInterruptEnable
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetInterruptLine
 **
 ** Sets the Interrupt Line Select Register (ILS).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **                     Each bit corresponds to an interrupt condition (see HWM ILS).
 **                     Value 0 selects interrupt 0, value 1 selects interrupt 1.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetInterruptLine
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetInterruptLineEnable
 **
 ** Sets the Interrupt Line Enable Register (ILE).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **                     Each bit corresponds to an interrupt condition (see HWM ILE).
 **                     Value 1 enables the corresponding interrupt, value 0 disables
 **                     it.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetInterruptLineEnable
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetNormalFdMode
 **
 ** Sets CC control register (CCCR) bits 0..9. CCCR_INIT and CCCR_CCE are set to 0,
 ** CCCR_FDOE is set to 1, CCCR_MON is set according to parameter BusMonitoringMode,
 ** CCCR_BRSE is set according to parameter BitRateSwitchEnable, the other bits are
 ** set to defaults.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BusMonitoringMode   Sets the CCCR_MON bit according to the LSB of
 **                                 this parameter. The other bits are ignored.
 **                                 0: normal mode
 **                                 1: bus monitoring mode
 ** \param [in] BitRateSwitchEnable   Sets the CCCR_BRSE bit according to the LSB
 **                                   of this parameter. The other bits are ignored.
 **                                   0: bit rate switching disabled
 **                                   1: bit rate switching enabled
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetNormalFdMode
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  BusMonitoringMode,
  VAR(uint8, AUTOMATIC)  BitRateSwitchEnable
);

/** \brief Can_RaSetNormalMode
 **
 ** Sets CC control register (CCCR) bits 0..8. CCCR_INIT and CCCR_CCE are set to 0,
 ** CCCR_MON is set according to parameter BusMonitoringMode, the other bits are
 ** set to defaults.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BusMonitoringMode   Sets the CCCR_MON bit according to the LSB of
 **                                 this parameter. The other bits are ignored.
 **                                 0: normal mode
 **                                 1: bus monitoring mode
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetNormalMode
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  BusMonitoringMode
);

/** \brief Can_RaSetRamWdg
 **
 ** Sets RAM watchdog register (RWD).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetRamWdg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetRxBufferCfg
 **
 ** Sets the start address for dedicated RX buffers.
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoStartAddress   Start Address of the dedicated RX buffers in RAM.
 **                                The 2 LSBs are truncated to 0.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetRxBufferCfg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint16, AUTOMATIC) FifoStartAddress
);

/** \brief Can_RaSetRxElementSize
 **
 ** Sets RX Buffer/FIFO Element Size Configuration register (RXESC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Fifo0ElementSize   Selects the Element Size for FIFO 0:
 **                                0: 8 byte,
 **                                1: 12 byte,
 **                                2: 16 byte,
 **                                3: 20 byte,
 **                                4: 24 byte,
 **                                5: 32 byte,
 **                                6: 48 byte,
 **                                7: 64 byte,
 **                                other: undefined.
 ** \param [in] Fifo1ElementSize   Selects the Element Size for FIFO 1:
 **                                0: 8 byte,
 **                                1: 12 byte,
 **                                2: 16 byte,
 **                                3: 20 byte,
 **                                4: 24 byte,
 **                                5: 32 byte,
 **                                6: 48 byte,
 **                                7: 64 byte,
 **                                other: undefined.
 ** \param [in] BufferElementSize   Selects the Element Size for dedicated RX
 **                                 buffers:
 **                                 0: 8 byte,
 **                                 1: 12 byte,
 **                                 2: 16 byte,
 **                                 3: 20 byte,
 **                                 4: 24 byte,
 **                                 5: 32 byte,
 **                                 6: 48 byte,
 **                                 7: 64 byte,
 **                                 other: undefined.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetRxElementSize
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  Fifo0ElementSize,
  VAR(uint8, AUTOMATIC)  Fifo1ElementSize,
  VAR(uint8, AUTOMATIC)  BufferElementSize
);

/** \brief Can_RaSetRxFifoAck
 **
 ** Writes the FIFO acknowledge, which indicates that the respective FIFO index has
 ** been read and can be re-used for incoming messages.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoIndex   Selects the index of the FIFO to be set.
 **                         0: RX FIFO 0,
 **                         1: RX FIFO 1,
 ** \param [in] MessageIndex   Indicates the the index to acknowledge (RXF0A,
 **                            RXF1A).
 **                            Values that do not correspond to existing FIFO 
 **                            elements cause unpredictable behavior.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetRxFifoAck
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  FifoIndex,
  VAR(uint8, AUTOMATIC)  MessageIndex
);

/** \brief Can_RaSetRxFifoCfg
 **
 ** Sets RX FIFO 0 or 1 Configuration register (RXF0C, RXF1C).
 ** Rx FIFO is unconditionally set to blocking mode. Watermark is unconditionally
 ** set to 1.
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoIndex   Selects the index of the FIFO to be set.
 **                         0: RX FIFO 0,
 **                         1: RX FIFO 1,
 ** \param [in] FifoSize   Sets theRX FIFO Size:
 **                        0: No FIFO,
 **                        1..64: Number of FIFO elements,
 **                        >64: unspecified.
 ** \param [in] FifoStartAddress   Start Address of the Rx FIFO in RAM. The 2 LSBs
 **                                are truncated to 0.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetRxFifoCfg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  FifoIndex,
  VAR(uint8, AUTOMATIC)  FifoSize,
  VAR(uint16, AUTOMATIC) FifoStartAddress
);

/** \brief Can_RaSetStandardFilter
 **
 ** Sets the Standard ID Filter Configuration (SIDFC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] StartAddress   The offset in bytes from the beginning of the
 **                            message RAM used for the allocation of the standard
 **                            filter list. The 2 LSBs are truncated.
 ** \param [in] Size   The size in elements of the standard filter list. Values
 **                    greater than 128 are interpreted as 128.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetStandardFilter
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint16, AUTOMATIC) StartAddress,
  VAR(uint8, AUTOMATIC)  Size
);

/** \brief Can_RaSetTimeoutCounter
 **
 ** Sets timeout counter register (TOCC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTimeoutCounter
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetTimestampCounter
 **
 ** Sets timestamp counter register (TSCC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTimestampCounter
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetTxAddRequest
 **
 ** Set the Tx Buffer Add Request (TXBAR) for one buffer.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BufferIndex   The index of the Tx Buffer whose send request shall
 **                           be set. index is zero based.
 **                           The flag is set independently of whether the buffer is
 **                           configured or not, values >31 are ignored.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTxAddRequest
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  BufferIndex
);

/** \brief Can_RaSetTxBufferCfg
 **
 ** Sets TX Buffer Configuration register (TXBC).
 ** Tx FIFO/Queue mode is unconditionally set to Queue mode. If the sum of Queue
 ** and Dedicated Buffer elements exceeds 32, the behavior is undefined.
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoSize   Sets theTX FIFO Size:
 **                        0: No FIFO,
 **                        1..32: Number of FIFO elements,
 **                        >32: unspecified.
 ** \param [in] BufferSize   Sets the size of the dedicated TX buffers:
 **                          0: No dedicated TX buffers,
 **                          1..32: Number of dedicated TX buffer elements,
 **                          >32: unspecified.
 ** \param [in] BufferStartAddress   Start Address of the dedicated Tx Buffers in
 **                                  RAM. The 2 LSBs are truncated to 0.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTxBufferCfg
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  FifoSize,
  VAR(uint8, AUTOMATIC)  BufferSize,
  VAR(uint16, AUTOMATIC) BufferStartAddress
);

/** \brief Can_RaSetTxCancellationInterruptEnable
 **
 ** Sets the Tx Buffer Cancellation Finished Interrupt Enable Register (TXBCIE).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **                     Each bit corresponds to an interrupt condition (see HWM IE).
 **                     Value 1 enables the corresponding interrupt, value 0
 **                     disables it.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTxCancellationInterruptEnable
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetTxCancelRequest
 **
 ** Set the Tx Buffer Cancellation Request (TXBCR) for one buffer.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BufferIndex   The index of the dedicated Tx Buffer whose
 **                           cancellation request shall be set. Index is zero
 **                           based. The flag is set independently of whether the
 **                           buffer is configured or not, values >31 are ignored.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTxCancelRequest
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  BufferIndex
);

/** \brief Can_RaSetTxElementSize
 **
 ** Sets TX Buffer/FIFO Element Size Configuration register (TXESC).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] BufferElementSize   Selects the Element Size for the TX FIFO and
 **                                 dedicated buffers (both have same size):
 **                                 0: 8 byte,
 **                                 1: 12 byte,
 **                                 2: 16 byte,
 **                                 3: 20 byte,
 **                                 4: 24 byte,
 **                                 5: 32 byte,
 **                                 6: 48 byte,
 **                                 7: 64 byte,
 **                                 other: undefined.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTxElementSize
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  BufferElementSize
);

/** \brief Can_RaSetTxTransmissionInterruptEnable
 **
 ** Sets the Tx Buffer Transmission Interrupt Enable Register (TXBTIE).
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **                     Each bit corresponds to an interrupt condition (see HWM IE).
 **                     Value 1 enables the corresponding interrupt, value 0
 **                     disables it.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTxTransmissionInterruptEnable
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint32, AUTOMATIC) Value
);

/** \brief Can_RaSetTransmitterDelayCompensationOffset
 **
 ** Sets transmitter delay compensation offset register (TDCO).
 ** 
 ** Precondition: The hw must be in init mode.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] Value   The value that will be written to the register.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetTransmitterDelayCompensationOffset
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  Value
);

/** \brief Can_RaSetRxFifoTopPointer
 **
 ** Sets RX FIFO 0 or 1 Top Pointer register (RXFTOP_CTL).
 ** This enables the FIFO top pointer logic to set the FIFO Top Address (FnTA)
 ** and message word counter.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] ChannelNum    Channel number of the CAN FD macro's register structure.
 ** \param [in] FifoIndex   Selects the index of the FIFO to be set.
 **                         0: RX FIFO 0,
 **                         1: RX FIFO 1,
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetRxFifoTopPointer
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC)  ChannelNum,
  VAR(uint8, AUTOMATIC)  FifoIndex,
  VAR(uint32, AUTOMATIC)  Value
);

/** \brief Can_RaSetEccControl
 **
 ** Set ECC control Register.
 **
 ** \param [in] BaseAddress   Base address of the CAN FD macro's register structure.
 ** \param [in] Value   The value sets enable/disable of ECC control of ECC_CTL register.
 **
 */
extern FUNC(void, AUTOMATIC) Can_RaSetEccControl
(
  VAR(uint32, AUTOMATIC) BaseAddress,
  VAR(boolean, AUTOMATIC) Value
);


/** \brief Can_RaReadByteMRAM
 **
 ** Read 1 byte from MessageRam.
 ** 
 ** \return   Core release register value.
 **
 ** \param [in] BytePtr   Pointer to the message RAM.
 ** 
 ** \param [in] Index   Index of BytePtr that points to MessageRam.
 **
 */
extern FUNC(uint8, AUTOMATIC) Can_RaReadByteMRAM
(
 P2CONST(uint8, AUTOMATIC, AUTOMATIC) BytePtr, 
 VAR(uint16, AUTOMATIC)               Index
);

#define CAN_STOP_SEC_CODE_ASIL_B

#include "Can_MemMap.h"

#endif /**defined(CAN_REGISTERABSTRACTION_H_INCLUDED)*/

/*==================[end of file]===========================================*/
