/** \brief AUTOSAR SPI Driver
 **
 ** This file contains public type definitions in Spi module.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef SPI_DER_TYPES_H_INCLUDED
#define SPI_DER_TYPES_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Std_Types.h>         /* AUTOSAR standard types */

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/* Bitfield definitions for DMA Channel Control register */
typedef struct Spi_stc_Dw1_Ch_Ctl_field {
  unsigned u1P            :1;
  unsigned u1NS           :1;
  unsigned u1B            :1;
  unsigned                :1;
  unsigned u4PC           :4;
  unsigned u2PRIO         :2;
  unsigned                :1;
  unsigned u1PREEMPTABLE  :1;
  unsigned                :19;
  unsigned u1ENABLED      :1;
} Spi_stc_Dw1_Ch_Ctl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Dw1_Ch_Ctl {
  uint32 u32Register;
  Spi_stc_Dw1_Ch_Ctl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Dw1_Ch_Ctl_Type;

/* Bitfield definitions for DMA Channel Status register */
typedef struct Spi_stc_Dw1_Ch_Status_field {
  unsigned u4INTR_CAUSE   :4;
  unsigned                :27;
  unsigned u1PENDING      :1;
} Spi_stc_Dw1_Ch_Status_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Dw1_Ch_Status {
  uint32 u32Register;
  Spi_stc_Dw1_Ch_Status_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Dw1_Ch_Status_Type;

/* Bitfield definitions for DMA Channel Index register */
typedef struct Spi_stc_Dw1_Ch_Idx_field {
  unsigned u8X_IDX    :8;
  unsigned u8Y_IDX    :8;
  unsigned            :16;
} Spi_stc_Dw1_Ch_Idx_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Dw1_Ch_Idx {
  uint32 u32Register;
  Spi_stc_Dw1_Ch_Idx_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Dw1_Ch_Idx_Type;

/* Bitfield definitions for DMA Interrupt register */
typedef struct Spi_stc_Dw1_Intr_field {
  unsigned u1CH   :1;
  unsigned        :31;
} Spi_stc_Dw1_Intr_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Dw1_Intr {
  uint32 u32Register;
  Spi_stc_Dw1_Intr_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Dw1_Intr_Type;

/* Bitfield definitions for DMA Descriptor Control register */
typedef struct Spi_stc_Dw1_Descr_Ctl_field {
  unsigned u2WAIT_FOR_DEACT    :2;
  unsigned u2INTR_TYPE         :2;
  unsigned u2TR_OUT_TYPE       :2;
  unsigned u2TR_IN_TYPE        :2;
  unsigned                     :16;
  unsigned u1CH_DISABLE        :1;
  unsigned                     :1;
  unsigned u1SRC_TRANSFER_SIZE :1;
  unsigned u1DST_TRANSFER_SIZE :1;
  unsigned u2DATA_SIZE         :2;
  unsigned u2DESCR_TYPE        :2;
} Spi_stc_Dw1_Dw1_Descr_Ctl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Dw1_Descr_Ctl {
  uint32 u32Register;
  Spi_stc_Dw1_Dw1_Descr_Ctl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Dw1_Descr_Ctl_Type;

/* Bitfield definitions for DMA Descriptor X Control register */
typedef struct Spi_stc_Dw1_Descr_X_Ctl_field {
  unsigned u12SRC_X_INCR  :12;
  unsigned u12DST_X_INCR  :12;
  unsigned u8X_COUNT      :8;
} Spi_stc_Dw1_Descr_X_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Dw1_Descr_X_Ctl {
  uint32 u32Register;
  Spi_stc_Dw1_Descr_X_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Dw1_Descr_X_Ctl_Type;

/* Bitfield definitions for DMA Descriptor Y Control register */
typedef struct Spi_stc_Dw1_Descr_Y_Ctl_field {
  unsigned u12SRC_Y_INCR  :12;
  unsigned u12DST_Y_INCR  :12;
  unsigned u8Y_COUNT      :8;
} Spi_stc_Dw1_Descr_Y_Ctl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Dw1_Descr_Y_Ctl {
  uint32 u32Register;
  Spi_stc_Dw1_Descr_Y_Ctl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Dw1_Descr_Y_Ctl_Type;

/** \brief struct Spi_DmaChannelRegsType
**
** Structure holding register definitions for one DMA Channel registers.
*/
typedef struct Spi_stc_DmaChannelRegs {
   VAR(Spi_un_Dw1_Ch_Ctl_Type, AUTOMATIC)     unCH_CTL;       /* 0x00 */
   VAR(Spi_un_Dw1_Ch_Status_Type, AUTOMATIC)  unCH_STATUS;    /* 0x04 */
   VAR(Spi_un_Dw1_Ch_Idx_Type, AUTOMATIC)     unCH_IDX;       /* 0x08 */
   VAR(uint32, AUTOMATIC)                     CH_CURR_PTR;    /* 0x0C */
   VAR(Spi_un_Dw1_Intr_Type, AUTOMATIC)       unINTR;         /* 0x10 */
   VAR(Spi_un_Dw1_Intr_Type, AUTOMATIC)       unINTR_SET;     /* 0x14 */
   VAR(Spi_un_Dw1_Intr_Type, AUTOMATIC)       unINTR_MASK;    /* 0x18 */
   VAR(Spi_un_Dw1_Intr_Type, AUTOMATIC)       unINTR_MASKED;  /* 0x1C */
   VAR(uint32, AUTOMATIC)                     au32Reserv[8];  /* 0x20-0x3C */
} Spi_DmaChannelRegsType;

/** \brief struct Spi_DmaDescriptorRegsType
**
** Structure holding register definitions for one DMA Descriptor.
*/
typedef struct Spi_stc_DmaDescriptorRegs {
  VAR(Spi_un_Dw1_Descr_Ctl_Type, AUTOMATIC)   unDESCR_CTL;     /* 0x00 */
  VAR(uint32, AUTOMATIC)                      DESCR_SRC;       /* 0x04 */
  VAR(uint32, AUTOMATIC)                      DESCR_DST;       /* 0x08 */
  VAR(Spi_un_Dw1_Descr_X_Ctl_Type, AUTOMATIC) unDESCR_X_CTL;   /* 0x0C */
  VAR(uint32, AUTOMATIC)                      DESCR_NEXT_PTR;  /* 0x10 */
  VAR(Spi_un_Dw1_Descr_Ctl_Type, AUTOMATIC)   unDESCR_CTL2;    /* 0x14 */
  VAR(uint32, AUTOMATIC)                      DESCR_SRC2;      /* 0x18 */
  VAR(uint32, AUTOMATIC)                      DESCR_DST2;      /* 0x1C */
  VAR(Spi_un_Dw1_Descr_X_Ctl_Type, AUTOMATIC) unDESCR_X_CTL2;  /* 0x20 */
  VAR(Spi_un_Dw1_Descr_Y_Ctl_Type, AUTOMATIC) unDESCR_Y_CTL2;  /* 0x24 */
  VAR(uint32, AUTOMATIC)                      DESCR_NEXT_PTR2; /* 0x28 */
} Spi_DmaDescriptorRegsType;

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

/* Bitfield definitions for SCB Control. */
typedef struct Spi_stc_Scb_Ctrl_field {
  unsigned u4OVS           :4;
  unsigned                 :4;
  unsigned u1EC_AM_MODE    :1;
  unsigned u1EC_OP_MODE    :1;
  unsigned u1EZ_MODE       :1;
  unsigned                 :1;
  unsigned u1CMD_RESP_MODE :1;
  unsigned                 :1;
  unsigned u2MEM_WIDTH     :2;
  unsigned u1ADDR_ACCEPT   :1;
  unsigned u1BLOCK         :1;
  unsigned                 :6;
  unsigned u2MODE          :2;
  unsigned                 :5;
  unsigned u1ENABLED       :1;
} Spi_stc_Scb_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Ctrl {
  uint32 u32Register;
  Spi_stc_Scb_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Ctrl_Type;

/* Bitfield definitions for SCB SPI Control. */
typedef struct Spi_stc_Scb_Spi_Ctrl_field {
  unsigned u1SSEL_COUNTINUOUS     :1;
  unsigned u1SELECT_PRECEDE       :1;
  unsigned u1CPHA                 :1;
  unsigned u1CPOL                 :1;
  unsigned u1LATE_MISO_SAMPLE     :1;
  unsigned u1SCLK_CONTINUOUS      :1;
  unsigned                        :2;
  unsigned u1SSEL_POLARITY0       :1;
  unsigned u1SSEL_POLARITY1       :1;
  unsigned u1SSEL_POLARITY2       :1;
  unsigned u1SSEL_POLARITY3       :1;
  unsigned u1SSEL_SETUP_DEL       :1;
  unsigned u1SSEL_HOLD_DEL        :1;
  unsigned u1SSEL_INTER_FRAME_DEL :1;
  unsigned                        :1;
  unsigned u1LOOPBACK             :1;
  unsigned                        :7;
  unsigned u2MODE                 :2;
  unsigned u2SSEL                 :2;
  unsigned                        :3;
  unsigned u1MASTER_MODE          :1;
} Spi_stc_Scb_Spi_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Spi_Ctrl {
  uint32 u32Register;
  Spi_stc_Scb_Spi_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Spi_Ctrl_Type;

/* Bitfield definitions for SCB SPI Status. */
typedef struct Spi_stc_Scb_Spi_Status_field {
  unsigned u1BUS_BUSY     :1;
  unsigned u1SPI_EC_BUSY  :1;
  unsigned                :6;
  unsigned u8CURR_EZ_ADDR :8;
  unsigned u8BASE_EZ_ADDR :8;
  unsigned                :8;
} Spi_stc_Scb_Spi_Status_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Spi_Status {
  uint32 u32Register;
  Spi_stc_Scb_Spi_Status_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Spi_Status_Type;

/* Bitfield definitions for SCB SPI TX Control. */
typedef struct Spi_stc_Scb_Spi_Tx_Ctrl_field {
  unsigned                 :4;
  unsigned u1PARITY        :1;
  unsigned u1ARITY_ENABLED :1;
  unsigned                 :26;
} Spi_stc_Scb_Spi_Tx_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Spi_Tx_Ctrl {
  uint32 u32Register;
  Spi_stc_Scb_Spi_Tx_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Spi_Tx_Ctrl_Type;

/* Bitfield definitions for SCB SPI TX Control. */
typedef struct Spi_stc_Scb_Spi_Rx_Ctrl_field {
  unsigned                        :4;
  unsigned u1PARITY               :1;
  unsigned u1ARITY_ENABLED        :1;
  unsigned                        :2;
  unsigned u1DROP_ON_PARITY_ERROR :1;
  unsigned                        :23;
} Spi_stc_Scb_Spi_Rx_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Spi_Rx_Ctrl {
  uint32 u32Register;
  Spi_stc_Scb_Spi_Rx_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Spi_Rx_Ctrl_Type;

/* Bitfield definitions for SCB SPI TX Control. */
typedef struct Spi_stc_Scb_Tx_Ctrl_field {
  unsigned u5DATA_WIDTH :5;
  unsigned              :3;
  unsigned u1MSB_FIRST  :1;
  unsigned              :7;
  unsigned u1OPEN_DRAIN :1;
  unsigned              :15;
} Spi_stc_Scb_Tx_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Tx_Ctrl {
  uint32 u32Register;
  Spi_stc_Scb_Tx_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Tx_Ctrl_Type;

/* Bitfield definitions for SCB SPI FIFO Control. */
typedef struct Spi_stc_Scb_Fifo_Ctrl_field {
  unsigned u8TRIGGER_LEVEL :8;
  unsigned                 :8;
  unsigned u1CLEAR         :1;
  unsigned u1FREEZE        :1;
  unsigned                 :14;
} Spi_stc_Scb_Fifo_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Fifo_Ctrl {
  uint32 u32Register;
  Spi_stc_Scb_Fifo_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Fifo_Ctrl_Type;

/* Bitfield definitions for SCB SPI FIFO Status. */
typedef struct Spi_stc_Scb_Fifo_Status_field {
  unsigned u9USED     :9;
  unsigned            :6;
  unsigned u1SR_VALID :1;
  unsigned u8RD_PTR   :8;
  unsigned u8WR_PTR   :8;
} Spi_stc_Scb_Fifo_Status_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Fifo_Status {
  uint32 u32Register;
  Spi_stc_Scb_Fifo_Status_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Fifo_Status_Type;

/* Bitfield definitions for SCB SPI RX Control. */
typedef struct Spi_stc_Scb_Rx_Ctrl_field {
  unsigned u5DATA_WIDTH :5;
  unsigned              :3;
  unsigned u1MSB_FIRST  :1;
  unsigned u1MEDIAN     :1;
  unsigned              :22;
} Spi_stc_Scb_Rx_Ctrl_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Rx_Ctrl {
  uint32 u32Register;
  Spi_stc_Scb_Rx_Ctrl_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Rx_Ctrl_Type;

/* Bitfield definitions for SCB Interrupt Cause. */
typedef struct Spi_stc_Scb_Intr_Cause_field {
  unsigned u1M      :1;
  unsigned u1S      :1;
  unsigned u1TX     :1;
  unsigned u1RX     :1;
  unsigned u1I2C_EC :1;
  unsigned u1SPI_EC :1;
  unsigned          :26;
} Spi_stc_Scb_Intr_Cause_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Intr_Cause {
  uint32 u32Register;
  Spi_stc_Scb_Intr_Cause_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Intr_Cause_Type;

/* Bitfield definitions for SCB Interrupt I2C EC. */
typedef struct Spi_stc_Scb_Intr_I2c_Ec_field {
  unsigned u1WAKE_UP          :1;
  unsigned u1EZ_STOP          :1;
  unsigned u1EX_WRITE_STOP    :1;
  unsigned u1EZ_READ_STOP     :1;
  unsigned                    :28;
} Spi_stc_Scb_Intr_I2c_Ec_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Intr_I2c_Ec {
  uint32 u32Register;
  Spi_stc_Scb_Intr_I2c_Ec_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Intr_I2c_Ec_Type;

/* Bitfield definitions for SCB Interrupt SPI EC. */
typedef struct Spi_stc_Scb_Intr_Spi_Ec_field {
  unsigned u1WAKE_UP          :1;
  unsigned u1EZ_STOP          :1;
  unsigned u1EX_WRITE_STOP    :1;
  unsigned u1EZ_READ_STOP     :1;
  unsigned                    :28;
} Spi_stc_Scb_Intr_Spi_Ec_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Intr_Spi_Ec {
  uint32 u32Register;
  Spi_stc_Scb_Intr_I2c_Ec_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Intr_Spi_Ec_Type;

/* Bitfield definitions for SCB Master Interrupt. */
typedef struct Spi_stc_Scb_Intr_M_field {
  unsigned u1I2C_ARB_LOST  :1;
  unsigned u1I2C_NACK      :1;
  unsigned u1I2C_ACK       :1;
  unsigned                 :1;
  unsigned u1I2C_STOP      :1;
  unsigned                 :3;
  unsigned u1I2C_BUS_ERROR :1;
  unsigned u1SPI_DONE      :1;
  unsigned                 :22;
} Spi_stc_Scb_Intr_M_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Intr_M {
  uint32 u32Register;
  Spi_stc_Scb_Intr_M_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Intr_M_Type;

/* Bitfield definitions for SCB Slave Interrupt. */
typedef struct Spi_stc_Scb_Intr_S_field {
  unsigned u1I2C_ARB_LOST     :1;
  unsigned u1I2C_NACK         :1;
  unsigned u1I2C_ACK          :1;
  unsigned u1I2C_WRITE_STOP   :1;
  unsigned u1I2C_STOP         :1;
  unsigned u1I2C_START        :1;
  unsigned u1I2C_ADDR_MATCH   :1;
  unsigned u1I2C_GENERAL      :1;
  unsigned I2C_BUS_ERROR      :1;
  unsigned SPI_EZ_WRITE_STOP  :1;
  unsigned SPI_EZ_STOP        :1;
  unsigned SPI_BUS_ERROR      :1;
  unsigned                    :20;
} Spi_stc_Scb_Intr_S_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Intr_S {
  uint32 u32Register;
  Spi_stc_Scb_Intr_S_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Intr_S_Type;

/* Bitfield definitions for SCB TX Interrupt. */
typedef struct Spi_stc_Scb_Intr_Tx_field {
  unsigned u1TRIGGER       :1;
  unsigned u1NOT_FULL      :1;
  unsigned                 :2;
  unsigned u1EMPTY         :1;
  unsigned u1OVERFLOW      :1;
  unsigned u1UNDERFLOW     :1;
  unsigned u1BLOCKED       :1;
  unsigned uUART_NACK      :1;
  unsigned u1UART_DONE     :1;
  unsigned u1UART_ARB_LOST :1;
  unsigned                 :21;
} Spi_stc_Scb_Intr_Tx_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Intr_Tx {
  uint32 u32Register;
  Spi_stc_Scb_Intr_Tx_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Intr_Tx_Type;

/* Bitfield definitions for SCB RX Interrupt. */
typedef struct Spi_stc_Scb_Intr_Rx_field {
  unsigned u1TRIGGER       :1;
  unsigned                 :1;
  unsigned u1NOT_EMPTY     :1;
  unsigned u1FULL          :1;
  unsigned                 :1;
  unsigned u1OVERFLOW      :1;
  unsigned u1UNDERFLOW     :1;
  unsigned u1BLOCKED       :1;
  unsigned u1FRAME_ERROR   :1;
  unsigned u1PARITY_ERROR  :1;
  unsigned u1BAUD_DETECT   :1;
  unsigned u1BRESK_DETECT  :1;
  unsigned                 :20;
} Spi_stc_Scb_Intr_Rx_field_Type;
/* Deviation from MISRA-C:2004 Rule 18.4, MISRA-C:2012 Rule-19.2.
   Justification: This union type is used for accessing to register. */
/* PRQA S 750 1 */ 
typedef union Spi_un_Scb_Intr_Rx {
  uint32 u32Register;
  Spi_stc_Scb_Intr_Rx_field_Type stcField;
  uint8  au8Byte[4];
  uint16 au16Halfword[2];
} Spi_un_Scb_Intr_Rx_Type;

/** \brief struct Spi_SCBRegsType
**
** Structure holding register definitions for one SCB registers.
*/
typedef struct Spi_stc_SCBRegs {
   VAR(Spi_un_Scb_Ctrl_Type, AUTOMATIC)           unCTRL;                 /* 0x000 */
   VAR(uint32, AUTOMATIC)                         au32Resv0[7];           /* 0x004-0x01C */
   VAR(Spi_un_Scb_Spi_Ctrl_Type, AUTOMATIC)       unSPI_CTRL;             /* 0x020 */
   VAR(Spi_un_Scb_Spi_Status_Type, AUTOMATIC)     unSPI_STATUS;           /* 0x024 */
   VAR(Spi_un_Scb_Spi_Tx_Ctrl_Type, AUTOMATIC)    unSPI_TX_CTRL;          /* 0x028 */
   VAR(Spi_un_Scb_Spi_Rx_Ctrl_Type, AUTOMATIC)    unSPI_RX_CTRL;          /* 0x02C */
   VAR(uint32, AUTOMATIC)                         au32Resv1[116];         /* 0x030-0x1FC */
   VAR(Spi_un_Scb_Tx_Ctrl_Type, AUTOMATIC)        unTX_CTRL;              /* 0x200 */
   VAR(Spi_un_Scb_Fifo_Ctrl_Type, AUTOMATIC)      unTX_FIFO_CTRL;         /* 0x204 */
   VAR(Spi_un_Scb_Fifo_Status_Type, AUTOMATIC)    unTX_FIFO_STATUS;       /* 0x208 */
   VAR(uint32, AUTOMATIC)                         au32Resv2[13];          /* 0x20C-0x23C */
   VAR(uint32, AUTOMATIC)                         TX_FIFO_WR;             /* 0x240 */
   VAR(uint32, AUTOMATIC)                         au32Resv3[47];          /* 0x244-0x2FC */
   VAR(Spi_un_Scb_Rx_Ctrl_Type, AUTOMATIC)        unRX_CTRL;              /* 0x300 */
   VAR(Spi_un_Scb_Fifo_Ctrl_Type, AUTOMATIC)      unRX_FIFO_CTRL;         /* 0x304 */
   VAR(Spi_un_Scb_Fifo_Status_Type, AUTOMATIC)    unRX_FIFO_STATUS;       /* 0x308 */
   VAR(uint32, AUTOMATIC)                         au32Resv4[13];          /* 0x30C-0x33C */
   VAR(uint32, AUTOMATIC)                         RX_FIFO_RD;             /* 0x340 */
   VAR(uint32, AUTOMATIC)                         au32Resv5[687];         /* 0x344-0xDFC */
   VAR(Spi_un_Scb_Intr_Cause_Type, AUTOMATIC)     unINTR_CAUSE;           /* 0xE00 */
   VAR(uint32, AUTOMATIC)                         au32Resv6[31];          /* 0xE04-0xE7C */
   VAR(Spi_un_Scb_Intr_I2c_Ec_Type, AUTOMATIC)    unINTR_I2C_EC;          /* 0xE80 */
   VAR(uint32, AUTOMATIC)                         u32Resv7;               /* 0xE84 */
   VAR(Spi_un_Scb_Intr_I2c_Ec_Type, AUTOMATIC)    unINTR_I2C_EC_MASK;     /* 0xF88 */
   VAR(Spi_un_Scb_Intr_I2c_Ec_Type, AUTOMATIC)    unINTR_I2C_EC_MASKED;   /* 0xF8C */
   VAR(uint32, AUTOMATIC)                         au32Resv8[12];          /* 0xE90-0xEBC */
   VAR(Spi_un_Scb_Intr_Spi_Ec_Type, AUTOMATIC)    unINTR_SPI_EC;          /* 0xEC0 */
   VAR(uint32, AUTOMATIC)                         u32Resv9;               /* 0xEC4 */
   VAR(Spi_un_Scb_Intr_Spi_Ec_Type, AUTOMATIC)    unINTR_SPI_EC_MASK;     /* 0xFC8 */
   VAR(Spi_un_Scb_Intr_Spi_Ec_Type, AUTOMATIC)    unINTR_SPI_EC_MASKED;   /* 0xFCC */
   VAR(uint32, AUTOMATIC)                         au32Resv10[12];         /* 0xED0-0xEFC */
   VAR(Spi_un_Scb_Intr_M_Type, AUTOMATIC)         unINTR_M;               /* 0xF00 */
   VAR(Spi_un_Scb_Intr_M_Type, AUTOMATIC)         unINTR_M_SET;           /* 0xF04 */
   VAR(Spi_un_Scb_Intr_M_Type, AUTOMATIC)         unINTR_M_MASK;          /* 0xF08 */
   VAR(Spi_un_Scb_Intr_M_Type, AUTOMATIC)         unINTR_M_MASKED;        /* 0xF0C */
   VAR(uint32, AUTOMATIC)                         au32Resv11[12];          /* 0xF10-0xF3C */
   VAR(Spi_un_Scb_Intr_S_Type, AUTOMATIC)         unINTR_S;               /* 0xF40 */
   VAR(Spi_un_Scb_Intr_S_Type, AUTOMATIC)         unINTR_S_SET;           /* 0xF44 */
   VAR(Spi_un_Scb_Intr_S_Type, AUTOMATIC)         unINTR_S_MASK;          /* 0xF48 */
   VAR(Spi_un_Scb_Intr_S_Type, AUTOMATIC)         unINTR_S_MASKED;        /* 0xF4C */
   VAR(uint32, AUTOMATIC)                         au32Resv12[12];         /* 0xF50-0xF7C */
   VAR(Spi_un_Scb_Intr_Tx_Type, AUTOMATIC)        unINTR_TX;              /* 0xF80 */
   VAR(Spi_un_Scb_Intr_Tx_Type, AUTOMATIC)        unINTR_TX_SET;          /* 0xF84 */
   VAR(Spi_un_Scb_Intr_Tx_Type, AUTOMATIC)        unINTR_TX_MASK;         /* 0xF88 */
   VAR(Spi_un_Scb_Intr_Tx_Type, AUTOMATIC)        unINTR_TX_MASKED;       /* 0xF8C */
   VAR(uint32, AUTOMATIC)                         au32Resv13[12];          /* 0xF90-0xFBC */
   VAR(Spi_un_Scb_Intr_Rx_Type, AUTOMATIC)        unINTR_RX;              /* 0xFC0 */
   VAR(Spi_un_Scb_Intr_Rx_Type, AUTOMATIC)        unINTR_RX_SET;          /* 0xFC4 */
   VAR(Spi_un_Scb_Intr_Rx_Type, AUTOMATIC)        unINTR_RX_MASK;         /* 0xFC8 */
   VAR(Spi_un_Scb_Intr_Rx_Type, AUTOMATIC)        unINTR_RX_MASKED;       /* 0xFCC */
} Spi_SCBRegsType;

/*==================[external function declarations]========================*/

#endif /*!defined(SPI_DER_TYPES_H_INCLUDED)*/

/*==================[end of file]===========================================*/
