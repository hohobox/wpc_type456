/** \brief AUTOSAR SPI Driver
 **
 ** This file declares the Spi hardware control functions.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef SPI_HW_H_INCLUDED
#define SPI_HW_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Spi_Internal_Types.h>

/*==================[macros]================================================*/

/** \brief SCB Interrupt ALL CLEAR value */
#define SPI_SCB_INTR_M_CLEAR  (0x3FFU)
#define SPI_SCB_INTR_TX_CLEAR (0x7FFU)
#define SPI_SCB_INTR_RX_CLEAR (0xFFFU)
#define SPI_SCB_INTR_FACTOR_CLEAR (0xFFFFFFFFU)

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define SPI_START_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/** \brief Spi_Hw_StartTransmit
 **
 ** Sets the HW unit to start transmission.
 **
 ** \return None.
 ** \param [in] Job       Id of Job.
 ** \param [in] Channel   Id of Channel.
 ** \param [in] SyncType  Synchronous or asynchronous.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_StartTransmit
(
  VAR(Spi_JobType, AUTOMATIC) Job,
  VAR(Spi_ChannelType, AUTOMATIC) Channel,
  VAR(Spi_HWUnitSyncType, AUTOMATIC) SyncType
);

/** \brief Spi_Hw_SetupHwUnit
 **
 ** Sets the HW unit for SCB to start transmission.
 **
 ** \return None.
 ** \param [in] ExternalDevicePtr   Pointer to HW unit configuration.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_SetupHwUnit
(
  P2CONST(Spi_ExternalDeviceConfigType, AUTOMATIC, AUTOMATIC) ExternalDevicePtr
);

/** \brief Spi_Hw_SetupChannel
 **
 ** Sets the HW unit for SCB channel configuration.
 **
 ** \return None.
 ** \param [in] ExternalDevicePtr   Pointer to HW unit configuration.
 ** \param [in] ChannelConfigPtr    Pointer to channel configuration.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_SetupChannel
(
  P2CONST(Spi_ExternalDeviceConfigType, AUTOMATIC, AUTOMATIC) ExternalDevicePtr,
  P2CONST(Spi_ChannelConfigType, AUTOMATIC, AUTOMATIC) ChannelConfigPtr
);

/** \brief Spi_Hw_Finished
 **
 ** Sets the HW unit to stop transmission for finished.
 **
 ** \return None.
 **
 ** \param [in] Factor   Specify the factor of the transmission or reception.
 ** \param [in] HwUnit   Id of HW unit.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_Finished
(
  VAR(Spi_HwFactorType, AUTOMATIC) Factor,
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit
);

/** \brief Spi_Hw_SyncFinished
 **
 ** Sets the HW unit to stop transmission for Sync.
 **
 ** \return None.
 **
 ** \param [in] JobConfigPtr    Pointer of Job config.
 ** \param [in] HwUnit          Id of HW unit.
 ** \param [in] Factor          Specify the factor of the transmission or
 **                             reception.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_SyncFinished
(
  P2CONST(Spi_JobConfigType, AUTOMATIC, AUTOMATIC) JobConfigPtr,
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_HwFactorType, AUTOMATIC) Factor
);

/** \brief Spi_Hw_CheckFinished
 **
 ** Checks whether the transmission is finished or not.
 **
 ** \return SPI_OK: Transmission has been finished.
 ** SPI_NOT_OK: Transmission has not been finished.
 ** \param [in] Factor   Specify the factor of the transmission or reception.
 ** \param [in] HwUnit   Id of Channel.
 **
 */
extern FUNC(Spi_ReturnType, SPI_CODE) Spi_Hw_CheckFinished
(
  VAR(Spi_HwFactorType, AUTOMATIC) Factor,
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit
);

/** \brief Spi_Hw_ValidateEvent
 **
 ** Validates the Event and transmission/reception status.
 **
 ** \return SPI_OK: transmission and reception have been finished.
 ** SPI_NOT_OK: transmission and reception have not been finished.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [out] EventStatus   Pointer to event status.
 **
 */
extern FUNC(Spi_ReturnType, SPI_CODE) Spi_Hw_ValidateEvent
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  P2VAR(uint8, AUTOMATIC, AUTOMATIC) EventStatusPtr
);

/** \brief Spi_Hw_SetHwUnitStatus
 **
 ** Sets the status of the specified HW unit.
 **
 ** \return None.
 ** \param [in] HwUnit   Id of HW unit.
 ** \param [in] Status   HW unit status.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_SetHwUnitStatus
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_StatusType, AUTOMATIC) Status
);


/** \brief Spi_Hw_Init
 **
 ** Initializes the all HW units.
 **
 ** \return None.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_Init(void);

/** \brief Spi_Hw_DeInit
 **
 ** De-initializes the all HW units.
 **
 ** \return None.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_DeInit(void);


/** \brief Spi_Hw_TerminateHwUnit
 **
 ** Terminate the HW unit.
 **
 ** \return SPI_OK:     Terminate command has been accepted
 **         SPI_NOT_OK: Terminate command has not been accepted
 **
 ** \param [in] ExternalDevicePtr   Pointer to HW unit configuration.
 ** \param [in] SyncType            Synchronous or asynchronous.
 **
 */
extern FUNC(Spi_ReturnType, SPI_CODE) Spi_Hw_TerminateHwUnit
(
  P2CONST(Spi_ExternalDeviceConfigType, AUTOMATIC, AUTOMATIC) ExternalDevicePtr,
  VAR(Spi_HWUnitSyncType, AUTOMATIC) SyncType
);

/** \brief Spi_Hw_ChangeOvs
 **
 ** Set ScbOvsValue to  Active OVS value to change over sampling setting of
 ** SCB CTRL.OVS bits.
 **
 ** \return None
 **
 ** \param [in] ExtDev        Id of external device.
 ** \param [in] ScbOvsValue   Value of OVS bits in SCB CTRL register.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_ChangeOvs
(
  CONST(Spi_ExtDeviceType, AUTOMATIC) ExtDev,
  VAR(Spi_OvsValueType, AUTOMATIC) ScbOvsValue
);

/** \brief Spi_Hw_JudgeSCBFactor
 **
 ** Judge Factor type of SCB interrupts.
 **
 ** \return The factor of the transmission or reception.
 **
 ** \param [in] HwUnit        Hw Unit Id
 **
 */
extern FUNC(Spi_HwFactorType, SPI_CODE) Spi_Hw_JudgeSCBFactor
(
  CONST(Spi_HWUnitType, AUTOMATIC) HwUnit
);

/** \brief Spi_Hw_JudgeDMAFactor
 **
 ** Judge error or complettion of SPI used  DMA channels.
 **
 ** \return The factor of the transmission or reception.
 **
 ** \param [in] HwUnit      Hw Unit Id
 ** \param [in] Factor      Specify the factor of the transmission or
 **                         reception.
 **
 */
extern FUNC(Spi_HwFactorType, SPI_CODE) Spi_Hw_JudgeDMAFactor
(
  VAR(Spi_HWUnitType, AUTOMATIC) HwUnit,
  VAR(Spi_HwFactorType, AUTOMATIC) Factor
);

/** \brief Spi_Hw_InitDescriptor
 **
 ** Initialize descriptor for channel.
 **
 ** \return None.
 ** \param [in] Job    Id of Job.
 **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_InitDescriptor
(
  VAR(Spi_JobType, AUTOMATIC) Job
);

/** \brief Spi_Hw_UpdateDescriptor
 **
 ** Update descriptor for channel.
 **
 ** \return None.
 ** \param [in] Channel Channel ID
 ** \param [in] SrcDataBufferPtr Pointer to source data buffer
 ** \param [in] DesDataBufferPtr
 **             Pointer to destination data buffer in RAM
 ** \param [in] Length
 *              Length (in number of data elements) of the data to be  
 **             transmitted from SrcdataBufferPtr and/or received 
 **             from DesDataBufferPtr.
 **               Min.: 1
 **               Max.: Maximum of data specified at configuration
 **                     for this channel **
 */
extern FUNC(void, SPI_CODE) Spi_Hw_UpdateDescriptor
(
  VAR( Spi_ChannelType, AUTOMATIC ) Channel,
  P2CONST( Spi_DataBufferType, AUTOMATIC, AUTOMATIC ) SrcDataBufferPtr,
  P2VAR( Spi_DataBufferType, AUTOMATIC, AUTOMATIC ) DesDataBufferPtr,
  VAR( Spi_NumberOfDataType, AUTOMATIC ) Length
);

/** \brief Spi_Hw_ClearAllIrqFactor
 **
 ** Clear All Interrupt request factors
 **
 ** \return None.
 ** \param [in] CurScbPtr Pointer to the current SCB register.
 */
extern FUNC(void, SPI_CODE) Spi_Hw_ClearAllIrqFactor
(
  P2VAR(volatile Spi_SCBRegsType, AUTOMATIC, REGSPACE) CurScbPtr
);

#define SPI_STOP_SEC_CODE_ASIL_B
#include <Spi_MemMap.h>

/*==================[internal constants]====================================*/


/*==================[internal data]=========================================*/

#endif /*!defined(SPI_HW_H_INCLUDED)*/

/*==================[end of file]===========================================*/
