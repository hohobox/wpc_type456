/** \brief AUTOSAR SPI Driver
 **
 ** This file contains internal type definitions in Spi module.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

 /* NOTE: In order to access hardware register elements, bitfields in 
          conjunction with unions are used in this file. A specific packing of 
          the bitfields is required for correct operation.
          This is only assured by using one of the compilers and corresponding 
          options which are approved for this software product. Please consult
          the Release Notes for information on supported compilers.
 */

#ifndef SPI_INTERNAL_TYPES_H_INCLUDED
#define SPI_INTERNAL_TYPES_H_INCLUDED

/*==================[inclusions]============================================*/
#include <Spi_Types.h>

/*==================[macros]================================================*/

/** Specify the transmission interrupt to factors. */
#define SPI_HW_FACTOR_SCB_TX        ( (Spi_HwFactorType) 0U )
/** Specify the reception interrupt to factors. */
#define SPI_HW_FACTOR_SCB_RX        ( (Spi_HwFactorType) 1U )
/** Specify the transmission interrupt of DMA to factors.(DMA use only) */
#define SPI_HW_FACTOR_DMA_TX        ( (Spi_HwFactorType) 2U )
/** Specify the reception interrupt of DMA to factors.(DMA use only) */
#define SPI_HW_FACTOR_DMA_RX        ( (Spi_HwFactorType) 3U )
/** Specify the interrupt of SCB error to factors.(DMA use only) */
#define SPI_HW_FACTOR_SCB_ERROR     ( (Spi_HwFactorType) 4U )
/** Specify the interrupt of DMA error to factors.(DMA use only) */
#define SPI_HW_FACTOR_DMA_ERROR     ( (Spi_HwFactorType) 5U )
/** Specify the transmission and reception interrupt to factors. */
#define SPI_HW_FACTOR_SCB_TX_AND_RX ( (Spi_HwFactorType) 6U )
/** Specify the transmission and reception interrupt of DMA to factors.
  (DMA use only) */
#define SPI_HW_FACTOR_DMA_TX_AND_RX ( (Spi_HwFactorType) 7U )



/** Invalid sequence ID. */
#define SPI_INVALID_SEQUENCE ( 0xFFU )
/** Invalid job ID. */
#define SPI_INVALID_JOB      ( 0xFFFFU )
/** Invalid channel ID. */
#define SPI_INVALID_CHANNEL  ( 0xFFU )
/** Invalid HW unit ID. */
#define SPI_INVALID_HWUNIT   ( 0xFFU )


/* Data Width Mask */
#define SPI_SCB_DATA_WIDTH_MASK     ( (uint8) 0x1FU )
/* Data Width Bit Pattern 4 - 32 */
#define SPI_SCB_DATA_WIDTH_4        ( (uint8) 0x03U )   
#define SPI_SCB_DATA_WIDTH_5        ( (uint8) 0x04U )
#define SPI_SCB_DATA_WIDTH_6        ( (uint8) 0x05U )
#define SPI_SCB_DATA_WIDTH_7        ( (uint8) 0x06U )
#define SPI_SCB_DATA_WIDTH_8        ( (uint8) 0x07U )
#define SPI_SCB_DATA_WIDTH_9        ( (uint8) 0x08U )
#define SPI_SCB_DATA_WIDTH_10       ( (uint8) 0x09U )
#define SPI_SCB_DATA_WIDTH_11       ( (uint8) 0x0AU )
#define SPI_SCB_DATA_WIDTH_12       ( (uint8) 0x0BU )
#define SPI_SCB_DATA_WIDTH_13       ( (uint8) 0x0CU )
#define SPI_SCB_DATA_WIDTH_14       ( (uint8) 0x0DU )
#define SPI_SCB_DATA_WIDTH_15       ( (uint8) 0x0EU )
#define SPI_SCB_DATA_WIDTH_16       ( (uint8) 0x0FU )
#define SPI_SCB_DATA_WIDTH_17       ( (uint8) 0x10U )
#define SPI_SCB_DATA_WIDTH_18       ( (uint8) 0x11U )
#define SPI_SCB_DATA_WIDTH_19       ( (uint8) 0x12U )
#define SPI_SCB_DATA_WIDTH_20       ( (uint8) 0x13U )
#define SPI_SCB_DATA_WIDTH_21       ( (uint8) 0x14U )
#define SPI_SCB_DATA_WIDTH_22       ( (uint8) 0x15U )
#define SPI_SCB_DATA_WIDTH_23       ( (uint8) 0x16U )
#define SPI_SCB_DATA_WIDTH_24       ( (uint8) 0x17U )
#define SPI_SCB_DATA_WIDTH_25       ( (uint8) 0x18U )
#define SPI_SCB_DATA_WIDTH_26       ( (uint8) 0x19U )
#define SPI_SCB_DATA_WIDTH_27       ( (uint8) 0x1AU )
#define SPI_SCB_DATA_WIDTH_28       ( (uint8) 0x1BU )
#define SPI_SCB_DATA_WIDTH_29       ( (uint8) 0x1CU )
#define SPI_SCB_DATA_WIDTH_30       ( (uint8) 0x1DU )
#define SPI_SCB_DATA_WIDTH_31       ( (uint8) 0x1EU )
#define SPI_SCB_DATA_WIDTH_32       ( (uint8) 0x1FU )

/* The bit size for the data width  */
#define SPI_BITSIZE_BYTE         ( 8U )
#define SPI_BITSIZE_HALFWORD     ( 16U )
#define SPI_BITSIZE_FWORD        ( 32U )

/* The byte size for the buffer position */
#define SPI_BYTESIZE_8BIT        ( 1U )
#define SPI_BYTESIZE_16BIT       ( 2U )
#define SPI_BYTESIZE_32BIT       ( 4U )

/** \brief the highest priority of jobs */
#define SPI_JOB_MAX_PRI ( 4U )

/*==================[type definitions]======================================*/

/** \brief typedef  Spi_HwFactorType
 **
 ** Factor of the transmission or reception.
 */
typedef uint8 Spi_HwFactorType;


/*==================[external function declarations]========================*/

#endif 

/*==================[end of file]===========================================*/
