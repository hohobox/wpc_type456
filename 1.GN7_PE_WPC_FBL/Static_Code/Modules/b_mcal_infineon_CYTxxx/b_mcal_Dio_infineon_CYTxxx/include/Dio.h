#ifndef DIO_H
#define DIO_H

/** \brief AUTOSAR Dio DIO Driver
 **
 ** This file contains or includes the public identifiers of
 ** the AUTOSAR module Dio.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */
/*==================[inclusions]=============================================*/
#include <Std_Types.h>           /* AUTOSAR standard types */
#include <Dio_Cfg.h>         /* include generated configuration
                                with all symbolic names */
#include <Dio_Types.h>       /* DIO driver types */
#include <Dio_Version.h>     /* version check */

/*==================[macros]=================================================*/
/*------------------[AUTOSAR AR version number check]------------------------*/
#if !DIO_AR_VERSION_CHECK(4U, 2U, 2U)
#error AUTOSAR AR version number mismatch
#endif
/*------------------[AUTOSAR SW version number check]------------------------*/
#if !DIO_SW_VERSION_CHECK(1U, 11U, DIO_GEN_SW_PATCH_VERSION)
#error AUTOSAR SW version number mismatch
#endif

/*==================[version check]==========================================*/

/*------------------[AUTOSAR configuration AR version number check]----------*/
#if !DIO_AR_VERSION_CHECK(DIO_GEN_AR_RELEASE_MAJOR_VERSION,DIO_GEN_AR_RELEASE_MINOR_VERSION , \
                          DIO_GEN_AR_RELEASE_REVISION_VERSION)
#error AUTOSAR configuration AR version number mismatch
#endif
/*------------------[AUTOSAR configuration SW version number check]----------*/
#if !DIO_SW_VERSION_CHECK(DIO_GEN_SW_MAJOR_VERSION, DIO_GEN_SW_MINOR_VERSION, DIO_GEN_SW_PATCH_VERSION)
#error AUTOSAR configuration SW version number mismatch
#endif

/*------------------[AUTOSAR configuration additional check]-----------------*/
#if !DIO_EXTRA_CHECK(DIO_GEN_MODULE_ID, DIO_GEN_VENDOR_ID, DIO_INSTANCE_ID)
#error AUTOSAR configuation additional check mismatch
#endif

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/
#define DIO_START_SEC_CODE_ASIL_B
#include <Dio_MemMap.h>

/** \brief Dio_ReadChannel
 **
 ** This function reads and returns the value of the channel specified by
 ** the parameter \p ChannelId.
 **
 ** \pre \p ChannelId is valid (only checked in development mode).
 **
 ** \param[in] ChannelId   The ID of the DIO channel.
 **
 ** \retval STD_HIGH    If the physical level of the channel is high.
 ** \retval STD_LOW     If the physical level of the channel is low.
 ** \retval 0           If \p ChannelId is invalid (development mode only).
 ** */
extern FUNC(Dio_LevelType, DIO_CODE)
    Dio_ReadChannel(Dio_ChannelType ChannelId);

/** \brief  Dio_WriteChannel
 **
 ** This function writes the value \p Level to the channel specified by
 ** the parameter \p ChannelId.
 **
 ** \pre \p ChannelId is valid (only checked in development mode).
 **
 ** \param[in] ChannelId   The ID of the DIO channel.
 ** \param[in] Level       The value to write.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE)
    Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level);

/** \brief Dio_ReadPort
 **
 ** This function reads and returns the value of the port specified by
 ** the parameter \p PortId.
 **
 ** \pre \p PortId is valid (only checked in development mode).
 **
 ** \param[in] PortId   The ID of the port.
 ** 
 ** \retval The value of the port, range depends on the width of the port
 **                                0 .. 2^PortWidth-1.
 ** \retval 0   If \p PortId is invalid (development mode only).
 ** */
extern FUNC(Dio_PortLevelType, DIO_CODE)
    Dio_ReadPort(Dio_PortType PortId);

/** \brief  Dio_WritePort
 **
 ** This function writes the value \p Level to the port specified by
 ** the parameter \p PortId.
 **
 ** \pre \p PortId is valid (only checked in development mode).
 **
 ** \param[in] PortId   The ID of the port.
 ** \param[in] Level    The value to write.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE)
    Dio_WritePort(Dio_PortType PortId, Dio_PortLevelType Level);

#if (DIO_MASKED_WRITE_PORT_API == STD_ON)
/** \brief  Dio_MaskedWritePort
 **
 ** This function writes the value \p Level masked by the \p Mask
 ** to the port specified by the parameter \p PortId.
 **
 ** \pre \p PortId is valid (only checked in development mode).
 **
 ** \param[in] PortId   The ID of the port.
 ** \param[in] Level    The value to write.
 ** \param[in] Mask     The value of mask.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE)
    Dio_MaskedWritePort(Dio_PortType PortId, Dio_PortLevelType Level, Dio_PortLevelType Mask);
#else
#define Dio_MaskedWritePort(a, b, c) Dio_MaskedWritePort_API_Disabled(a, b, c)
#endif

/** \brief Dio_ReadChannelGroup
 **
 ** This function reads and returns the value of a channel group specified by
 ** the parameter \p ChannelGroupIdPtr.
 **
 ** \pre \p ChannelGroupIdPtr is valid (only checked in development mode).
 **
 ** \param[in] ChannelGroupIdPtr  A pointer to a \ref Dio_ChannelGroupType
 **                               containing the channel group
 **                               configuration data.
 **
 ** \retval The value of the channel group, range depends on the width of the
 **                                         group, 0 .. 2^GroupWidth-1
 ** \retval 0   If \p ChannelGroupId is invalid (development mode only).
 ** */
extern FUNC(Dio_PortLevelType, DIO_CODE) Dio_ReadChannelGroup
    (
        P2CONST(Dio_ChannelGroupType, AUTOMATIC, DIO_APPL_CONST) ChannelGroupIdPtr
    );

/** \brief  Dio_WriteChannelGroup
 **
 ** This function writes the value \p Level to the channel group specified by
 ** the parameter \p ChannelGroupIdPtr.
 **
 ** \pre \p ChannelGroupIdPtr is valid (only checked in development mode).
 **
 ** \param[in] ChannelGroupIdPtr   A pointer to a Dio_ChannelGroupType
 **                             containing the channel group configuration.
 ** \param[in] Level            The value to write.
 **
 ** \retval     none
 ** */
extern FUNC(void, DIO_CODE) Dio_WriteChannelGroup
    (
        P2CONST(Dio_ChannelGroupType, AUTOMATIC, DIO_APPL_CONST) ChannelGroupIdPtr,
        Dio_PortLevelType Level
    );


#if (DIO_FLIP_CHANNEL_API == STD_ON)
/** \brief  Dio_FlipChannel
 **
 ** Returns the value of the specified DIO channel.
 ** This function flips (change from 1 to 0 or from 0 to 1) the level of
 ** a channel and returns the level of the channel after flip.
 **
 ** \pre \p ChannelId is valid (only checked in development mode).
 **
 ** \param[in] ChannelId   The ID of the channel.
 **
 ** \retval STD_HIGH   If the physical level of the channel is high.
 ** \retval STD_LOW    If the physical level of the channel is low.
 ** \retval 0          If \p ChannelId is invalid (development mode only).
 ** */
extern FUNC(Dio_LevelType, DIO_CODE) 
  Dio_FlipChannel(Dio_ChannelType ChannelId);
#else
#define Dio_FlipChannel(a) Dio_FlipChannel_API_Disabled(a)
#endif


#if (DIO_GET_VERSION_INFO_API == STD_ON)
/** \brief  Dio_GetVersionInfo
 **
 ** Get Version Information.
 ** This function return the version of the Dio driver
 ** in a Std_VersionInfoType structure.
 **
 ** \pre \p VersionInfo is not equal to zero.
 **
 ** \param[out] VersionInfo Dio driver module's version.
 **
 ** \retval    none
 ** */
extern FUNC(void, DIO_CODE) Dio_GetVersionInfo
    (
        P2VAR(Std_VersionInfoType, AUTOMATIC, DIO_APPL_DATA) VersionInfo
    );
#else
#define Dio_GetVersionInfo(a) Dio_GetVersionInfo_API_Disabled(a)
#endif

#define DIO_STOP_SEC_CODE_ASIL_B
#include <Dio_MemMap.h>

/*==================[external constants]=====================================*/
#define DIO_START_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Dio_MemMap.h>

/* extern declaration for the configured channel groups */
#if !(defined DIO_NR_OF_CHANNEL_GROUPS)
#error "DIO_NR_OF_CHANNEL_GROUPS not defined. Check generated file Dio_Cfg.h"
#else
#if (DIO_NR_OF_CHANNEL_GROUPS > 0u)
extern CONST(Dio_ChannelGroupType, DIO_APPL_CONST)
   Dio_ChannelGroupCfg[DIO_NR_OF_CHANNEL_GROUPS];
#endif
#endif

#define DIO_STOP_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Dio_MemMap.h>

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#endif /* DIO_H */
/*==================[end of file]============================================*/
