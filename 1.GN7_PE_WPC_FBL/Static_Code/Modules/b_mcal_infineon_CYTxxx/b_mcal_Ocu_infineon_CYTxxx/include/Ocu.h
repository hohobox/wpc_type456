#ifndef OCU_H_INCLUDED
#define OCU_H_INCLUDED

/** \brief AUTOSAR Ocu Driver
 **
 ** This file contains or includes all external identifiers of the AUTOSAR Ocu driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Std_Types.h>   /* AUTOSAR standard types */
#include <Ocu_PBcfg.h>   /* Post-build configuration */
#include <Ocu_Cfg.h>     /* Generated OCU driver config */
#include <Ocu_Version.h> /* Module version declaration */

/*==================[macros]================================================*/

/*------------------[OCU error codes]---------------------------------------*/
/** API services other than Ocu_GetVersionInfo() and Ocu_Init() used without module initialization. */
#define OCU_E_UNINIT                                        0x02U
/** API service used with an invalid channel Identifier. */
#define OCU_E_PARAM_INVALID_CHANNEL                         0x03U
/** API Ocu_SetPinState() called with an invalid pin state or when the channel is in the RUNNING state. */
#define OCU_E_PARAM_INVALID_STATE                           0x04U
/** API Ocu_SetPinAction() called with an invalid pin action. */
#define OCU_E_PARAM_INVALID_ACTION                          0x05U
/** Usage of Ocu_DisableNotification() or Ocu_EnableNotification() on a channel where a NULL pointer is
 ** configured as the notification function. */
#define OCU_E_NO_VALID_NOTIF                                0x06U
/** API Ocu_Init() called while the OCU driver has already been initialized. */
#define OCU_E_ALREADY_INITIALIZED                           0x07U
/** API Ocu_GetVersionInfo() is called with a NULL parameter. */
#define OCU_E_PARAM_POINTER                                 0x08U
/** API Ocu_StartChannel() called on a channel that is in state RUNNING. */
#define OCU_E_BUSY                                          0x09U
/** Ocu_SetPinState() or Ocu_SetPinAction() called for a channel that doesn't have an associated output pin. */
#define OCU_E_PARAM_NO_PIN                                  0x0AU
/** OCU initialization has been failed, e.g. selected configuration set doesn't exist. */
#define OCU_E_INIT_FAILED                                   0x0BU
/** API Ocu_SetPrescaler() is called with an invalid clock frequency. */
#define OCU_E_PARAM_INVALID_CLOCK                           0xF0U
/** API Ocu_SetAbsoluteThreshold() is called with an invalid ReferenceValue. */
#define OCU_E_PARAM_REFERENCEVALUE                          0xF1U
/** API Ocu_SetAbsoluteThreshold() is called with an invalid AbsoluteValue. */
#define OCU_E_PARAM_ABSOLUTETHRESHOLD                       0xF2U
/** API Ocu_SetRelativeThreshold() is called with an invalid RelativeValue. */
#define OCU_E_PARAM_RELATIVETHRESHOLD                       0xF3U
/** API Ocu_StartChannel() or Ocu_SetPinState() or Ocu_SetAbsoluteThreshold() or Ocu_SetRelativeThreshold()
 ** or Ocu_SetPrescaler() is called before Port_ActTrigger() is called. */
#define OCU_E_WAITING_TRIGGER                               0xF4U

/*------------------[OCU service IDs]---------------------------------------*/
/** Identifier of Ocu_Init API. */
#define OCU_API_SERVICE_INIT                                0x00U
/** Identifier of Ocu_DeInit API. */
#define OCU_API_SERVICE_DEINIT                              0x01U
/** Identifier of Ocu_StartChannel API. */
#define OCU_API_SERVICE_START_CHANNEL                       0x02U
/** Identifier of Ocu_StopChannel API. */
#define OCU_API_SERVICE_STOP_CHANNEL                        0x03U
/** Identifier of Ocu_SetPinState API. */
#define OCU_API_SERVICE_SET_PIN_STATE                       0x04U
/** Identifier of Ocu_SetPinAction API. */
#define OCU_API_SERVICE_SET_PIN_ACTION                      0x05U
/** Identifier of Ocu_GetCounter API. */
#define OCU_API_SERVICE_GET_COUNTER                         0x06U
/** Identifier of Ocu_SetAbsoluteThreshold API. */
#define OCU_API_SERVICE_SET_ABSOLUTE_THRESHOLD              0x07U
/** Identifier of Ocu_SetRelativeThreshold API. */
#define OCU_API_SERVICE_SET_RELATIVE_THRESHOLD              0x08U
/** Identifier of Ocu_GetVersionInfo API. */
#define OCU_API_SERVICE_GET_VERSION_INFO                    0x09U
/** Identifier of Ocu_DisableNotification API. */
#define OCU_API_SERVICE_DISABLE_NOTIFICATION                0x0AU
/** Identifier of Ocu_EnableNotification API. */
#define OCU_API_SERVICE_ENABLE_NOTIFICATION                 0x0BU
/** Identifier of Ocu_InterruptHandler API. */
#define OCU_API_SERVICE_INTERRUPT_HANDLER                   0xFCU
/** Identifier of Ocu_CheckChannelStatus API. */
#define OCU_API_SERVICE_CHECK_CHANNEL_STATUS                0xFDU
/** Identifier of Ocu_SetPrescaler API. */
#define OCU_API_SERVICE_SET_PRESCALER                       0xFEU

/*==================[type definitions]======================================*/

/*==================[external constants]====================================*/

/*==================[external data]=========================================*/

/*==================[external function declarations]========================*/

#define OCU_START_SEC_CODE_ASIL_B
#include <Ocu_MemMap.h>

/** \brief Ocu_Init
 **
 ** Service for OCU initialization.
 **
 ** This function initializes all configured channels.
 ** Start all free-running counters.
 ** Notifications are disabled for all channels.
 ** Triggers are enabled or disabled for all channels by configuration.
 **
 ** Preconditions:
 ** - No Init call should be done before.
 **
 ** \param [in] ConfigPtr  Pointer to configuration set.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_Init
(
  P2CONST( Ocu_ConfigType, AUTOMATIC, OCU_APPL_CONST ) ConfigPtr
);

#if ( OCU_DEINIT_API == STD_ON )
/** \brief Ocu_DeInit
 **
 ** Service for OCU De-Initialization.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_DeInit( void );
#endif /* ( OCU_DEINIT_API == STD_ON ) */

/** \brief Ocu_StartChannel
 **
 ** Service to start an OCU channel.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the OCU channel.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_StartChannel
(
  VAR( Ocu_ChannelType, AUTOMATIC ) ChannelNumber
);

/** \brief Ocu_StopChannel
 **
 ** Service to stop an OCU channel.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the OCU channel.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_StopChannel
(
  VAR( Ocu_ChannelType, AUTOMATIC ) ChannelNumber
);

#if ( OCU_SET_PIN_ACTION_API == STD_ON )
/** \brief Ocu_SetPinAction
 **
 ** Service to indicate the driver what shall be done automatically by hardware upon compare match.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the OCU channel.
 ** \param [in] PinAction      Type of pin action:
 **                            OCU_SET_LOW or
 **                            OCU_SET_HIGH or
 **                            OCU_TOGGLE or
 **                            OCU_DISABLE.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_SetPinAction
(
  VAR( Ocu_ChannelType, AUTOMATIC )   ChannelNumber,
  VAR( Ocu_PinActionType, AUTOMATIC ) PinAction
);
#endif /* ( OCU_SET_PIN_ACTION_API == STD_ON ) */

#if ( OCU_SET_PIN_STATE_API == STD_ON )
/** \brief Ocu_SetPinState
 **
 ** Service to set immediately the level of the pin associated to an OCU channel.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the OCU channel.
 ** \param [in] PinState       Type of pin state:
 **                            OCU_LOW or
 **                            OCU_HIGH.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_SetPinState
(
  VAR( Ocu_ChannelType, AUTOMATIC )   ChannelNumber,
  VAR( Ocu_PinStateType, AUTOMATIC )  PinState
);
#endif /* ( OCU_SET_PIN_STATE_API == STD_ON ) */

#if ( OCU_GET_COUNTER_API == STD_ON )
/** \brief Ocu_GetCounter
 **
 ** Service to read the current value of the counter.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the OCU channel.
 **
 ** \return  Content of the counter in ticks.
 **
 */
extern FUNC( Ocu_ValueType, OCU_CODE ) Ocu_GetCounter
(
  VAR( Ocu_ChannelType, AUTOMATIC )   ChannelNumber
);
#endif /* ( OCU_GET_COUNTER_API == STD_ON ) */

#if ( OCU_SET_ABSOLUTE_THRESHOLD_API == STD_ON )
/** \brief Ocu_SetAbsoluteThreshold
 **
 ** Service to set the value of the channel threshold using an absolute input data.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the OCU channel.
 ** \param [in] ReferenceValue  Value given by the upper layer and used as a base to determine whether
 **                             to call the notification before the function exits or not.
 ** \param [in] AbsoluteValue   Value to compare with the content of the counter. This value is in ticks.
 **
 ** \return  Return information after setting a new threshold value.
 **          OCU_CM_OUT_REF_INTERVAL: The compare match will not occur inside the current Reference Interval.
 **          OCU_CM_IN_REF_INTERVAL:  The compare match will occur inside the current Reference Interval.
 **
 */
extern FUNC( Ocu_ReturnType, OCU_CODE ) Ocu_SetAbsoluteThreshold
(
  VAR( Ocu_ChannelType, AUTOMATIC )   ChannelNumber,
  VAR( Ocu_ValueType, AUTOMATIC )     ReferenceValue,
  VAR( Ocu_ValueType, AUTOMATIC )     AbsoluteValue
);
#endif /* ( OCU_SET_ABSOLUTE_THRESHOLD_API == STD_ON ) */

#if ( OCU_SET_RELATIVE_THRESHOLD_API == STD_ON )
/** \brief Ocu_SetRelativeThreshold
 **
 ** Service to set the value of the channel threshold relative to the current value of the counter.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the OCU channel.
 ** \param [in] RelativeValue  Value to use for computing the new threshold.
 **
 ** \return  Return information after setting a new threshold value.
 **          OCU_CM_OUT_REF_INTERVAL: The compare match will not occur inside the current Reference Interval.
 **          OCU_CM_IN_REF_INTERVAL:  The compare match will occur inside the current Reference Interval.
 **
 */
extern FUNC( Ocu_ReturnType, OCU_CODE ) Ocu_SetRelativeThreshold
(
  VAR( Ocu_ChannelType, AUTOMATIC )   ChannelNumber,
  VAR( Ocu_ValueType, AUTOMATIC )     RelativeValue
);
#endif /* ( OCU_SET_RELATIVE_THRESHOLD_API == STD_ON ) */

#if ( OCU_VERSION_INFO_API == STD_ON )
/** \brief Ocu_GetVersionInfo
 **
 ** Service to return the version information of this module.
 **
 ** \param [out] versioninfo  Pointer to where to store the version information of this module.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_GetVersionInfo
(
  P2VAR( Std_VersionInfoType, AUTOMATIC, OCU_APPL_DATA )  versioninfo
);
#endif /* ( OCU_VERSION_INFO_API == STD_ON ) */

#if ( OCU_NOTIFICATION_SUPPORTED == STD_ON )
/** \brief Ocu_DisableNotification
 **
 ** Service to disable notifications from an OCU channel.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the OCU channel.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_DisableNotification
(
  VAR( Ocu_ChannelType, AUTOMATIC )  ChannelNumber
);

/** \brief Ocu_EnableNotification
 **
 ** Service to enable notifications from an OCU channel.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the OCU channel.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_EnableNotification
(
  VAR( Ocu_ChannelType, AUTOMATIC )  ChannelNumber
);
#endif /* ( OCU_NOTIFICATION_SUPPORTED == STD_ON ) */

#if ( OCU_SAFETY_FUNCTION_API == STD_ON )
/** \brief Ocu_CheckChannelStatus
 **
 ** Service to check the current status of the channel.
 **
 ** \param [out] DriverStatusPtr   Pointer to where to store the driver status information.
 ** \param [out] ChannelStatusPtr  Pointer to where to store the channel status information.
 ** \param [in]  ChannelNumber     Numeric identifier of the OCU channel.
 **
 ** \return  E_OK: No error has been detected.
 **          E_NOT_OK: Aborted due to errors.
 **
 */
extern FUNC( Std_ReturnType, OCU_CODE ) Ocu_CheckChannelStatus
(
  P2VAR( Ocu_DriverStatusType, AUTOMATIC, OCU_APPL_DATA )    DriverStatusPtr,
  P2VAR( Ocu_ChannelStatusType, AUTOMATIC, OCU_APPL_DATA )   ChannelStatusPtr,
  VAR( Ocu_ChannelType, AUTOMATIC )                          ChannelNumber
);
#endif /* ( OCU_SAFETY_FUNCTION_API == STD_ON ) */

#if ( OCU_SET_PRESCALER_API == STD_ON )
/** \brief Ocu_SetPrescaler
 **
 ** The API changes a pre-scaling value of the selected channel by the specified input clock source frequency for
 ** timer HW (TCPWM).
 **
 ** \param [in] ChannelNumber   Numeric identifier of the OCU channel.
 ** \param [in] ClockFrequency  Input clock frequency.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_SetPrescaler
(
  VAR( Ocu_ChannelType, AUTOMATIC )        ChannelNumber,
  VAR( Ocu_ClkFrequencyType, AUTOMATIC )   ClockFrequency
);
#endif /* ( OCU_SET_PRESCALER_API == STD_ON ) */

#define OCU_STOP_SEC_CODE_ASIL_B
#include <Ocu_MemMap.h>

#endif /*!defined(OCU_H_INCLUDED)*/
/*==================[end of file]===========================================*/
