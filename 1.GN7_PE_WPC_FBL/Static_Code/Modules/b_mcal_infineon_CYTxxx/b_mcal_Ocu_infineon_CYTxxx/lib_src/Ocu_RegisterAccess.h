#ifndef OCU_REGISTERACCESS_H_INCLUDED
#define OCU_REGISTERACCESS_H_INCLUDED

/** \brief AUTOSAR Ocu Driver
 **
 ** This file defines interfaces and macros of register access function.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]============================================*/
#include <Ocu_Types.h>   /* Module public types */

/*==================[macros]================================================*/
/** TCPWM register init value */
/** TCPWM register CTRL init value */
#define OCU_REG_VALUE_TCPWM_CTRL                       ( (uint32) 0x04000000UL )
/** TCPWM register DT init value */
#define OCU_REG_VALUE_TCPWM_DT                         ( (uint32) 0x00000000UL )
/** TCPWM register TR_PWM_CTRL init value */
#define OCU_REG_VALUE_TCPWM_TR_PWM_CTRL                ( (uint32) 0x000000FFUL )
/** TCPWM register COUNTER init value */
#define OCU_REG_VALUE_TCPWM_COUNTER                    ( (uint32) 0x00000000UL )
/** TCPWM register CC0 init value */
#define OCU_REG_VALUE_TCPWM_CC0                        ( (uint32) 0xFFFFFFFFUL )
/** TCPWM register CC1 init value */
#define OCU_REG_VALUE_TCPWM_CC1                        ( (uint32) 0xFFFFFFFFUL )
/** TCPWM register PERIOD init value */
#define OCU_REG_VALUE_TCPWM_PERIOD                     ( (uint32) 0xFFFFFFFFUL )
/** TCPWM register TR_OUT_SEL init value */
#define OCU_REG_VALUE_TCPWM_TR_OUT_SEL                 ( (uint32) 0x00000077UL )
/** TCPWM register TR_IN_SEL0 init value */
#define OCU_REG_VALUE_TCPWM_TR_IN_SEL0                 ( (uint32) 0x00000100UL )
/** TCPWM register EDGE_SEL init value */
#define OCU_REG_VALUE_TCPWM_TR_IN_EDGE_SEL             ( (uint32) 0x00000FFFUL )
/** TCPWM register INTR init value */
#define OCU_REG_VALUE_TCPWM_INTR                       ( (uint32) 0x00000007UL )
/** TCPWM register INTR_MASK init value */
#define OCU_REG_VALUE_TCPWM_INTR_MASK                  ( (uint32) 0x00000000UL )

/** TCPWM register deinit value */
/** TCPWM register CTRL deinit value */
#define OCU_REG_VALUE_TCPWM_CTRL_RESET                 ( (uint32) 0x000000F0UL )
/** TCPWM register TR_OUT_SEL deinit value */
#define OCU_REG_VALUE_TCPWM_TR_OUT_SEL_RESET           ( (uint32) 0x00000032UL )

/* Bit masks for CTRL register */
/* The value for masking UP_DOWN_MODE bits of CTRL register */
#define OCU_REG_MASK_TCPWM_CTRL_UP_DOWN_MODE           ( (uint32) 0x00030000UL )
/* The value for masking UP_DOWN_MODE( COUNT_DOWN ) bits of CTRL register */
#define OCU_REG_MASK_TCPWM_CTRL_COUNT_DOWN             ( (uint32) 0x00010000UL )
/* The value for masking MODE bits of CTRL register */
#define OCU_REG_MASK_TCPWM_CTRL_MODE                   ( (uint32) 0x07000000UL )
/* The value for masking MODE( PWM ) bits of CTRL register */
#define OCU_REG_MASK_TCPWM_CTRL_MODE_PWM               ( (uint32) 0x04000000UL )
/* The value for masking DBG_FREEZE_EN bits of CTRL register. */
#define OCU_REG_MASK_TCPWM_CTRL_DBG_FREEZE_EN          ( (uint32) 0x40000000UL )
/* The value for masking ENABLED bits of CTRL register */
#define OCU_REG_MASK_TCPWM_CTRL_ENABLED                ( (uint32) 0x80000000UL )
/* The value for masking PWM_STOP_ON_KILL bits of CTRL register. */
#define OCU_REG_MASK_TCPWM_CTRL_PWM_STOP_ON_KILL       ( (uint32) 0x00000200UL )
/* The value for masking PWM_SYNC_KILL bits of CTRL register. */
#define OCU_REG_MASK_TCPWM_CTRL_PWM_SYNC_KILL          ( (uint32) 0x00000400UL )
/* The value for masking PWM_DISABLE_MODE bits of CTRL register. */
#define OCU_REG_MASK_TCPWM_CTRL_PWM_DISABLE_MODE       ( (uint32) 0x00003000UL )
/* The value for masking PWM_DISABLE_MODE(RETAIN) bits of CTRL register. */
#define OCU_REG_MASK_TCPWM_CTRL_PWM_DISABLE_MODE_RETAIN ( (uint32) 0x00001000UL )
/* The value for masking PWM_DISABLE_MODE(L) bits of CTRL register. */
#define OCU_REG_MASK_TCPWM_CTRL_PWM_DISABLE_MODE_L     ( (uint32) 0x00002000UL )
/* The value for masking PWM_DISABLE_MODE(H) bits of CTRL register. */
#define OCU_REG_MASK_TCPWM_CTRL_PWM_DISABLE_MODE_H     ( (uint32) 0x00003000UL )

/* Bit masks for TR_PWM_CTRL register */
/* The value for masking CC0_MATCH_MODE bits of TR_PWM_CTRL register */
#define OCU_REG_MASK_TCPWM_TR_PWM_CTRL_CC0_MATCH_MODE  ( (uint32) 0x00000003UL )

/* Bit position item for TR_PWM_CTRL register */
/* TR_PWM_CTRL[2:3] bit position for TR_PWM_CTRL register. */
#define OCU_REG_BIT_TCPWM_TR_PWM_CTRL_OVERFLOW_MODE    2U
/* TR_PWM_CTRL[4:5] bit position for TR_PWM_CTRL register. */
#define OCU_REG_BIT_TCPWM_TR_PWM_CTRL_UNDERFLOW_MODE   4U
/* TR_PWM_CTRL[6:7] bit position for TR_PWM_CTRL register. */
#define OCU_REG_BIT_TCPWM_TR_PWM_CTRL_CC1_MATCH_MODE   6U

/* Bit masks for INTR Register */
/* The value for masking INTR register. */
#define OCU_REG_MASK_TCPWM_INTR                        ( (uint32) 0x00000007UL )
/* The value for masking CC0_MATCH bits of INTR register */
#define OCU_REG_MASK_TCPWM_INTR_CC0_MATCH              ( (uint32) 0x00000002UL )

/* Bit masks for INTR_MASK Register */
/* The value for masking CC0_MATCH bits of INTR_MASK register */
#define OCU_REG_MASK_TCPWM_INTR_MASK_CC0_MATCH         ( (uint32) 0x00000002UL )

/* Bit masks for INTR_MASKED Register */
/* The value for masking CC0_MATCH bits of INTR_MASKED register */
#define OCU_REG_MASK_TCPWM_INTR_MASKED_CC0_MATCH       ( (uint32) 0x00000002UL )

/* Bit masks for TR_IN_SEL0 Register */
/* The value for masking RELOAD_SEL bits of TR_IN_SEL0 register */
#define OCU_REG_MASK_TCPWM_TR_IN_SEL0_RELOAD_SEL       ( (uint32) 0x00FF0000UL )

/* Bit position item for TR_IN_SEL0 Register */
/* TR_IN_SEL0[23:16] bit position for TR_IN_SEL0 Register. */
#define OCU_REG_BIT_TCPWM_TR_IN_SEL0_RELOAD_SEL        16U

/* Bit masks for TR_IN_EDGE_SEL Register */
/* The value for masking RELOAD_EDGE bits of TR_IN_EDGE_SEL register */
#define OCU_REG_MASK_TCPWM_TR_IN_EDGE_SEL_RELOAD_EDGE  ( (uint32) 0x00000030UL )

/* Bit masks for TR_CMD Register */
/* The value for masking RELOAD bits of TR_CMD register */
#define OCU_REG_MASK_TCPWM_TR_CMD_RELOAD               ( (uint32) 0x00000004UL )
/* The value for masking START bits of TR_CMD register */
#define OCU_REG_MASK_TCPWM_TR_CMD_START                ( (uint32) 0x00000010UL )

/* Bit position item for TR_OUT_SEL register */
/* TR_OUT_SEL[6:4] bit position for TR_OUT_SEL register. */
#define OCU_REG_BIT_TCPWM_TR_OUT_SEL_OUT1              4U

/* Bit masks for STATUS Register */
/* The value for masking RUNNING bits of STATUS register */
#define OCU_REG_MASK_TCPWM_STATUS_RUNNING              ( (uint32) 0x00008000UL )
/* The value for masking LINE_OUT bits of STATUS register. */
#define OCU_REG_MASK_TCPWM_STATUS_LINE_OUT             ( (uint32) 0x00000400UL )

/* 16bits mask for register operation. */
#define OCU_REG_MASK_TCPWM_16BITS_MASK                 ( (uint32) 0xFFFFUL )

/* OCU prescaler value set to DT_LINE_OUT_L bits of DT register */
/* Prescaler value of pre-scaling is divide by 1. */
#define OCU_PRESCALER_DIVIDE_BY_1        0x00U
/* Prescaler value of pre-scaling is divide by 2. */
#define OCU_PRESCALER_DIVIDE_BY_2        0x01U
/* Prescaler value of pre-scaling is divide by 4. */
#define OCU_PRESCALER_DIVIDE_BY_4        0x02U
/* Prescaler value of pre-scaling is divide by 8. */
#define OCU_PRESCALER_DIVIDE_BY_8        0x03U
/* Prescaler value of pre-scaling is divide by 16. */
#define OCU_PRESCALER_DIVIDE_BY_16       0x04U
/* Prescaler value of pre-scaling is divide by 32. */
#define OCU_PRESCALER_DIVIDE_BY_32       0x05U
/* Prescaler value of pre-scaling is divide by 64. */
#define OCU_PRESCALER_DIVIDE_BY_64       0x06U
/* Prescaler value of pre-scaling is divide by 128. */
#define OCU_PRESCALER_DIVIDE_BY_128      0x07U

/** Invalid prescaler value */
#define OCU_INVALID_PRESCALER            0xFFU

/* Generate output trigger when compare match 0 event detect */
#define OCU_TRIGGEROUT_CC0_MATCH         ( (uint32) 0x03UL )
/* Output trigger disabled                    */
#define OCU_TRIGGEROUT_DISABLED          ( (uint32) 0x07UL )

/* No change TR_PWM_CTRL                    */
#define OCU_TCPWM_TR_PWM_CTRL_NO_CHANGE  ( (uint32) 0x03UL )

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/
#define OCU_START_SEC_CODE_ASIL_B
#include <Ocu_MemMap.h>

/** \brief Ocu_RaInit
 **
 ** Set all one-time settings for a channel.
 **
 ** \param [in] ChannelCfgPtr   Pointer to channel configuration.
 ** \param [in] CountDirection  Count direction for the whole OCU driver.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaInit
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_CountDirectionType, AUTOMATIC ) CountDirection
);

/** \brief Ocu_RaDeInit
 **
 ** This function shall deinitialize the OCU variables and registers that were initialized by Ocu_Init.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaDeInit
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaStartChannel
 **
 ** Set necessary register to start the channel.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaStartChannel
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaStopChannel
 **
 ** Set necessary register to stop the channel.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaStopChannel
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaHwTriggerStart
 **
 ** Set necessary register for hardware trigger channel start.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaHwTriggerStart
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaStartFreeRunningCounter
 **
 ** Start a free-running counter.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaStartFreeRunningCounter
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaReloadFreeRunningCounter
 **
 ** Reload a free-running counter.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaReloadFreeRunningCounter
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaStopFreeRunningCounter
 **
 ** Stop a free-running counter.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaStopFreeRunningCounter
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaSetPinState
 **
 ** Set necessary register to update pin state.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 ** \param [in] PinState       Type of pin state:
 **                            OCU_LOW or
 **                            OCU_HIGH.
 ** \param [in] CountDirection Count direction for the whole OCU driver.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaSetPinState
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_PinStateType, AUTOMATIC ) PinState,
  VAR( Ocu_CountDirectionType, AUTOMATIC ) CountDirection
);

/** \brief Ocu_RaSetPinAction
 **
 ** Set necessary register to update pin action.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 ** \param [in] PinAction      Type of pin action:
 **                            OCU_SET_LOW or
 **                            OCU_SET_HIGH or
 **                            OCU_TOGGLE or
 **                            OCU_DISABLE.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaSetPinAction
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_PinActionType, AUTOMATIC ) PinAction
);

/** \brief Ocu_RaGetCounter
 **
 ** Get the current value of the counter.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 ** \return  The current value of the counter.
 **
 */
extern FUNC( Ocu_ValueType, OCU_CODE ) Ocu_RaGetCounter
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaSetThresholdValue
 **
 ** Set necessary register to update threshold value.
 **
 ** \param [in] ChannelCfgPtr   Pointer to channel configuration.
 ** \param [in] ThresholdValue  Value to compare with the content of the counter. This value is in ticks.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaSetThresholdValue
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( Ocu_ValueType, AUTOMATIC ) ThresholdValue
);

/** \brief Ocu_RaDisableNotification
 **
 ** Set registers to disable notification interrupt.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaDisableNotification
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaEnableNotification
 **
 ** Set registers to enable notification interrupt.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaEnableNotification
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaCheckChannelStatus_Common
 **
 ** This function verifies register settings.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 ** \return  Return TRUE if channel status is valid, else return FALSE.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_RaCheckChannelStatus_Common
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaCheckChannelStatus_Uninit
 **
 ** This function verifies register settings for channel state uninit.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 **
 ** \return  Return TRUE if channel status is valid, else return FALSE.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_RaCheckChannelStatus_Uninit
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr
);

/** \brief Ocu_RaSetPrescaler
 **
 ** Set necessary register to update prescaler value.
 **
 ** \param [in] ChannelCfgPtr  Pointer to channel configuration.
 ** \param [in] PreValue       Prescaler value.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaSetPrescaler
(
  P2CONST( Ocu_ChannelConfigType, AUTOMATIC, OCU_APPL_CONST ) ChannelCfgPtr,
  VAR( uint8, AUTOMATIC ) PreValue
);

/** \brief Ocu_RaIsInterruptPending
 **
 ** Check whether interrupt for channel is pending.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  Return TRUE if channel interrupt is pending, else return FALSE.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_RaIsInterruptPending
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaClearInterruptFlag
 **
 ** Clears interrupt flag(s) of channel.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 */
extern FUNC( void, OCU_CODE ) Ocu_RaClearInterruptFlag
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaGetCtrl
 **
 ** Get Ctrl register value.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  Return ctrl register value.
 **
 */
extern FUNC( uint32, OCU_CODE ) Ocu_RaGetCtrl
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaGetIntrMask
 **
 ** Get IntrMask register value.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  Return IntrMask register value.
 **
 */
extern FUNC( uint32, OCU_CODE ) Ocu_RaGetIntrMask
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaGetTrOutSel
 **
 ** Get TrOutSel register value.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  Return TrOutSel register value.
 **
 */
extern FUNC( uint32, OCU_CODE ) Ocu_RaGetTrOutSel
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaGetTrPwmCtrl
 **
 ** Get TrPwmCtrl register value.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  Return TrPwmCtrl register value.
 **
 */
extern FUNC( uint32, OCU_CODE ) Ocu_RaGetTrPwmCtrl
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaGetStatusRunning
 **
 ** Get counter running status.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  TRUE:  Counter is running.
 **          FALSE: Counter is not running.
 **
 */
extern FUNC( boolean, OCU_CODE ) Ocu_RaGetStatusRunning
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

/** \brief Ocu_RaGetCC0
 **
 ** Get CC0 register value.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  Return CC0 register value.
 **
 */
extern FUNC( uint32, OCU_CODE ) Ocu_RaGetCC0
(
  CONST( uint32, AUTOMATIC ) BaseAddress
);

#define OCU_STOP_SEC_CODE_ASIL_B
#include <Ocu_MemMap.h>

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

#endif /*!defined(OCU_REGISTERACCESS_H_INCLUDED)*/
/*==================[end of file]===========================================*/
