
#ifndef PLATFORM_TYPES_H
#define PLATFORM_TYPES_H

/** \brief AUTOSAR Platforms types header
 **
 ** This file contains platform specific declarations for the
 ** platform Cypress microcontroller.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */


/*==================[inclusions]=============================================*/

/*==================[macros]=================================================*/

/*------------------[Autosar vendor identifier]------------------------------*/

#if (defined PLATFORM_VENDOR_ID) /* to prevent double definition */
#error PLATFORM_VENDOR_ID already defined
#endif /* if (defined PLATFORM_VENDOR_ID) */

#define PLATFORM_VENDOR_ID (uint16)0x0042

#if (defined PLATFORM_MODULE_ID) /* to prevent double definition */
#error PLATFORM_MODULE_ID already defined
#endif /* if (defined PLATFORM_MODULE_ID) */
#define PLATFORM_MODULE_ID 199U


/*------------------[Autosar specification version]--------------------------*/

#if (defined PLATFORM_AR_RELEASE_MAJOR_VERSION) /* to prevent double definition */
#error PLATFORM_AR_RELEASE_MAJOR_VERSION already defined
#endif /* if (defined PLATFORM_AR_RELEASE_MAJOR_VERSION) */

/** \brief Autosar specification major version number */
#define PLATFORM_AR_RELEASE_MAJOR_VERSION 4U

#if (defined PLATFORM_AR_RELEASE_MINOR_VERSION) /* to prevent double definition */
#error PLATFORM_AR_RELEASE_MINOR_VERSION already defined
#endif /* if (defined PLATFORM_AR_RELEASE_MINOR_VERSION) */

/** \brief Autosar specification minor version number */
#define PLATFORM_AR_RELEASE_MINOR_VERSION 2U

#if (defined PLATFORM_AR_RELEASE_REVISION_VERSION) /* to prevent double definition */
#error PLATFORM_AR_RELEASE_REVISION_VERSION already defined
#endif /* if (defined PLATFORM_AR_RELEASE_REVISION_VERSION) */

/** \brief Autosar specification patch version number */
#define PLATFORM_AR_RELEASE_REVISION_VERSION 2U /** \brief patch version number */

/*------------------[Module Vendor Software Version]-------------------------*/

#if (defined PLATFORM_SW_MAJOR_VERSION) /* prevent double definition */
#error PLATFORM_SW_MAJOR_VERSION already defined
#endif /* if (defined PLATFORM_SW_MAJOR_VERSION) */

/** \brief Vendor software major version number */
#define PLATFORM_SW_MAJOR_VERSION (uint8)1

#if (defined PLATFORM_SW_MINOR_VERSION) /* prevent double definition */
#error PLATFORM_SW_MINOR_VERSION already defined
#endif /* if (defined PLATFORM_SW_MINOR_VERSION) */

/** \brief Vendor software minor version number */
#define PLATFORM_SW_MINOR_VERSION (uint8)8
#if (defined PLATFORM_SW_PATCH_VERSION) /* prevent double definition */
#error PLATFORM_SW_PATCH_VERSION already defined
#endif /* if (defined PLATFORM_SW_PATCH_VERSION) */

/** \brief Vendor software patch version number */
#define PLATFORM_SW_PATCH_VERSION (uint8)0

/*------------------[global identifiers]-------------------------------------*/

#if (!defined TRUE) /* avoid redefinition */
#define TRUE 1U /** \brief true value for boolean type */
#endif /* if (!defined TRUE) */

#if (!defined FALSE) /* avoid redefinition */
#define FALSE 0U /** \brief false value for boolean type */
#endif /* if (!defined FALSE) */

/*------------------[type identifiers - general]-----------------------------*/

#if (defined CPU_TYPE_8) /* to prevent double definition */
#error CPU_TYPE_8 already defined
#endif /* if (defined CPU_TYPE_8) */

#define CPU_TYPE_8 8U /** \brief cpu identifier for  8-bit CPUs */

#if (defined CPU_TYPE_16) /* to prevent double definition */
#error CPU_TYPE_16 already defined
#endif /* if (defined CPU_TYPE_16) */

#define CPU_TYPE_16 16U /** \brief cpu identifier for 16-bit CPUs */

#if (defined CPU_TYPE_32) /* to prevent double definition */
#error CPU_TYPE_32 already defined
#endif /* if (defined CPU_TYPE_32) */

#define CPU_TYPE_32 32U /** \brief cpu identifier for 32-bit CPUs */

#if (defined MSB_FIRST) /* to prevent double definition */
#error MSB_FIRST already defined
#endif /* if (defined MSB_FIRST) */

#define MSB_FIRST 0U /** \brief identifier for 'big endian' */

#if (defined LSB_FIRST) /* to prevent double definition */
#error LSB_FIRST already defined
#endif /* if (defined LSB_FIRST) */

#define LSB_FIRST 1U /** \brief identifier for 'little endian' */

#if (defined HIGH_BYTE_FIRST) /* to prevent double definition */
#error HIGH_BYTE_FIRST already defined
#endif /* if (defined HIGH_BYTE_FIRST) */

#define HIGH_BYTE_FIRST 0U /** \brief identifier for 'high byte first' */

#if (defined LOW_BYTE_FIRST) /* to prevent double definition */
#error LOW_BYTE_FIRST already defined
#endif /* if (defined LOW_BYTE_FIRST) */

#define LOW_BYTE_FIRST 1U /** \brief identifier for 'low byte first' */

/*------------------[type identifiers]-------------------------------*/

#if (!defined CPU_TYPE) /* guard to prevent double definition */
#define CPU_TYPE CPU_TYPE_32 /** \brief 32-bit registers */
#endif /* if (defined CPU_TYPE) */

#if (defined CPU_BIT_ORDER) /* guard to prevent double definition */
#error CPU_BIT_ORDER already defined
#endif /* if (defined CPU_BIT_ORDER) */

#define CPU_BIT_ORDER LSB_FIRST /** \brief LSB bit order */

#if (defined CPU_BYTE_ORDER) /* guard to prevent double definition */
#error CPU_BYTE_ORDER already defined
#endif /* if (defined CPU_BYTE_ORDER) */

#define CPU_BYTE_ORDER LOW_BYTE_FIRST /** \brief low byte order */

/*==================[type definitions]=======================================*/

/* Changed by mobilgene - Start : 18848 */
#ifndef boolean_defined
typedef unsigned char boolean;         /** \brief Autosar boolean type */
#define boolean_defined
#endif

#ifndef sint8_defined
typedef signed char sint8;             /** \brief 8-bit signed integer */
#define sint8_defined
#endif

#ifndef uint8_defined
typedef unsigned char uint8;           /** \brief 8-bit unsigned integer */
#define uint8_defined
#endif

#ifndef sint16_defined
typedef signed short sint16;           /** \brief 16-bit signed integer */
#define sint16_defined
#endif

#ifndef uint16_defined
typedef unsigned short uint16;         /** \brief 16-bit unsigned integer */
#define uint16_defined
#endif

#ifndef sint32_defined
typedef signed long sint32;            /** \brief 32-bit signed integer */
#define sint32_defined
#endif

#ifndef uint32_defined
typedef unsigned long uint32;          /** \brief 32-bit unsigned integer */
#define uint32_defined
#endif

/* Deviation from MISRA-C:2004 rule 1.1 and QA-C message 1027, MISRA-C:2012 Dir-1.1.
   Justification: 64bit is supported by the long long in ARM. */
/* PRQA S 1027 2 */
#ifndef sint64_defined
typedef signed long long sint64;       /** \brief 64-bit signed integer */
#define sint64_defined
#endif

#ifndef uint64_defined
typedef unsigned long long uint64;     /** \brief 64-bit unsigned integer */
#define uint64_defined
#endif

#ifndef uint8_least_defined
typedef unsigned long uint8_least;     /** \brief fast 8-bit unsigned integer */
#define uint8_least_defined
#endif

#ifndef uint16_least_defined
typedef unsigned short uint16_least;   /** \brief fast 16-bit unsigned integer */
#define uint16_least_defined
#endif

#ifndef uint32_least_defined
typedef unsigned long uint32_least;    /** \brief fast 32-bit unsigned integer */
#define uint32_least_defined
#endif

#ifndef sint8_least_defined
typedef signed long sint8_least;       /** \brief fast 8-bit signed integer */
#define sint8_least_defined
#endif

#ifndef sint16_least_defined
typedef signed short sint16_least;     /** \brief fast 16-bit signed integer */
#define sint16_least_defined
#endif

#ifndef sint32_least_defined
typedef signed long sint32_least;      /** \brief fast 32-bit signed integer */
#define sint32_least_defined
#endif

#ifndef float32_defined
typedef float float32;                 /** \brief 32-bit single-precision floating number */
#define float32_defined
#endif

#ifndef float64_defined
typedef double float64;                /** \brief 64-bit double-precision floating number */
#define float64_defined
#endif
/* Changed by mobilgene - End */
/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#endif /* ifndef PLATFORM_TYPES_H */
/*==================[end of file]============================================*/
