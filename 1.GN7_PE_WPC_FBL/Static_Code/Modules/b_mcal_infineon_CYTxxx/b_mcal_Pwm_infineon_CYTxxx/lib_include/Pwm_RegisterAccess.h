/** \brief Pwm_RegisterAccess.h
 **
 ** This file defines interfaces and macros of register access function.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef PWM_REGISTERACCESS_H_INCLUDED
#define PWM_REGISTERACCESS_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Pwm_Types.h>

/*==================[macros]================================================*/
/* TCPWM register init value */
/* TCPWM register CTRL init value. */
#define PWM_TCPWM_CTRL_INIT_VALUE                 ((uint32) 0x04000000UL)
/* TCPWM register CTRL init value for delay timer. */
#define PWM_TCPWM_DELAY_CTRL_INIT_VALUE           ((uint32) 0x00040000UL)
/* TCPWM register COUNTER init value. */
#define PWM_TCPWM_COUNTER_INIT_VALUE              ((uint32) 0x00000000UL)
/* TCPWM register CC0 init value. */
#define PWM_TCPWM_CC0_INIT_VALUE                  ((uint32) 0xFFFFFFFFUL)
/* TCPWM register CC0_BUFF init value. */
#define PWM_TCPWM_CC0_BUFF_INIT_VALUE             ((uint32) 0xFFFFFFFFUL)
/* TCPWM register CC1 init value. */
#define PWM_TCPWM_CC1_INIT_VALUE                  ((uint32) 0xFFFFFFFFUL)
/* TCPWM register CC1_BUFF init value. */
#define PWM_TCPWM_CC1_BUFF_INIT_VALUE             ((uint32) 0xFFFFFFFFUL)
/* TCPWM register PERIOD init value. */
#define PWM_TCPWM_PERIOD_INIT_VALUE               ((uint32) 0xFFFFFFFFUL)
/* TCPWM register PERIOD_BUFF init value. */
#define PWM_TCPWM_PERIOD_BUFF_INIT_VALUE          ((uint32) 0xFFFFFFFFUL)
/* TCPWM register LINE_SEL init value. */
#define PWM_TCPWM_LINE_SEL_INIT_VALUE             ((uint32) 0x00000032UL)
/* TCPWM register LINE_SEL_BUFF init value. */
#define PWM_TCPWM_LINE_SEL_BUFF_INIT_VALUE        ((uint32) 0x00000032UL)
/* TCPWM register DT init value. */
#define PWM_TCPWM_DT_INIT_VALUE                   ((uint32) 0x00000000UL)
/* TCPWM register TR_CMD init value. */
#define PWM_TCPWM_TR_CMD_INIT_VALUE               ((uint32) 0x00000000UL)
/* TCPWM register TR_IN_SEL0 init value. */
#define PWM_TCPWM_TR_IN_SEL0_INIT_VALUE           ((uint32) 0x00000100UL)
/* TCPWM register TR_IN_SEL1 init value. */
#define PWM_TCPWM_TR_IN_SEL1_INIT_VALUE           ((uint32) 0x00000000UL)
/* TCPWM register TR_IN_EDGE_SEL init value. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_INIT_VALUE       ((uint32) 0x00000FFFUL)
/* TCPWM register TR_OUT_SEL init value. */
#define PWM_TCPWM_TR_OUT_SEL_INIT_VALUE           ((uint32) 0x00000077UL)
/* TCPWM register INTR init value. */
#define PWM_TCPWM_INTR_INIT_VALUE                 ((uint32) 0x00000007UL)
/* TCPWM register INTR_SET init value. */
#define PWM_TCPWM_INTR_SET_INIT_VALUE             ((uint32) 0x00000000UL)
/* TCPWM register INTR_MASK init value. */
#define PWM_TCPWM_INTR_MASK_INIT_VALUE            ((uint32) 0x00000000UL)

/* Definition initial value of register TR_PWM_CTRL */
/* TCPWM register TR_PWM_CTRL init value when left alignment */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_LEFTALIGN       ((uint32) 0x000000F2UL)
/* TCPWM register TR_PWM_CTRL init value when center alignment */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_CENTERALIGN     ((uint32) 0x000000DEUL)
/* TCPWM register TR_PWM_CTRL init value when right alignment */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_RIGHTALIGN      ((uint32) 0x000000DEUL)
/* TCPWM register TR_PWM_CTRL init value when left alignment and active output is low */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_LEFTALIGN_INVERT       ((uint32) 0x000000F6UL)
/* TCPWM register TR_PWM_CTRL init value when center alignment and active output is low */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_CENTERALIGN_INVERT     ((uint32) 0x000000CEUL)
/* TCPWM register TR_PWM_CTRL init value when right alignment and active output is low */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_RIGHTALIGN_INVERT      ((uint32) 0x000000CEUL)
/* TCPWM register TR_PWM_CTRL init value when output offset is enable and active output is high */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_WITH_OFFSET              ((uint32) 0x00000074UL)
/* TCPWM register TR_PWM_CTRL init value when output offset is enable and active output is low */
#define PWM_TCPWM_TR_PWM_CTRL_INIT_VALUE_WITH_OFFSET_INVERT       ((uint32) 0x00000031UL)


/* TCPWM register deinit value */
/* TCPWM register CTRL deinit value. */
#define PWM_TCPWM_CTRL_RESET_VALUE                ((uint32) 0x040000F0UL)
/* TCPWM register CTRL deinit value for delay timer. */
#define PWM_TCPWM_DELAY_CTRL_RESET_VALUE          ((uint32) 0x000000F0UL)
/* TCPWM register TR_OUT_SEL deinit value. */
#define PWM_TCPWM_TR_OUT_SEL_RESET_VALUE          ((uint32) 0x00000032UL)
/* TCPWM register TR_PWM_CTRL deinit value. */
#define PWM_TCPWM_TR_PWM_CTRL_RESET_VALUE         ((uint32) 0x000000FFUL)


/* Bit masks for CTRL register */
/* The value for masking AUTO_RELOAD_CC0 bits of CTRL register. */
#define PWM_TCPWM_CTRL_AUTO_RELOAD_CC0           ((uint32) 0x00000001UL)
/* The value for masking AUTO_RELOAD_CC1 bits of CTRL register. */
#define PWM_TCPWM_CTRL_AUTO_RELOAD_CC1           ((uint32) 0x00000002UL)
/* The value for masking AUTO_RELOAD_PERIOD bits of CTRL register. */
#define PWM_TCPWM_CTRL_AUTO_RELOAD_PERIOD        ((uint32) 0x00000004UL)
/* The value for masking AUTO_RELOAD_LINE_SEL bits of CTRL register. */
#define PWM_TCPWM_CTRL_AUTO_RELOAD_LINE_SEL      ((uint32) 0x00000008UL)
/* The value for masking CC0_MATCH_UP_EN bits of CTRL register. */
#define PWM_TCPWM_CTRL_CC0_MATCH_UP_EN           ((uint32) 0x00000010UL)
/* The value for masking CC0_MATCH_DOWN_EN bits of CTRL register. */
#define PWM_TCPWM_CTRL_CC0_MATCH_DOWN_EN         ((uint32) 0x00000020UL)
/* The value for masking CC1_MATCH_UP_EN bits of CTRL register. */
#define PWM_TCPWM_CTRL_CC1_MATCH_UP_EN           ((uint32) 0x00000040UL)
/* The value for masking CC1_MATCH_DOWN_EN bits of CTRL register. */
#define PWM_TCPWM_CTRL_CC1_MATCH_DOWN_EN         ((uint32) 0x00000080UL)
/* The value for masking PWM_IMM_KILL bits of CTRL register. */
#define PWM_TCPWM_CTRL_PWM_IMM_KILL              ((uint32) 0x00000100UL)
/* The value for masking PWM_STOP_ON_KILL bits of CTRL register. */
#define PWM_TCPWM_CTRL_PWM_STOP_ON_KILL          ((uint32) 0x00000200UL)
/* The value for masking SYNC_KILL bits of CTRL register. */
#define PWM_TCPWM_CTRL_PWM_SYNC_KILL             ((uint32) 0x00000400UL)
/* The value for masking PWM_DISABLE_MODE bits of CTRL register. */
#define PWM_TCPWM_CTRL_PWM_DISABLE_MODE          ((uint32) 0x00003000UL)
/* The value for masking UP_DOWN_MODE bits of CTRL register. */
#define PWM_TCPWM_CTRL_UP_DOWN_MODE              ((uint32) 0x00030000UL)
/* The value for masking ONE_SHOT bits of CTRL register. */
#define PWM_TCPWM_CTRL_ONE_SHOT                  ((uint32) 0x00040000UL)
/* The value for masking QUAD_ENCODING_MODE bits of CTRL register. */
#define PWM_TCPWM_CTRL_QUAD_ENCODING_MODE        ((uint32) 0x00300000UL)
/* The value for masking MODE bits of CTRL register. */
#define PWM_TCPWM_CTRL_MODE                      ((uint32) 0x07000000UL)
/* The value for masking DBG_FREEZE_EN bits of CTRL register. */
#define PWM_TCPWM_CTRL_DBG_FREEZE_EN             ((uint32) 0x40000000UL)
/* The value for masking ENABLED bits of CTRL register. */
#define PWM_TCPWM_CTRL_ENABLED                   ((uint32) 0x80000000UL)


/* Bitmasks for STATUS register */
/* The value for masking DOWN bits of STATUS register. */
#define PWM_TCPWM_STATUS_DOWN                    ((uint32) 0x00000001UL)
/* The value for masking TR_CAPTURE0 bits of STATUS register. */
#define PWM_TCPWM_STATUS_TR_CAPTURE0             ((uint32) 0x00000010UL)
/* The value for masking TR_COUNT bits of STATUS register. */
#define PWM_TCPWM_STATUS_TR_COUNT                ((uint32) 0x00000020UL)
/* The value for masking TR_RELOAD bits of STATUS register. */
#define PWM_TCPWM_STATUS_TR_RELOAD               ((uint32) 0x00000040UL)
/* The value for masking TR_STOP bits of STATUS register. */
#define PWM_TCPWM_STATUS_TR_STOP                 ((uint32) 0x00000080UL)
/* The value for masking TR_START bits of STATUS register. */
#define PWM_TCPWM_STATUS_TR_START                ((uint32) 0x00000100UL)
/* The value for masking TR_CAPTURE1 bits of STATUS register. */
#define PWM_TCPWM_STATUS_TR_CAPTURE1             ((uint32) 0x00000200UL)
/* The value for masking LINE_OUT bits of STATUS register. */
#define PWM_TCPWM_STATUS_LINE_OUT                ((uint32) 0x00000400UL)
/* The value for masking LINE_COMPL_OUT bits of STATUS register. */
#define PWM_TCPWM_STATUS_LINE_COMPL_OUT          ((uint32) 0x00000800UL)
/* The value for masking RUNNING bits of STATUS register. */
#define PWM_TCPWM_STATUS_RUNNING                 ((uint32) 0x00008000UL)
/* The value for masking DT_CNT_L bits of STATUS register. */
#define PWM_TCPWM_STATUS_DT_CNT_L                ((uint32) 0x00FF0000UL)
/* The value for masking DT_CNT_H bits of STATUS register. */
#define PWM_TCPWM_STATUS_DT_CNT_H                ((uint32) 0xFF000000UL)


/* Bitmasks for LINE_SEL register */
/* The value for masking OUT_SEL bits of LINE_SEL register. */
#define PWM_TCPWM_LINE_SEL_OUT_SEL               ((uint32) 0x00000007UL)
/* The value for masking COMPL_OUT_SEL bits of LINE_SEL register. */
#define PWM_TCPWM_LINE_SEL_COMPL_OUT_SEL         ((uint32) 0x00000070UL)

/* Bit position item for LINE_SEL register */
/* LINE_SEL[6:4] bit position for LINE_SEL register. */
#define PWM_TCPWM_LINE_SEL_COMPL_OUT_SEL_P       ((uint8) 4u)


/* Bitmasks for LINE_SEL_BUFF register */
/* The value for masking OUT_SEL bits of LINE_SEL_BUFF register. */
#define PWM_TCPWM_LINE_SEL_BUFF_OUT_SEL          ((uint32) 0x00000007UL)
/* The value for masking COMPL_OUT_SEL bits of LINE_SEL_BUFF register. */
#define PWM_TCPWM_LINE_SEL_BUFF_COMPL_OUT_SEL    ((uint32) 0x00000070UL)

/* Bit position item for LINE_SEL_BUFF register */
/* LINE_SEL_BUFF[6:4] bit position for LINE_SEL_BUFF register. */
#define PWM_TCPWM_LINE_SEL_BUFF_COMPL_OUT_SEL_P  ((uint8) 4u)


/* Bitmasks for DT register */
/* The value for masking DT_LINE_OUT_L bits of DT register. */
#define PWM_TCPWM_DT_DT_LINE_OUT_L               ((uint32) 0x000000FFUL)

/* Bit position item for CTRL Register */
/* CTRL[13:12] bit position for CTRL register. */
#define PWM_TCPWM_CTRL_PWM_DISABLE_MODE_P        ((uint8) 12u)
/* CTRL[17:16] bit position for CTRL register. */
#define PWM_TCPWM_CTRL_UP_DOWN_MODE_P            ((uint8) 16u)
/* CTRL[21:20] bit position for CTRL register. */
#define PWM_TCPWM_CTRL_QUAD_ENCODING_MODE_P      ((uint8) 20u)
/* CTRL[26:24] bit position for CTRL register. */
#define PWM_TCPWM_CTRL_MODE_P                    ((uint8) 24u)


/* Bitmasks for TR_CMD register */
/* The value for masking CAPTURE0 bits of TR_CMD register. */
#define PWM_TCPWM_TR_CMD_CAPTURE0                ((uint32) 0x00000001UL)
/* The value for masking RELOAD of TR_CMD register. */
#define PWM_TCPWM_TR_CMD_RELOAD                  ((uint32) 0x00000004UL)
/* The value for masking STOP bits of TR_CMD register. */
#define PWM_TCPWM_TR_CMD_STOP                    ((uint32) 0x00000008UL)
/* The value for masking START bits of TR_CMD register. */
#define PWM_TCPWM_TR_CMD_START                   ((uint32) 0x00000010UL)
/* The value for masking CAPTURE1 bits of TR_CMD register. */
#define PWM_TCPWM_TR_CMD_CAPTURE1                ((uint32) 0x00000020UL)


/* Bitmasks for TR_IN_SEL0 Register */
/* The value for masking CAPTURE0_SEL bits of TR_IN_SEL0 register. */
#define PWM_TCPWM_TR_IN_SEL0_CAPTURE0_SEL        ((uint32) 0x000000FFUL)
/* The value for masking COUNT_SEL bits of TR_IN_SEL0 register. */
#define PWM_TCPWM_TR_IN_SEL0_COUNT_SEL           ((uint32) 0x0000FF00UL)
/* The value for masking RELOAD_SEL bits of TR_IN_SEL0 register. */
#define PWM_TCPWM_TR_IN_SEL0_RELOAD_SEL          ((uint32) 0x00FF0000UL)
/* The value for masking STOP_SEL bits of TR_IN_SEL0 register. */
#define PWM_TCPWM_TR_IN_SEL0_STOP_SEL            ((uint32) 0xFF000000UL)

/* Bit position item for TR_IN_SEL0 Register */
/* TR_IN_SEL0[15:8] bit position for TR_IN_SEL0 register. */
#define PWM_TCPWM_TR_IN_SEL0_COUNT_SEL_P         ((uint8) 8u)
/* TR_IN_SEL0[23:16] bit position for TR_IN_SEL0 register. */
#define PWM_TCPWM_TR_IN_SEL0_RELOAD_SEL_P        ((uint8) 16u)
/* TR_IN_SEL0[31:24] bit position for TR_IN_SEL0 register. */
#define PWM_TCPWM_TR_IN_SEL0_STOP_SEL_P          ((uint8) 24u)


/* Bitmasks for TR_IN_SEL1 Register */
/* The value for masking START_SEL bits of TR_IN_SEL1 register. */
#define PWM_TCPWM_TR_IN_SEL1_START_SEL           ((uint32) 0x000000FFUL)
/* The value for masking CAPTURE1_SEL bits of TR_IN_SEL1 register. */
#define PWM_TCPWM_TR_IN_SEL1_CAPTURE1_SEL        ((uint32) 0x0000FF00UL)

/* Bit position item for TR_IN_SEL1 Register */
/* TR_IN_SEL1[15:8] bit position for TR_IN_SEL1 register. */
#define PWM_TCPWM_TR_IN_SEL1_CAPTURE1_SEL_P      ((uint8) 8u)


/* Bitmasks for TR_IN_EDGE_SEL Register */
/* The value for masking CAPTURE0_EDGE bits of TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_CAPTURE0_EDGE   ((uint32) 0x00000003UL)
/* The value for masking COUNT_EDGE bits of TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_COUNT_EDGE      ((uint32) 0x0000000CUL)
/* The value for masking RELOAD_EDGE bits of TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_RELOAD_EDGE     ((uint32) 0x00000030UL)
/* The value for masking STOP_EDGE bits of TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_STOP_EDGE       ((uint32) 0x000000C0UL)
/* The value for masking START_EDGE bits of TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_START_EDGE      ((uint32) 0x00000300UL)
/* The value for masking CAPTURE1_EDGE bits of TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_CAPTURE1_EDGE   ((uint32) 0x00000C00UL)

/* Bit position item for TR_IN_EDGE_SEL Register */
/* TR_IN_EDGE_SEL[3:2] bit position for TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_COUNT_EDGE_P    ((uint8) 2u)
/* TR_IN_EDGE_SEL[5:4] bit position for TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_RELOAD_EDGE_P   ((uint8) 4u)
/* TR_IN_EDGE_SEL[7:6] bit position for TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_STOP_EDGE_P     ((uint8) 6u)
/* TR_IN_EDGE_SEL[9:8] bit position for TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_START_EDGE_P    ((uint8) 8u)
/* TR_IN_EDGE_SEL[11:10] bit position for TR_IN_EDGE_SEL register. */
#define PWM_TCPWM_TR_IN_EDGE_SEL_CAPTURE1_EDGE_P ((uint8) 10u)


/* Bitmasks for TR_PWM_CTRL register */
/* The value for masking CC0_MATCH_MODE bits of TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL_CC0_MATCH_MODE     ((uint32) 0x00000003UL)
/* The value for masking OVERFLOW_MODE bits of TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL_OVERFLOW_MODE      ((uint32) 0x0000000CUL)
/* The value for masking UNDERFLOW_MODE bits of TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL_UNDERFLOW_MODE     ((uint32) 0x00000030UL)
/* The value for masking CC1_MATCH_MODE bits of TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL_CC1_MATCH_MODE     ((uint32) 0x000000C0UL)

/* Bit position item for TR_PWM_CTRL Register */
/* TR_PWM_CTRL[3:2] bit position for TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL_OVERFLOW_MODE_P    ((uint8) 2u)
/* TR_PWM_CTRL[5:4] bit position for TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL_UNDERFLOW_MODE_P   ((uint8) 4u)
/* TR_PWM_CTRL[7:6] bit position for TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL_CC1_MATCH_MODE_P   ((uint8) 6u)


/* Bitmasks for TR_OUT_SEL register */
/* The value for masking OUT0 bits of TR_OUT_SEL register. */
#define PWM_TCPWM_TR_OUT_SEL_OUT0                ((uint32) 0x00000007UL)
/* The value for masking OUT1 bits of TR_OUT_SEL register. */
#define PWM_TCPWM_TR_OUT_SEL_OUT1                ((uint32) 0x00000070UL)

/* Bit position item for TR_OUT_SEL register */
/* TR_OUT_SEL[6:4] bit position for TR_OUT_SEL register. */
#define PWM_TCPWM_TR_OUT_SEL_OUT1_P              ((uint8) 4u)


/* Bitmasks for INTR register */
/* The value for masking TC bits of INTR register. */
#define PWM_TCPWM_INTR_TC                        ((uint32) 0x00000001UL)
/* The value for masking CC0_MATCH bits of INTR register. */
#define PWM_TCPWM_INTR_CC0_MATCH                 ((uint32) 0x00000002UL)
/* The value for masking CC1_MATCH bits of INTR register. */
#define PWM_TCPWM_INTR_CC1_MATCH                 ((uint32) 0x00000004UL)


/* Bitmasks for INTR_MASK register */
/* The value for masking TC bits of INTR_MASK register. */
#define PWM_TCPWM_INTR_MASK_TC                   ((uint32) 0x00000001UL)
/* The value for masking CC0_MATCH bits of INTR_MASK register. */
#define PWM_TCPWM_INTR_MASK_CC0_MATCH            ((uint32) 0x00000002UL)
/* The value for masking CC1_MATCH bits of INTR_MASK register. */
#define PWM_TCPWM_INTR_MASK_CC1_MATCH            ((uint32) 0x00000004UL)


/* Bitmasks for INTR_MASKED register */
/* The value for masking TC bits of INTR_MASKED register. */
#define PWM_TCPWM_INTR_MASKED_TC                 ((uint32) 0x00000001UL)
/* The value for masking CC0_MATCH bits of INTR_MASKED register. */
#define PWM_TCPWM_INTR_MASKED_CC0_MATCH          ((uint32) 0x00000002UL)
/* The value for masking CC1_MATCH bits of INTR_MASKED register. */
#define PWM_TCPWM_INTR_MASKED_CC1_MATCH          ((uint32) 0x00000004UL)


/* Bitmasks for INTR_MASK register */
/* The value for masking INTR_MASK register. */
#define PWM_TCPWM_INTR_MASK                      ((uint32) 0x00000007UL)
/* The value for masking INTR register. */
#define PWM_TCPWM_INTR                           ((uint32) 0x00000007UL)
/* The value for masking TR_PWM_CTRL register. */
#define PWM_TCPWM_TR_PWM_CTRL                    ((uint32) 0x000000FFUL)

/* Definition of software trigger command flags */
/* Software start trigger enable flag. */
#define PWM_SW_START_TRIGGER                     ((uint8) 0x01u)
/* Software reload trigger enable flag. */
#define PWM_SW_RELOAD_TRIGGER                    ((uint8) 0x02u)
/* Software capture0 trigger enable flag. */
#define PWM_SW_CAPTURE0_TRIGGER                  ((uint8) 0x04u)
/* Software capture1 trigger enable flag. */
#define PWM_SW_CAPTURE1_TRIGGER                  ((uint8) 0x08u)
/* Software stop trigger enable flag. */
#define PWM_SW_STOP_TRIGGER                      ((uint8) 0x10u)


/* PWM prescaler value set to DT_LINE_OUT_L bits of DT register */
/* Prescaler value of pre-scaling is divide by 1. */
#define PWM_PRESCALER_DIVIDE_BY_1                ((uint8) 0u)
/* Prescaler value of pre-scaling is divide by 2. */
#define PWM_PRESCALER_DIVIDE_BY_2                ((uint8) 1u)
/* Prescaler value of pre-scaling is divide by 4. */
#define PWM_PRESCALER_DIVIDE_BY_4                ((uint8) 2u)
/* Prescaler value of pre-scaling is divide by 8. */
#define PWM_PRESCALER_DIVIDE_BY_8                ((uint8) 3u)
/* Prescaler value of pre-scaling is divide by 16. */
#define PWM_PRESCALER_DIVIDE_BY_16               ((uint8) 4u)
/* Prescaler value of pre-scaling is divide by 32. */
#define PWM_PRESCALER_DIVIDE_BY_32               ((uint8) 5u)
/* Prescaler value of pre-scaling is divide by 64. */
#define PWM_PRESCALER_DIVIDE_BY_64               ((uint8) 6u)
/* Prescaler value of pre-scaling is divide by 128. */
#define PWM_PRESCALER_DIVIDE_BY_128              ((uint8) 7u)


/* Definition of counter count mode  */
/* Count up mode. */
#define PWM_COUNT_UP_MODE                        ((uint32) 0x00UL)
/* Count down mode. */
#define PWM_COUNT_DOWN_MODE                      ((uint32) 0x01UL)
/* Count up down 1 mode. */
#define PWM_COUNT_UPDN1_MODE                     ((uint32) 0x02UL)
/* Count up down 2 mode. */
#define PWM_COUNT_UPDN2_MODE                     ((uint32) 0x03UL)


/* Definition of output signal type */
/* Output signal line_out fix to low. */
#define PWM_LINE_SEL_L                           ((uint32) 0x00UL)
/* Output signal line_out fix to high. */
#define PWM_LINE_SEL_H                           ((uint32) 0x01UL)
/* PWM signal line. */
#define PWM_LINE_SEL_PWM                         ((uint32) 0x02UL)
/* Inverted PWM signal line. */
#define PWM_LINE_SEL_PWM_INV                     ((uint32) 0x03UL)

/* Definition of output trigger generate event */
/* Generate output trigger when overflow event detect. */
#define PWM_TRIGGEROUT_OVERFLOW                  ((uint32) 0x00UL)
/* Generate output trigger when tc event detect. */
#define PWM_TRIGGEROUT_TC                        ((uint32) 0x02UL)
/* Generate output trigger when compare match 0 event detect. */
#define PWM_TRIGGEROUT_CC0_MATCH                 ((uint32) 0x03UL)
/* Generate output trigger when compare match 1 event detect. */
#define PWM_TRIGGEROUT_CC1_MATCH                 ((uint32) 0x04UL)
/* Output trigger disabled. */
#define PWM_TRIGGEROUT_DISABLED                  ((uint32) 0x07UL)


/* Definition of channel disable mode */
/* When the counter is disabled or stopped upon a stop event the PWM outputs are 
   retained (keep their previous levels). */
#define PWM_DISABLEMODE_RETAIN   ((uint8) 0x01)
/* When the counter is disabled or stopped upon a stop event the PWM output "line_out" is 
   driven as a fixed '0' and the PWM output "line_compl_out" is driven as a fixed '1'. */
#define PWM_DISABLEMODE_LOW      ((uint8) 0x02)
/* When the counter is disabled or stopped upon a stop event the PWM output "line_out" is 
   driven as a fixed '1' and the PWM output "line_compl_out" is driven as a fixed '0'. */
#define PWM_DISABLEMODE_HIGH     ((uint8) 0x03)

/*==================[type definitions]======================================*/
/*==================[external function declarations]========================*/

#define PWM_START_SEC_CODE_ASIL_B
#include <Pwm_MemMap.h>

/** \brief Pwm_RaInitChannel
 **
 ** Set all one-time settings for a channel.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaInitChannel
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaDeInitChannel
 **
 ** De-initialize channel timer: disable notification interrupt(s), 
 ** disable trigger, change channel output status to idle output and stop timer.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaDeInitChannel
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaInitDelayTimer
 **
 ** Set all one-time settings for a channel delay timer.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaInitDelayTimer
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaDeInitDelayTimer
 **
 ** De-initialize channel delay timer.
 **
 ** \param [in] DelayPtr      Pointer to the delay timer configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaDeInitDelayTimer
(
  P2CONST(Pwm_DelayConfigType, AUTOMATIC, PWM_APPL_CONST) DelayPtr
);

/** \brief Pwm_RaSetHwReloadTrigger
 **
 ** Set necessary register for hardware trigger channel reload start.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 ** \param [in] TriggerSel      Input trigger select.
 **
 ** Preconditions:
 ** - Counter Disabled.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaSetHwReloadTrigger
(
  CONST(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC) TriggerSel
);

/** \brief Pwm_RaSetHwCapture0Trigger
 **
 ** Set necessary register for hardware trigger channel capture start.
 **
 ** \param [in] BaseAddress     Base address of the HW Timer register structure.
 ** \param [in] TriggerSel      Input trigger select.
 **
 ** Preconditions:
 ** - Counter Disabled.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaSetHwCapture0Trigger
(
  CONST(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC) TriggerSel
);

/** \brief Pwm_RaEnableChannel
 **
 ** Enable counter for a channel.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 ** \param [in] EnableFlag       Whether the channel shall be enabled 
 **                              (PWM_TRUE = Yes, PWM_FALSE = No).
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaEnableChannel
(
  CONST(uint32, AUTOMATIC) BaseAddress,
  VAR(boolean, AUTOMATIC) EnableFlag
);

/** \brief Pwm_RaUpdateChannel
 **
 ** Updates necessary counter registers for a channel.
 **
 ** \param [in] ChannelPtr            Pointer to the channel configuration.
 ** \param [in] PeriodTickRegValue    Period in ticks to be set in register.
 ** \param [in] DutyTickRegValue      Duty in ticks to be set in register.
 ** \param [in] TriggerTickRegValue   Delay time for output trigger to be set in register.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaUpdateChannel
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(uint32, AUTOMATIC) PeriodTickRegValue,
  VAR(uint32, AUTOMATIC) DutyTickRegValue,
  VAR(uint32, AUTOMATIC) TriggerTickRegValue
);

/** \brief Pwm_RaUpdateChannelBuff
 **
 ** Updates necessary counter buffer registers for a channel.
 **
 ** \param [in] ChannelPtr              Pointer to the channel configuration.
 ** \param [in] PeriodTickRegValue      Period in ticks to be set in register.
 ** \param [in] DutyTickRegValue        Duty in ticks to be set in register.
 ** \param [in] TriggerTickRegValue     Delay time for output trigger to be set in register.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaUpdateChannelBuff
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(uint32, AUTOMATIC) PeriodTickRegValue,
  VAR(uint32, AUTOMATIC) DutyTickRegValue,
  VAR(uint32, AUTOMATIC) TriggerTickRegValue
);

/** \brief Pwm_RaGetInterruptPendingFlag
 **
 ** Get channel interrupt pending flag.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 ** \return  Return INTR_MASKED register value.
 */
extern FUNC(uint32, PWM_CODE) Pwm_RaGetInterruptPendingFlag
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaClearInterruptFlag
 **
 ** Clears interrupt flag(s) of channel.
 **
 ** \param [in] BaseAddress  Base address of the HW Timer register structure.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaClearInterruptFlag
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaSetPrescalerValue
 **
 ** Set necessary register to update prescaler value.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 ** Preconditions:
 ** - Counter Disabled.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaSetPrescalerValue
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaSetStatusLineOut
 **
 ** Set channel output level.
 **
 ** Note: Applicable for channels holding Stepper Motor Control features.
 **
 ** \param [in] BaseAddress     Base address of the HW Timer register structure.
 ** \param [in] State           PWM output state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaSetStatusLineOut
(
  CONST(uint32, AUTOMATIC) BaseAddress,
  VAR(Pwm_OutputStateType, AUTOMATIC) State
);

/** \brief Pwm_RaSetChannelOut
 **
 ** Set channel output level (Line_Sel).
 **
 ** Note: Applicable for channels holding Stepper Motor Control features.
 **
 ** \param [in] ChannelPtr    Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaSetChannelOut
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaGetStatusLineOut
 **
 ** Get channel output level.
 **
 ** \param [in] BaseAddress    Base address of the HW Timer register structure.
 **
 ** \return  PWM_LOW:  channel output state is low.
 **          PWM_HIGH: channel output state is high.
 **
 ** Preconditions:
 ** - Counter Enabled.
 **
 */
extern FUNC(Pwm_OutputStateType, PWM_CODE) Pwm_RaGetStatusLineOut
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaChangeTrigger
 **
 ** Sets registers to enable/disable trigger.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] TriggerEnable   Enable/disable trigger.
 **                             PWM_TRUE: Enable trigger.
 **                             PWM_FALSE: Disable trigger.
 **
 ** Preconditions:
 ** - Counter Disabled.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaChangeTrigger
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(boolean, AUTOMATIC) TriggerEnable
);

/** \brief Pwm_RaDisableNotification
 **
 ** Sets registers to disable notification interrupt.
 **
 ** \param [in] BaseAddress    Base address of the HW Timer register structure.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaDisableNotification
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaEnableNotification
 **
 ** Sets registers to enable notification interrupt.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaEnableNotification
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaCheckChannelStatus_Interrupt
 **
 ** Check the interrupt setting.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 ** \return     PWM_TRUE: Software and hardware states are in sync.
 **             PWM_FALSE: Software and hardware states are inconsistent.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckChannelStatus_Interrupt
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaCheckChannelStatus_Enable
 **
 ** Check whether channel in enable state.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return    PWM_TRUE: The timer counter is enable.
 **            PWM_FALSE: The timer counter is disable.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckChannelStatus_Enable
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaCheckChannelStatus_Running
 **
 ** Check whether channel is in running state.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return    PWM_TRUE: The timer counter is running.
 **            PWM_FALSE: The timer counter is not running.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckChannelStatus_Running
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaCheckWaitingTrigger_Running
 **
 ** Check whether channel is in running state.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return    PWM_TRUE: The timer counter is running.
 **            PWM_FALSE: The timer counter is not running.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckWaitingTrigger_Running
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaCheckChannelStatus_Stop
 **
 ** Check whether channel is in stop state.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return    PWM_TRUE: The timer counter is stop.
 **            PWM_FALSE: The timer counter is running.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckChannelStatus_Stop
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaCheckChannelStatus_Trigger
 **
 **  Check channel trigger setting.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 ** \param [in] EnableFlag      Holds on trigger enable flag
 **
 ** \return     PWM_TRUE: Software and hardware states are in sync.
 **             PWM_FALSE: Software and hardware states are inconsistent.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckChannelStatus_Trigger
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr,
  VAR(boolean, AUTOMATIC) EnableFlag
);

/** \brief Pwm_RaCheckChannelStatus_WaitingUpdate
 **
 ** Check whether channel is in waiting update state.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 ** \return    PWM_TRUE: The timer counter is waiting update.
 **            PWM_FALSE: The timer counter is not waiting update.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckChannelStatus_WaitingUpdate
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaCheckChannelStatus_LineSelIsPWM
 **
 ** Check whether channel line_sel is PWM state.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return    PWM_TRUE: The channel line_sel is PWM.
 **            PWM_FALSE: The channel line_sel is not PWM.
 */
extern FUNC(boolean, PWM_CODE) Pwm_RaCheckChannelStatus_LineSelIsPWM
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaGetPeriodBuff
 **
 ** Get period_buff register value.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return Returns period_buff register value.
 */
extern FUNC(uint32, PWM_CODE) Pwm_RaGetPeriodBuff
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaGetCc1Buff
 **
 ** Get cc1_buff register value.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return Returns cc1_buff register value.
 */
extern FUNC(uint32, PWM_CODE) Pwm_RaGetCc1Buff
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaGetCc0Buff
 **
 **  Get cc0_buff register value.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return Returns cc0_buff register value.
 */
extern FUNC(uint32, PWM_CODE) Pwm_RaGetCc0Buff
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaGetPeriod
 **
 ** Get period register value.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return Returns PERIOD register value.
 */
extern FUNC(uint32, PWM_CODE) Pwm_RaGetPeriod
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaGetCc1
 **
 ** Get cc1 register value.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return Returns cc1 register value.
 */
extern FUNC(uint32, PWM_CODE) Pwm_RaGetCc1
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaGetCc0
 **
 ** Get cc0 register value.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return Returns cc0 register value.
 */
extern FUNC(uint32, PWM_CODE) Pwm_RaGetCc0
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaGetPrescaler
 **
 **  Get prescaler register value.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 **
 ** \return Returns prescaler register value.
 */
extern FUNC(uint8, PWM_CODE) Pwm_RaGetPrescaler
(
  CONST(uint32, AUTOMATIC) BaseAddress
);

/** \brief Pwm_RaUpdateCcMatchEvent
 **
 ** Enables / disables the compare match 1 event generation when 
 ** count up/down in CNT_UPDN1/2 mode.
 **
 ** Note: Applicable for channels holding Advanced Motor Control features.
 **
 ** \param [in] ChannelPtr      Pointer to the channel configuration.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaUpdateCcMatchEvent
(
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelPtr
);

/** \brief Pwm_RaEnableSwTrigger
 **
 ** Set register for enable software trigger event.
 **
 ** \param [in] BaseAddress      Base address of the HW Timer register structure.
 ** \param [in] TriggerFlag      Holds enabled software trigger event flags.
 **
 ** Preconditions:
 ** - Counter Enabled.
 */
extern FUNC(void, PWM_CODE) Pwm_RaEnableSwTrigger
(
  CONST(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC) TriggerFlag
);

/** \brief Pwm_RaSetDisableMode
 **
 ** Set behavior of the PWM output state while the TCPWM counter is disabled or stopped.
 **
 ** \param [in] BaseAddress   Base address of the HW Timer register structure.
 ** \param [in] DisableMode   Channel disable mode.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_RaSetDisableMode
(
  CONST(uint32, AUTOMATIC) BaseAddress,
  VAR(uint8, AUTOMATIC) DisableMode
);

#define PWM_STOP_SEC_CODE_ASIL_B
#include <Pwm_MemMap.h>

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

#endif /*!defined(PWM_REGISTERACCESS_H_INCLUDED)*/

/*==================[end of file]===========================================*/
