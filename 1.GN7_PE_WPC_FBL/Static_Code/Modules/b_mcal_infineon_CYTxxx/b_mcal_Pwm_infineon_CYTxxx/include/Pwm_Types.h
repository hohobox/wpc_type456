/** \brief Pwm_Types.h
 **
 ** This file contains the implementation of the AUTOSAR module Pwm type.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef PWM_TYPES_H_INCLUDED
#define PWM_TYPES_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Std_Types.h>
/*==================[macros]================================================*/
/* Invalid channel identifier value. */
#define PWM_INVALID_CHANNELID     ((uint16) 0xFFFFu)
/* Invalid input trigger select value. */
#define PWM_INVALID_TRIGGERVALUE  ((uint8) 0x00u)

/* \brief PWM_FALSE for boolean operations. */
#define PWM_FALSE                 ((uint8) 0x00u)
/* \brief PWM_TRUE for boolean operations. */
#define PWM_TRUE                  ((uint8) 0x01u)

/* \brief Definition of channel alignment type. */
/* Define channel alignment type is left alignment. */
#define PWM_LEFT_ALIGNED        ((uint8) 0x00u)
/* Define channel alignment type is center alignment. */
#define PWM_CENTER_ALIGNED      ((uint8) 0x01u)
/* Define channel alignment type is right alignment. */
#define PWM_RIGHT_ALIGNED       ((uint8) 0x02u)

/* \brief Definition of output trigger sync type. */
/* The output trigger synchronizes with period. */
#define PWM_TRIGGER_SYNC_PERIOD        ((uint8) 0x01u)
/* The output trigger synchronizes with duty output. */
#define PWM_TRIGGER_SYNC_DUTY          ((uint8) 0x02u)

/* \brief Definition of output trigger type. */
/* Counter output trigger on OUT0. */
#define PWM_TRIGGER_OUT0            ((uint8) 0x01u)
/* Counter output trigger on OUT
#define PWM_CH_COND_TIMER_DISABLE1. */
#define PWM_TRIGGER_OUT1            ((uint8) 0x02u)
/* Counter output trigger is disabled. */
#define PWM_TRIGGER_DISABLE         ((uint8) 0x00u)

/** \brief Definition of conditions of a PWM channel.
 **
 ** Used by Pwm_GetChannelStatus() */
/* The PWM channel timer is off. */
#define PWM_CH_COND_TIMER_DISABLED   ((uint8) 0x01u)
/* The PWM channel timer is on. */
#define PWM_CH_COND_TIMER_ENABLED    ((uint8) 0x02u)
/* The PWM channel is in idle state LOW. */
#define PWM_CH_COND_IDLE_LOW         ((uint8) 0x04u)
/* The PWM channel is in idle state HIGH. */
#define PWM_CH_COND_IDLE_HIGH        ((uint8) 0x08u)
/* The PWM channel has been started and is waiting HW trigger */
#define PWM_CH_COND_WAIT_HWTRIGGER   ((uint8) 0x10u)
/* The PWM channel has been started and is waiting update */
#define PWM_CH_COND_WAIT_UPDATE      ((uint8) 0x20u)

/* Defines divider value PWM pre-scaling divider. */
/* Impossible divider. */
#define PWM_PRESCALING_DIVIDE_NONE        ((uint8) 0u)
/* Pre-scaling is divide by 1. */
#define PWM_PRESCALING_DIVIDE_BY_1        ((uint8) 1u)
/* Pre-scaling is divide by 2. */
#define PWM_PRESCALING_DIVIDE_BY_2        ((uint8) 2u)
/* Pre-scaling is divide by 4. */
#define PWM_PRESCALING_DIVIDE_BY_4        ((uint8) 4u)
/* Pre-scaling is divide by 8. */
#define PWM_PRESCALING_DIVIDE_BY_8        ((uint8) 8u)
/* Pre-scaling is divide by 16. */
#define PWM_PRESCALING_DIVIDE_BY_16       ((uint8) 16u)
/* Pre-scaling is divide by 32. */
#define PWM_PRESCALING_DIVIDE_BY_32       ((uint8) 32u)
/* Pre-scaling is divide by 64. */
#define PWM_PRESCALING_DIVIDE_BY_64       ((uint8) 64u)
 /* Pre-scaling is divide by 128. */
#define PWM_PRESCALING_DIVIDE_BY_128      ((uint8) 128u)

/* \brief Defines the value for 0% and 100% duty. */
/* Value for 0% duty. */
#define PWM_DUTY_0_PERCENTAGE             ((uint16) 0x0000u)
/* Value for 100% duty. */
#define PWM_DUTY_100_PERCENTAGE           ((uint16) 0x8000u)

/* PWM 16bit channel max tick value. */
#define PWM_16BIT_TICK_MAX          ((uint32) 0xFFFFUL)
/* PWM 32bit channel max tick value. */
#define PWM_32BIT_TICK_MAX          ((uint32) 0xFFFFFFFFUL)

/*==================[type definitions]======================================*/

/* \brief Definition of the type of driver states. */
typedef enum
{
  PWM_S_UNINITIALIZED = 0, /* Driver was uninitialized. */
  PWM_S_INITIALIZED        /* Driver was initialized. */
} Pwm_DriverStatusType;

/* \brief Output state of a PWM channel. */
typedef enum
{
  PWM_LOW = 0,   /* The PWM channel is in low state.  */
  PWM_HIGH       /* The PWM channel is in high state. */
} Pwm_OutputStateType;

/* \brief Output line state of a PWM channel. */
typedef enum
{
   /* The PWM channel is in low state.  */
   PWM_LINESTATE_LOW = 0,
   /* The PWM channel is in high state. */
   PWM_LINESTATE_HIGH = 1,
   /* PWM signal 'line' */
   PWM_LINESTATE_PWM = 2,
   /* Inverted PWM signal 'line' */
   PWM_LINESTATE_PWM_INV = 3,
   /* High impedance. */
   PWM_LINESTATE_HIGHZ = 4
} Pwm_OutputLineStateType;

/* \brief Definition of the type of edge notification of a PWM channel. */
typedef enum
{
  /* Notification will be called when a rising edge occurs on the PWM output signal. */
  PWM_RISING_EDGE = 0,
  /* Notification will be called when a falling edge occurs on the PWM output signal. */
  PWM_FALLING_EDGE,
  /* Notification will be called when either a rising edge or falling edge occur on the PWM output signal. */
  PWM_BOTH_EDGES
} Pwm_EdgeNotificationType;

/** \brief Definition of the type of interrupt reason.
 ** Pwm_EdgeNotificationType will be converted into a interrupt reason. */
typedef enum
{
  /* Interrupt is disabled (initial value). */
  PWM_NOTIFY_UNINIT = 0,
  /* Interrupt is enabled on duty end.*/
  PWM_END_OF_DUTY,
  /* Interrupt is enabled on period end.*/
  PWM_END_OF_PERIOD,
  /* Interrupt is enabled on both duty and period end. */
  PWM_END_OF_BOTH
} Pwm_InterruptReasonType;

/** \brief Defines the class of a PWM channel. */
typedef enum
{
  /* The PWM channel has a variable period. The duty cycle and the period can be changed. */
  PWM_VARIABLE_PERIOD = 0,
  /* The PWM channel has a fixed period. Only the duty cycle can be changed. */
  PWM_FIXED_PERIOD,
  /* The PWM channel has a fixed shifted period. Impossible to change it (only if supported by hardware). */
  PWM_FIXED_PERIOD_SHIFTED
} Pwm_ChannelClassType;

/* \brief Result of the requests related to power state transitions. */
typedef enum
{
  /* Power state change executed. */
  PWM_SERVICE_ACCEPTED = 0,
  /* PWM Module not initialized. */
  PWM_NOT_INIT,
  /* Wrong API call sequence. */
  PWM_SEQUENCE_ERROR,
  /* The HW module has a failure which prevents it to enter the required power state. */
  PWM_HW_FAILURE,
  /* PWM Module does not support the requested power state. */
  PWM_POWER_STATE_NOT_SUPP,
  /* PWM Module cannot transition directly from the current power state to the 
     requested power state or the HW peripheral is still busy. */
  PWM_TRANS_NOT_POSSIBLE
} Pwm_PowerStateRequestResultType;

/* \brief Power state currently active or set as target power state. */
typedef enum
{
  /* Full Power (0) */
  PWM_FULL_POWER = 0
} Pwm_PowerStateType;

/* \brief Notification function pointer type. */
typedef P2FUNC(void, PWM_CODE, Pwm_NotifyFctType)(void);

/** \brief typedef  Pwm_ChannelType
 **
 ** Numeric identifier of a PWM channel.
 **
 ** This type implementation specific. It is chosen in order to have
 ** the most efficient implementation on a specific microcontroller
 ** platform. */
typedef uint16 Pwm_ChannelType;

/** \brief typedef  Pwm_ChannelGroupType
 **
 ** Numeric identifier of a PWM channel group.
 **
 ** This type implementation specific. It is chosen in order to have
 ** the most efficient implementation on a specific microcontroller
 ** platform. */
typedef uint16 Pwm_ChannelGroupType;

/** Definition of a period of a PWM channel.
 **
 ** This type is implementation specific.
 ** It is chosen in order to have the most efficient implementation
 ** on a specific microcontroller platform */
typedef uint32 Pwm_PeriodType;

/* \brief Definition of the clock frequency. The unit of this type is Hz. */
typedef uint32 Pwm_ClkFrequencyType;

/* \brief State of a PWM channel. */
typedef struct Pwm_ChannelStateType_Struct
{
  /* Holds the current period ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) PeriodTicks;
  /* Holds the current start delay ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) DelayTicks;
  /* Holds the current output offset ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) OutputOffsetTicks;
  /* Holds the current output trigger ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) TriggerTicks;
  /* Holds notification reason. */
  VAR(Pwm_InterruptReasonType, AUTOMATIC) NotifyReason;
  /* Holds the current duty value of a channel. */
  VAR(uint16, AUTOMATIC) DutyCycle;
  /* Holds the current prescaler register value. */
  VAR(uint8, AUTOMATIC) PrescalerRegisterValue;
  /* Holds the current status of a channel represented by bit flags of PWM_CH_STATE_* values. */
  VAR(uint8, AUTOMATIC) Flags;
  /* Holds the current match up enable state (PWM_TRUE = enable, PWM_FALSE = disable). */
  VAR(boolean, AUTOMATIC) MatchUpEnable;
  /* Holds the current match down enable state (PWM_TRUE = enable, PWM_FALSE = disable). */
  VAR(boolean, AUTOMATIC) MatchDownEnable;
  /* Holds the line_out and line_compl_out value of a channel. */
  VAR(uint32, AUTOMATIC) LineSelBuff;
} Pwm_ChannelStateType;

/** \brief Channel status data
 **
 ** This structure holds status parameters of a channel.
 */
typedef struct Pwm_ChannelStatusType_Struct
{
  /* Holds the current period ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) PeriodTicks;
  /* Holds the current start delay ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) DelayTicks;
  /* Holds the current output offset ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) OutputOffsetTicks;
  /* Holds the current output trigger ticks of a channel. */
  VAR(Pwm_PeriodType, AUTOMATIC) TriggerTicks;
  /* Holds the current duty value of a channel. */
  VAR(uint16, AUTOMATIC) DutyCycle;
  /* Channel identifier. */
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelId;
  /* Holds the current prescaler register value. */
  VAR(uint8, AUTOMATIC) Prescaler;
  /* Current status of the channel represented by bit flags of PWM_CH_COND_* values. */
  VAR(uint8, AUTOMATIC) Status;
  /* Holds channel notification status (PWM_TRUE = enable, PWM_FALSE = disable). */
  VAR(boolean, AUTOMATIC) NotificationEnabled;
  /* Holds channel trigger enable status (PWM_TRUE = enable, PWM_FALSE = disable). */
  VAR(boolean, AUTOMATIC) TriggerEnabled;
} Pwm_ChannelStatusType;

/* \brief Definition of configuration of delay data. */
typedef struct Pwm_DelayConfigType_Struct
{
  /* Base address of delay timer. */
  CONST(uint32, PWM_CONST) DelayBaseAddress;
  /* Start delay value. */
  CONST(Pwm_PeriodType, PWM_CONST) StartDelay;
  /* Hardware delay trigger select value. */
  CONST(uint8, PWM_CONST) DelayTrigger;
  /* Delay Trigger output selection. */
  CONST(uint8, PWM_CONST) DelayTriggerOutputSelect;
} Pwm_DelayConfigType;

/* \brief Definition of configuration of one channel. */
typedef struct Pwm_ChannelConfigType_Struct
{
  /* Base address of current channel. */
  CONST(uint32, PWM_CONST) BaseAddress;
  /* Maximum tick value of counter. */
  CONST(uint32, PWM_CONST) TimerMax;
  /* Tick frequency of channel in Hz. */
  CONST(Pwm_ClkFrequencyType, PWM_CONST) TickFrequency;
  /* Default period in ticks. */
  CONST(Pwm_PeriodType, PWM_CONST) DefaultPeriodTicks;
  /* Default output trigger ticks. */
  CONST(Pwm_PeriodType, PWM_CONST) DefaultTriggerOutputTicks;
  /* Offset tick time for PWM output. */
  CONST(Pwm_PeriodType, PWM_CONST) OutputOffsetTicks;
  /* Pointer to a structure of configuration of delay data. */
  P2CONST(Pwm_DelayConfigType, AUTOMATIC, PWM_APPL_CONST) DelayConfigPtr;
  /* Pointer to channel state data. */
  CONSTP2VAR(Pwm_ChannelStateType, PWM_CONST, PWM_APPL_DATA) ChannelStatePtr;
  /* Notification function. */
  CONST(Pwm_NotifyFctType, PWM_CONST) NotifyFunction;
  /* Starting output state level. */
  CONST(Pwm_OutputStateType, PWM_CONST) ActiveOutput;
  /* Channel output select type at initialization. */
  CONST(Pwm_OutputLineStateType, PWM_CONST) PwmOutputAtInit;
  /* Channel complementary output select type at initialization. */
  CONST(Pwm_OutputLineStateType, PWM_CONST) PwmCompOutputAtInit;
  /* Class of channel. */
  CONST(Pwm_ChannelClassType, PWM_CONST) ChannelClass;
  /* Idle state output level. */
  CONST(Pwm_OutputStateType, PWM_CONST) IdleState;
  /* Channel identifier. */
  CONST(Pwm_ChannelType, PWM_CONST) ChannelId;
  /* Default duty cycle (0x8000 == 100%). */
  CONST(uint16, PWM_CONST) DefaultDuty;
  /* Prescaler register value. */
  CONST(uint8, PWM_CONST) DefaultPrescalerValue;
  /* Output alignment. */
  CONST(uint8, PWM_CONST) OutAlignment;
  /* Output trigger factor. */
  CONST(uint8, PWM_CONST) TriggerFactor;
  /* Trigger output selection. */
  CONST(uint8, PWM_CONST) TriggerOutputSelect;
  /* Hardware stop trigger select value. */
  CONST(uint8, PWM_CONST) InputStopTrigger;
  /* Hardware switch event trigger. Required for SMC operation. */
  CONST(uint8, PWM_CONST) SwitchEventTrigger;  
  /* Hardware start trigger select value. */
  CONST(uint8, PWM_CONST) InputStartTrigger;
  /* Debug mode of channel (PWM_TRUE = halt, PWM_FALSE = continue). */
  CONST(boolean, PWM_CONST) DebugMode;
  /* Channel is started by Pwm_Init. */
  CONST(boolean, PWM_CONST) StartAtInit;
  /* Support set channel output (PWM_TRUE = supportable, PWM_FALSE = unsupportable). */
  CONST(boolean, PWM_CONST) SetOutputEnable;
  /* OutputOffset is enable or disable. */
  CONST(boolean, PWM_CONST) OutputOffsetEnable;
  /* OutputOffset is scaled by calling Pwm_SetPeriodAndDuty. */
  CONST(boolean, PWM_CONST) OutputOffsetScaled;
  /* Output trigger ticks is scaled by calling Pwm_SetPeriodAndDuty. */
  CONST(boolean, PWM_CONST) HwTriggerOutputScaled;
  /* GroupStartDelay is enable or disable. */
  CONST(boolean, PWM_CONST) GroupStartDelayEnable;
  /* MaxChannelIdInGroup is true or false. */
  CONST(boolean, PWM_CONST) MaxChannelIdInGroup;
} Pwm_ChannelConfigType;

/* \brief  Definition of channel group configuration. */
typedef struct pwm_channelgroupconfigtype_struct
{
  /* Pointer to channel list. */
  CONSTP2CONST(Pwm_ChannelType, PWM_CONST, PWM_APPL_CONST) ChannelListPtr;
  /* Number of channels. */
  CONST(Pwm_ChannelType, PWM_CONST) NumberOfChannels;
  /* Hardware start trigger select value. */
  CONST(uint8, PWM_CONST) InputTrigger;
} Pwm_ChannelGroupConfigType;

/** \brief typedef Pwm_ConfigType
 **
 ** This is the type of data structure containing the initialization data for
 ** the PWM driver.
 ** Includes information for each configured channel as well as global settings
 ** for the driver */
typedef struct pwm_configsetconfigtype_struct
{
  /* Pointer to the array holding the individual channel configuration entries. */
  P2CONST(Pwm_ChannelConfigType, AUTOMATIC, PWM_APPL_CONST) ChannelConfigPtr;
  /* Pointer to the array holding the individual group configuration entries. */
  P2CONST(Pwm_ChannelGroupConfigType, AUTOMATIC, PWM_APPL_CONST) GroupConfigPtr;
  /* Pointer to channel id list of HW resource. */
  P2CONST(Pwm_ChannelType, AUTOMATIC, PWM_APPL_CONST) HWResourcePtr;
  /* Number of configured channels. */
  CONST(Pwm_ChannelType, PWM_CONST) NumberOfChannels;
  /* Number of configured groups.  */
  CONST(Pwm_ChannelGroupType, PWM_CONST) NumberOfGroups;
} Pwm_ConfigType;

/*==================[external function declarations]========================*/

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

/*==================[external function declarations]========================*/

/*==================[internal constants]====================================*/

/*==================[internal data]=========================================*/

#endif /*!defined(PWM_TYPES_H_INCLUDED)*/
/*==================[end of file]===========================================*/
