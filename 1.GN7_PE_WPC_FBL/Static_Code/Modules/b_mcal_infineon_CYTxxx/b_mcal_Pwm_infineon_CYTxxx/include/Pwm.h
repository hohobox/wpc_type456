/** \brief Pwm.h
 **
 ** This file contains or includes all external identifiers of the AUTOSAR Pwm driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

#ifndef PWM_H_INCLUDED
#define PWM_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Std_Types.h>
#include <Pwm_Types.h>
#include <Pwm_Cfg.h>
#include <Pwm_PBcfg.h>
#include <Pwm_Version.h>   /* Module version declarations */

/*==================[macros]================================================*/
/*------------------[AUTOSAR configuration AR version number check]----------*/

#if !defined( PWM_GEN_AR_RELEASE_MAJOR_VERSION)
#  error PWM_GEN_AR_RELEASE_MAJOR_VERSION not defined
#elif !defined( PWM_GEN_AR_RELEASE_MINOR_VERSION)
#  error PWM_GEN_AR_RELEASE_MINOR_VERSION not defined
#elif !defined( PWM_GEN_AR_RELEASE_REVISION_VERSION)
#  error PWM_GEN_AR_RELEASE_REVISION_VERSION not defined
#elif ( ((PWM_AR_RELEASE_MAJOR_VERSION) != (PWM_GEN_AR_RELEASE_MAJOR_VERSION)) || \
        ((PWM_AR_RELEASE_MINOR_VERSION) != (PWM_GEN_AR_RELEASE_MINOR_VERSION)) || \
        ((PWM_AR_RELEASE_REVISION_VERSION) != (PWM_GEN_AR_RELEASE_REVISION_VERSION)) )
#  error AUTOSAR PWM configuration AR version number mismatch
#endif

/*------------------[AUTOSAR configuration SW version number check]----------*/

#if !defined( PWM_GEN_MAJOR_VERSION)
#  error PWM_GEN_MAJOR_VERSION not defined
#elif !defined( PWM_GEN_MINOR_VERSION)
#  error PWM_GEN_MINOR_VERSION not defined
#elif !defined( PWM_GEN_PATCH_VERSION)
#  error PWM_GEN_PATCH_VERSION not defined
#elif ( ((PWM_SW_MAJOR_VERSION) != (PWM_GEN_MAJOR_VERSION)) || \
        ((PWM_SW_MINOR_VERSION) != (PWM_GEN_MINOR_VERSION)) )
#  error AUTOSAR PWM configuration SW version number mismatch
#endif

/*------------------[AUTOSAR configuration additional check]-----------------*/

#if !defined(PWM_GEN_MODULE_ID)
#  error PWM_GEN_MODULE_ID not defined
#elif !defined(PWM_GEN_VENDOR_ID)
#  error PWM_GEN_VENDOR_ID not defined
#elif ( ((PWM_MODULE_ID) != (PWM_GEN_MODULE_ID)) || \
        ((PWM_VENDOR_ID) != (PWM_GEN_VENDOR_ID)) )
#  error AUTOSAR PWM configuation additional checks failed
#endif

/*------------------[PWM error codes]---------------------------------------*/
/* API Pwm_Init service called with wrong parameter */
#define PWM_E_INIT_FAILED                             ((uint8) 0x10u)
/* API service used without module initialization */
#define PWM_E_UNINIT                                  ((uint8) 0x11u)
/* API service used with an invalid channel Identifier */
#define PWM_E_PARAM_CHANNEL                           ((uint8) 0x12u)
/* Usage of unauthorized PWM service on PWM channel configured a fixed period */
#define PWM_E_PERIOD_UNCHANGEABLE                     ((uint8) 0x13u)
/* API Pwm_Init service called while the PWM driver has already been initialized */
#define PWM_E_ALREADY_INITIALIZED                     ((uint8) 0x14u)
/* API service is called with a NULL parameter */
#define PWM_E_PARAM_POINTER                           ((uint8) 0x15u)
/* API Pwm_SetPowerState is called while the PWM module is still in use */
#define PWM_E_NOT_DISENGAGED                          ((uint8) 0x16u)
/* The requested power state is not supported by the PWM module. */
#define PWM_E_POWER_STATE_NOT_SUPPORTED               ((uint8) 0x17u)
/* The requested power state is not reachable from the current one */
#define PWM_E_TRANSITION_NOT_POSSIBLE                 ((uint8) 0x18u)
/* API Pwm_SetPowerState has been called without having called the API Pwm_PreparePowerState before */
#define PWM_E_PERIPHERAL_NOT_PREPARED                 ((uint8) 0x19u)


/* API service is called when waiting trigger. */
#define PWM_E_WAITING_TRIGGER                         ((uint8) 0x52U)
/* API service is called while channel is in idle state. */
#define PWM_E_IDLE                                    ((uint8) 0x53u)
/* API service used with an invalid state argument. */
#define PWM_E_PARAM_STATE                             ((uint8) 0x54u)
/* Duty is out of range */
#define PWM_E_DUTY_OUT_OF_RANGE                       ((uint8) 0x55u)
/* Period is out of range */
#define PWM_E_PERIOD_OUT_OF_RANGE                     ((uint8) 0x56u)
/* API service used with an invalid group Identifier */
#define PWM_E_PARAM_GROUP                             ((uint8) 0x57u)
/* API service used with an invalid notification argument */
#define PWM_E_PARAM_NOTIFICATION                      ((uint8) 0x58u)
/* Timer tick value is out of range */
#define PWM_E_PARAM_TICK                              ((uint8) 0x59u)
/* Clock frequency is out of range */
#define PWM_E_PARAM_CLOCK                             ((uint8) 0x60u)
/* Inconsistent prescaler value of all channels in the same group */
#define PWM_E_DIFFERENT_PRESCALER                     ((uint8) 0x61u)

/*------------------[PWM service IDs]---------------------------------------*/
/* Pwm_Init API service identifier */
#define PWM_API_INIT                                  ((uint8) 0x00u)
/* Pwm_DeInit API service identifier */
#define PWM_API_DEINIT                                ((uint8) 0x01u)
/* Pwm_SetDutyCycle API service identifier */
#define PWM_API_SETDUTYCYCLE                          ((uint8) 0x02u)
/* Pwm_SetPeriodAndDuty API service identifier */
#define PWM_API_SETPERIODANDDUTY                      ((uint8) 0x03u)
/* Pwm_SetOutputToIdle API service identifier */
#define PWM_API_SETOUTPUTTOIDLE                       ((uint8) 0x04u)
/* Pwm_GetOutputState API service identifier */
#define PWM_API_GETOUTPUTSTATE                        ((uint8) 0x05u)
/* Pwm_DisableNotification API service identifier */
#define PWM_API_DISABLENOTIFICATION                   ((uint8) 0x06u)
/* Pwm_EnableNotification API service identifier */
#define PWM_API_ENABLENOTIFICATION                    ((uint8) 0x07u)
/* Pwm_GetVersionInfo API service identifier */
#define PWM_API_GETVERSIONINFO                        ((uint8) 0x08u)
/* Pwm_SetPowerState API service identifier */
#define PWM_API_SETPOWERSTATE                         ((uint8) 0x09u)
/* Pwm_GetCurrentPowerState API service identifier */
#define PWM_API_GETCURRENTPOWERSTATE                  ((uint8) 0x0Au)
/* Pwm_GetTargetPowerState API service identifier */
#define PWM_API_GETTARGETPOWERSTATE                   ((uint8) 0x0Bu)
/* Pwm_PreparePowerState API service identifier */
#define PWM_API_PREPAREPOWERSTATE                     ((uint8) 0x0Cu)
/* Pwm_Main_PowerTransitionManager API service identifier */
#define PWM_API_MAIN_POWERTRANSITIONMANAGER           ((uint8) 0x0Du)

/* \Pwm_GetChannelStatus API service identifier */
#define PWM_API_GETCHANNELSTATUS                      ((uint8) 0x20u)
/* \ISR(Pwm_InterruptHandler) service identifier */
#define PWM_API_INTERRUPTHANDLER                      ((uint8) 0x40u)
/* \Pwm_StartGroupTrigger API service identifier */
#define PWM_API_STARTGROUPTRIGGER                     ((uint8) 0x41u)
/* \Pwm_StopGroupTrigger API service identifier */
#define PWM_API_STOPGROUPTRIGGER                      ((uint8) 0x42u)
/* \Pwm_SetChannelOutput API service identifier */
#define PWM_API_SETCHANNELOUTPUT                      ((uint8) 0x43u)
/* \Pwm_SetPrescaler API service identifier */
#define PWM_API_SETPRESCALER                          ((uint8) 0x44u)
/* \Pwm_SetOutputOffset API service identifier */
#define PWM_API_SETOUTPUTOFFSET                       ((uint8) 0x45u)
/* \Pwm_SetTriggerDelay API service identifier */
#define PWM_API_SETTRIGGERDELAY                       ((uint8) 0x46u)
/* \Pwm_EnableTrigger API service identifier */
#define PWM_API_ENABLETRIGGER                         ((uint8) 0x47u)
/* \Pwm_DisableTrigger API service identifier */
#define PWM_API_DISABLETRIGGER                        ((uint8) 0x48u)

/* \Pwm_SetDutyCycleBuffer API service identifier */
#define PWM_API_SETDUTYCYCLEBUFFER                    ((uint8) 0x49u)
/* \Pwm_SetChannelOutputBuffer API service identifier */
#define PWM_API_SETCHANNELOUTPUTBUFFER                ((uint8) 0x4Au)
/* \Pwm_SetDutyAndChannelOutputBuffer API service identifier */
#define PWM_API_SETDUTYCHANNELOUTPUTBUFFER            ((uint8) 0x4Bu)

/*==================[type definitions]======================================*/

/*==================[external constants]====================================*/

/*==================[external data]=========================================*/

/*==================[external function declarations]========================*/

#define PWM_START_SEC_CODE_ASIL_B
#include <Pwm_MemMap.h>

/** \brief Pwm_Init
 **
 ** Service for PWM initialization.
 **
 ** This function initializes all configured channels. All channels are started
 ** (creating a PWM output) dependent on their static configuration.
 ** Channels with 0% or 100% duty create a constant output level.
 ** Notifications are disabled for all channels.
 ** Triggers are enabled or disabled for all channels by configuration.
 **
 ** Note: If the period or duty value results in a HW limit (in generally some
 **       ticks near 0 or (duty-x)<period) the appropriate constant level will
 **       be forced. No development error is reported.
 **
 ** Preconditions:
 ** - No Init call should be done before.
 **
 ** \param [in] ConfigPtr   Pointer to configuration set.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_Init
(
  P2CONST(Pwm_ConfigType, AUTOMATIC, PWM_APPL_CONST) ConfigPtr
);

#if (PWM_DE_INIT_API == STD_ON)
/** \brief Pwm_DeInit
 **
 ** Service for PWM De-Initialization.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_DeInit(void);
#endif /* (PWM_DE_INIT_API == STD_ON) */

#if (PWM_NOTIFICATION_SUPPORTED == STD_ON)
/** \brief Pwm_DisableNotification
 **
 ** Service to disable the PWM signal edge notification.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_DisableNotification
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber
);

/** \brief Pwm_EnableNotification
 **
 ** Service to enable the PWM signal edge notification according to notification
 ** parameter.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the PWM channel.
 ** \param [in] Notification   Type of notification:
 **                            PWM_RISING_EDGE or
 **                            PWM_FALLING_EDGE or
 **                            PWM_BOTH_EDGES.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_EnableNotification
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(Pwm_EdgeNotificationType, AUTOMATIC) Notification
);
#endif /* (PWM_NOTIFICATION_SUPPORTED == STD_ON) */

#if (PWM_ENABLETRIGGER_SUPPORTED == STD_ON)
/** \brief Pwm_DisableTrigger
 **
 ** Service to disable the output trigger on the specified channel.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_DisableTrigger
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber
);

/** \brief Pwm_EnableTrigger
 **
 ** Service to enable the output trigger on the specified channel.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the PWM channel.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_EnableTrigger
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber
);
#endif /* (PWM_ENABLETRIGGER_SUPPORTED == STD_ON) */

#if (PWM_GET_OUTPUT_STATE_API == STD_ON)
/** \brief Pwm_GetOutputState
 **
 **  Read the internal state of the PWM output.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 **
 ** \return  Output state types
 **          PWM_HIGH: The PWM output state is high.
 **          PWM_LOW: The PWM output state is low.
 **
 */
extern FUNC(Pwm_OutputStateType, PWM_CODE) Pwm_GetOutputState
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber
);
#endif /* (PWM_GET_OUTPUT_STATE_API == STD_ON) */

#if (PWM_GET_VERSION_INFO_API == STD_ON)
/** \brief Pwm_GetVersionInfo
 **
 ** Service returns the version information of this module.
 **
 ** \param [out] versioninfo   Pointer to where to store the version information of
 **                            this module.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_GetVersionInfo
(
  P2VAR(Std_VersionInfoType, AUTOMATIC, PWM_APPL_DATA) versioninfo
);
#endif /* (PWM_GET_VERSION_INFO_API == STD_ON) */

#if (PWM_SET_DUTY_CYCLE_API == STD_ON)
/** \brief Pwm_SetDutyCycle
 **
 ** Service sets the duty cycle of the PWM channel.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] DutyCycle       Value of DutyCycle: Min=0x0000 Max=0x8000.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetDutyCycle
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(uint16, AUTOMATIC) DutyCycle
);
#endif /* (PWM_SET_DUTY_CYCLE_API == STD_ON) */

#if (PWM_SET_DUTYCYCLE_BUFFER_API == STD_ON)
/** \brief Pwm_SetDutyCycleBuffer
 **
 ** Service sets the duty cycle of the PWM channel to only buffer register.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] DutyCycle       Value of DutyCycle: Min=0x0000 Max=0x8000.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetDutyCycleBuffer
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(uint16, AUTOMATIC) DutyCycle
);
#endif /* (PWM_SET_DUTYCYCLE_BUFFER_API == STD_ON) */

#if (PWM_SET_DUTYANDCHANNEL_OUTPUTBUFFER_API == STD_ON)
/** \brief Pwm_SetDutyAndChannelOutputBuffer
 **
 ** Service sets the duty cycle and channel line and line complementary output 
 ** of the PWM channel to only buffer registers.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] DutyCycle       Value of DutyCycle: Min=0x0000 Max=0x8000.
 ** \param [in] LineState       PWM line output state.
 ** \param [in] LineCompState   PWM line complementary output state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetDutyAndChannelOutputBuffer
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(uint16, AUTOMATIC) DutyCycle,
  VAR(Pwm_OutputLineStateType, AUTOMATIC) LineState,
  VAR(Pwm_OutputLineStateType, AUTOMATIC) LineCompState
);
#endif /* (PWM_SET_DUTYANDCHANNEL_OUTPUTBUFFER_API == STD_ON) */

#if (PWM_SET_OUTPUT_TO_IDLE_API == STD_ON)
/** \brief Pwm_SetOutputToIdle
 **
 ** Service sets the PWM output to the configured Idle state.
 **
 ** \param [in] ChannelNumber  Numeric identifier of the PWM channel.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetOutputToIdle
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber
);
#endif /* (PWM_SET_OUTPUT_TO_IDLE_API == STD_ON) */

#if (PWM_SET_OUTPUT_STATUS_API == STD_ON)
/** \brief Pwm_SetChannelOutput
 **
 ** Service sets the PWM output to the specified state.
 ** Starting with the next PWM period, the PWM output shall be resumed.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] State           PWM output state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetChannelOutput
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(Pwm_OutputStateType, AUTOMATIC) State
);
#endif /* (PWM_SET_OUTPUT_STATUS_API == STD_ON) */

#if (PWM_SET_CHANNEL_OUTPUTBUFFER_API == STD_ON)
/** \brief Pwm_SetChannelOutputBuffer
 **
 ** Service sets the PWM line output and complementary output to specified state.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] LineState       PWM line output state.
 ** \param [in] LineCompState   PWM line complementary output state.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetChannelOutputBuffer
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(Pwm_OutputLineStateType, AUTOMATIC) LineState,
  VAR(Pwm_OutputLineStateType, AUTOMATIC) LineCompState
);
#endif /* (PWM_SET_CHANNEL_OUTPUTBUFFER_API == STD_ON) */

#if (PWM_SET_OUT_OFFSET_API == STD_ON)
/** \brief Pwm_SetOutputOffset
 **
 ** Service to set offset the PWM duty output.
 ** Set the PWM output offset time based on PWM period.
 ** It is applied each period.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] OffsetTick      Offset time for PWM output.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetOutputOffset
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(Pwm_PeriodType, AUTOMATIC) OffsetTick
);
#endif /* (PWM_SET_OUT_OFFSET_API == STD_ON) */

#if (PWM_SET_TRIGGER_DELAY_API == STD_ON)
/** \brief Pwm_SetTriggerDelay
 **
 ** Service to set offset for output trigger.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] TriggerTicks    Delay time for output trigger.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetTriggerDelay
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(Pwm_PeriodType, AUTOMATIC) TriggerTicks
);
#endif /* (PWM_SET_TRIGGER_DELAY_API == STD_ON) */

#if (PWM_SET_PRESCALER_API == STD_ON)
/** \brief Pwm_SetPrescaler
 **
 ** Service to set prescaler for the specified channel.
 **
 ** \param [in] ChannelNumber    Numeric identifier of the PWM channel.
 ** \param [in] ClockFrequency   Input clock frequency.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetPrescaler
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(Pwm_ClkFrequencyType, AUTOMATIC) ClockFrequency
);
#endif /* (PWM_SET_PRESCALER_API == STD_ON) */

#if (PWM_SET_PERIOD_AND_DUTY_API == STD_ON)
/** \brief Pwm_SetPeriodAndDuty
 **
 ** Service sets the period and the duty cycle of a PWM channel.
 **
 ** \param [in] ChannelNumber   Numeric identifier of the PWM channel.
 ** \param [in] Period          Period of the PWM signal.
 ** \param [in] DutyCycle       Value of DutyCycle: Min=0x0000 Max=0x8000.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_SetPeriodAndDuty
(
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber,
  VAR(Pwm_PeriodType, AUTOMATIC) Period,
  VAR(uint16, AUTOMATIC) DutyCycle
);
#endif /* (PWM_SET_PERIOD_AND_DUTY_API == STD_ON) */

/** \brief Pwm_StartGroupTrigger
 **
 ** Service to start the trigger all PWM channels in specified channel group.
 **
 ** \param [in] ChannelGroupNumber     Numeric identifier of a PWM channel group.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_StartGroupTrigger
(
  VAR(Pwm_ChannelGroupType, AUTOMATIC) ChannelGroupNumber
);

#if (PWM_STOPGROUPTRIGGER_SUPPORTED == STD_ON)
/** \brief Pwm_StopGroupTrigger
 **
 ** Service to stop the trigger all Pwm channels in specified channel group.
 **
 ** \param [in] ChannelGroupNumber     Numeric identifier of a PWM channel group.
 **
 */
extern FUNC(void, PWM_CODE) Pwm_StopGroupTrigger
(
  VAR(Pwm_ChannelGroupType, AUTOMATIC) ChannelGroupNumber
);

#endif /* (PWM_STOPGROUPTRIGGER_SUPPORTED == STD_ON) */

/** \brief Pwm_GetChannelStatus
 **
 ** Service to read the current status of the channel.
 **
 ** The function reads out several hardware register and puts them in a 
 ** structure which reflects the internal state. 
 ** In this structure the values "periodTicks" and "dutyTicks" correspond to the
 ** ticks which are used for creation of the PWM signal, but they are not 
 ** identical to the values from the hardware registers. This is due to a 
 ** hardware limitation of the registers which is taken into account by this 
 ** function.
 **
 ** \param [out] DriverStatusPtr    Pointer of driver status data.
 ** \param [out] ChannelStatusPtr   Pointer to where to store the current channel
 **                                 specific status parameters.
 ** \param [in]  ChannelNumber      Numeric identifier of the PWM channel.
 **
 ** \return     E_OK: Software and hardware states are in sync.
 **             E_NOT_OK: Software and hardware states are inconsistent.
 ** 
 */
extern FUNC(Std_ReturnType, PWM_CODE) Pwm_GetChannelStatus
(
  P2VAR(Pwm_DriverStatusType, AUTOMATIC, PWM_APPL_DATA)  DriverStatusPtr,
  P2VAR(Pwm_ChannelStatusType, AUTOMATIC, PWM_APPL_DATA) ChannelStatusPtr,
  VAR(Pwm_ChannelType, AUTOMATIC) ChannelNumber
);

#define PWM_STOP_SEC_CODE_ASIL_B
#include <Pwm_MemMap.h>

/*==================[end of file]===========================================*/

#endif /*!defined(PWM_H_INCLUDED)*/
