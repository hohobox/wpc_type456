#ifndef PORT_COMMON_DEFINES_H
#define PORT_COMMON_DEFINES_H

/** \brief AUTOSAR Port Port Driver
 **
 ** This file defines the common macro definition of Port driver.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Std_Types.h>           /* AUTOSAR standard types */
#include <Port_Version.h>        /* PORT driver Version check type defines */

/*==================[macros]=================================================*/
/*------------------[AUTOSAR vendor identification]--------------------------*/
#if (defined PORT_VENDOR_ID) /* to prevent double declaration */
#error PORT_VENDOR_ID is already defined
#endif /* if (defined PORT_VENDOR_ID) */

/** \brief AUTOSAR vendor identification */
#define PORT_VENDOR_ID 66U

/*------------------[AUTOSAR module identification]--------------------------*/
#if (defined PORT_MODULE_ID) /* to prevent double declaration */
#error PORT_MODULE_ID already defined
#endif /* if (defined PORT_MODULE_ID) */

/** \brief AUTOSAR module identification */
#define PORT_MODULE_ID 124U

/*------------------[AUTOSAR instance identification]------------------------*/
#if (defined PORT_INSTANCE_ID) /* to prevent double declaration */
#error PORT_INSTANCE_ID is already defined
#endif /* if (defined PORT_INSTANCE_ID) */

/** \brief AUTOSAR instance */
#define PORT_INSTANCE_ID 0U

/*------------------[AUTOSAR AR version number check]------------------------*/
#if !PORT_AR_VERSION_CHECK(4U, 2U, 2U)
#error AUTOSAR AR version number mismatch
#endif

/*------------------[AUTOSAR SW version number check]------------------------*/
#if !PORT_SW_VERSION_CHECK(1U, 18U, PORT_GEN_SW_PATCH_VERSION)
#error AUTOSAR SW version number mismatch
#endif

/*------------------[Service identifiers]------------------------------------*/
/** \brief Definition of the service Id of the port init service */
#define PORT_API_INIT                   0U
/** \brief Definition of the service Id of the port set pin direction service */
#define PORT_API_SET_PIN_DIRECTION      1U
/** \brief Definition of the service Id of the port refresh direction service */
#define PORT_API_REFRESH_PORT_DIRECTION 2U
/** \brief Definition of the service Id of the port get version info service */
#define PORT_API_GET_VERSION_INFO       3U
/** \brief Definition of the service Id of the port set pin mode service */
#define PORT_API_SET_PIN_MODE           4U
/** \brief Definition of the service Id of the port set trigger service */
#define PORT_API_SET_TRIGGER            0xF7U
/** \brief Definition of the service Id of the port activate trigger command service */
#define PORT_API_ACT_TRIGGER            0xF8U
/** \brief Definition of the service Id of the port deactivate trigger command service */
#define PORT_API_DEACT_TRIGGER          0xF9U
/** \brief Definition of the service Id of the port get trigger status service */
#define PORT_API_GET_STATUS_TR_ID       0xFAU
/** \brief Definition of the service Id of the port get trigger command status service */
#define PORT_API_GET_STATUS_TR_CMD      0xFBU
/** \brief Definition of the service Id of the port set GPIO mode service */
#define PORT_API_SET_TO_DIO_MODE        0xFCU
/** \brief Definition of the service Id of the port set alternate mode service */
#define PORT_API_SET_TO_ALTERNATE_MODE  0xFDU
/** \brief Definition of the service Id of the port get status service */
#define PORT_API_GET_STATUS             0xFEU
/** \brief Definition of the service Id of the port get AMUX splitter cell status service */
#define PORT_API_GET_AMUX_CTL_STATUS    0xFFU

/*------------------[Development errors]-------------------------------------*/
/** \brief Error if incorrect Port Pin Id passed */
#define PORT_E_PARAM_PIN                    ((uint8)10U)
/** \brief Error if Port Pin Direction is defined as Unchangeable */
#define PORT_E_DIRECTION_UNCHANGEABLE       ((uint8)11U)
/** \brief Error if Port_Init called with wrong parameter */
#define PORT_E_INIT_FAILED                  ((uint8)12U)
/** \brief Error if Port_SetPinMode called with unknown mode value */
#define PORT_E_PARAM_INVALID_MODE           ((uint8)13U)
/** \brief Error if mode in Port_SetPinMode can not be changed */
#define PORT_E_MODE_UNCHANGEABLE            ((uint8)14U)
/** \brief Error if Port_Init function was not called */
#define PORT_E_UNINIT                       ((uint8)15U)
/** \brief Error if API called with a null pointer */
#define PORT_E_PARAM_POINTER                ((uint8)16U)
/** \brief Error if Port_GetAmuxSplitCtlStatus called with invalid cell value */
#define PORT_E_PARAM_CELL                   ((uint8)29U)
/** \brief Error if Port_SetPinDirection called with unknown direction value */
#define PORT_E_PARAM_INVALID_DIRECTION      ((uint8)32U)
/** \brief Error if the register value and the configuration does not match */
#define PORT_E_REGISTER                     ((uint8)33U)
/** \brief Error if the trigger group id value invalid */
#define PORT_E_PARAM_TR_GROUP               ((uint8)34U)
/** \brief Error if the output trigger id value invalid */
#define PORT_E_PARAM_TR_OUTPUT              ((uint8)35U)
/** \brief Error if the input trigger id value invalid */
#define PORT_E_PARAM_TR_INPUT               ((uint8)36U)
/** \brief Error if the trigger sensitive type value invalid */
#define PORT_E_PARAM_TR_SENSITIVE           ((uint8)37U)
/** \brief Error if the trigger activation type value invalid */
#define PORT_E_PARAM_TR_ACTIVATION          ((uint8)38U)
/** \brief Error if the trigger command status invalid */
#define PORT_E_TR_CMD_STATUS                ((uint8)39U)
/** \brief Error if the trigger group does not have the trigger manipulation logic */
#define PORT_E_TR_MANIPULATION_NOT_PRESENT  ((uint8)40U)

/** \brief PORT_FALSE for boolean operations */
#define PORT_FALSE                          0U
/** \brief PORT_TRUE for boolean operations */
#define PORT_TRUE                           1U

/*------------------------[Config conversion macros]-------------------------*/
/*
 * PORT_SET_SIMPLE_8BIT()
 *
 * This macro set a variable of 8bit.
 * The parameters(a,b,...,h) are set every bit.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 4 */
#define PORT_SET_SIMPLE_8BIT(a0,b0,c0,d0,e0,f0,g0,h0)                                         \
    (uint8)                                                                                   \
    ((((uint32)(a0))<< 0U)|(((uint32)(b0))<< 1U)|(((uint32)(c0))<< 2U)|(((uint32)(d0))<< 3U)| \
     (((uint32)(e0))<< 4U)|(((uint32)(f0))<< 5U)|(((uint32)(g0))<< 6U)|(((uint32)(h0))<< 7U))

#define PORT_PORTPIN_PIN_NUMBER             8U    /* Number of pin every a port */
#define PORT_PIN_MASK                       0x7U  /* Mask of pin id */
#define PORT_PORT_POSITION                  3U    /* Position of port id */

/*------------------------[Configuration settings]---------------------------*/
/** Direction changeable enable flag */
#define PORT_DIR_CHANGEABLE_TRUE   1U
#define PORT_DIR_CHANGEABLE_FALSE  0U

/** Mode changeable enable flag */
#define PORT_MODE_CHANGEABLE_TRUE  1U
#define PORT_MODE_CHANGEABLE_FALSE 0U


/*
 * PORT_SET_AMUX_SPLIT_CTL()
 *
 * This macro set a value of setting AMUX_SPLIT_CTL Register.
 * The parameters are :
 *     switch_aa_sl_val     Set SWITCH_AA_SL field.
 *     switch_aa_sr_val     Set SWITCH_AA_SR field.
 *     switch_aa_s0_val     Set SWITCH_AA_S0 field.
 *     switch_bb_sl_val     Set SWITCH_BB_SL field.
 *     switch_bb_sr_val     Set SWITCH_BB_SR field.
 *     switch_bb_s0_val     Set SWITCH_BB_S0 field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 6 */
#define PORT_SET_AMUX_SPLIT_CTL(switch_aa_sl_val, switch_aa_sr_val, switch_aa_s0_val,                                 \
                                switch_bb_sl_val, switch_bb_sr_val, switch_bb_s0_val)                                 \
    (uint32)                                                                                                          \
     ( ((uint32)(switch_aa_sl_val) << 0U) | ((uint32)(switch_aa_sr_val) << 1U) | ((uint32)(switch_aa_s0_val) << 2U) | \
       ((uint32)(switch_bb_sl_val) << 4U) | ((uint32)(switch_bb_sr_val) << 5U) | ((uint32)(switch_bb_s0_val) << 6U)   \
     )

/*
 * PORT_SET_CFG()
 *
 * This macro set a value of setting CFG Register.
 * The parameters are :
 *     drive_mode0_val      Set DRIVE_MODE0 field.
 *     in_en0_val           Set IN_EN0 field.
 *     drive_mode1_val      Set DRIVE_MODE1 field.
 *     in_en1_val           Set IN_EN1 field.
 *     drive_mode2_val      Set DRIVE_MODE2 field.
 *     in_en2_val           Set IN_EN2 field.
 *     drive_mode3_val      Set DRIVE_MODE3 field.
 *     in_en3_val           Set IN_EN3 field.
 *     drive_mode4_val      Set DRIVE_MODE4 field.
 *     in_en4_val           Set IN_EN4 field.
 *     drive_mode5_val      Set DRIVE_MODE5 field.
 *     in_en5_val           Set IN_EN5 field.
 *     drive_mode6_val      Set DRIVE_MODE6 field.
 *     in_en6_val           Set IN_EN6 field.
 *     drive_mode7_val      Set DRIVE_MODE7 field.
 *     in_en7_val           Set IN_EN7 field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 14 */
#define PORT_SET_CFG(drive_mode0_val, in_en0_val, drive_mode1_val, in_en1_val, \
                     drive_mode2_val, in_en2_val, drive_mode3_val, in_en3_val, \
                     drive_mode4_val, in_en4_val, drive_mode5_val, in_en5_val, \
                     drive_mode6_val, in_en6_val, drive_mode7_val, in_en7_val) \
    (uint32)                                                                   \
     ( ((uint32)(drive_mode0_val) <<  0U) | ((uint32)(in_en0_val) <<  3U) |    \
       ((uint32)(drive_mode1_val) <<  4U) | ((uint32)(in_en1_val) <<  7U) |    \
       ((uint32)(drive_mode2_val) <<  8U) | ((uint32)(in_en2_val) << 11U) |    \
       ((uint32)(drive_mode3_val) << 12U) | ((uint32)(in_en3_val) << 15U) |    \
       ((uint32)(drive_mode4_val) << 16U) | ((uint32)(in_en4_val) << 19U) |    \
       ((uint32)(drive_mode5_val) << 20U) | ((uint32)(in_en5_val) << 23U) |    \
       ((uint32)(drive_mode6_val) << 24U) | ((uint32)(in_en6_val) << 27U) |    \
       ((uint32)(drive_mode7_val) << 28U) | ((uint32)(in_en7_val) << 31U)      \
     )

/*
 * PORT_SET_CFG_IN()
 *
 * This macro set a value of setting CFG_IN Register.
 * The parameters are :
 *     vtrip_sel0_val       Set VTRIP_SEL0_x field.
 *     vtrip_sel1_val       Set VTRIP_SEL1_x field.
 *     vtrip_sel2_val       Set VTRIP_SEL2_x field.
 *     vtrip_sel3_val       Set VTRIP_SEL3_x field.
 *     vtrip_sel4_val       Set VTRIP_SEL4_x field.
 *     vtrip_sel5_val       Set VTRIP_SEL5_x field.
 *     vtrip_sel6_val       Set VTRIP_SEL6_x field.
 *     vtrip_sel7_val       Set VTRIP_SEL7_x field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 12 */
#define PORT_SET_CFG_IN(vtrip_sel0_val, vtrip_sel1_val, vtrip_sel2_val, vtrip_sel3_val, \
                        vtrip_sel4_val, vtrip_sel5_val, vtrip_sel6_val, vtrip_sel7_val) \
    (uint32)                                                                            \
     ( ((uint32)(vtrip_sel0_val) << 0U) |                                               \
       ((uint32)(vtrip_sel1_val) << 1U) |                                               \
       ((uint32)(vtrip_sel2_val) << 2U) |                                               \
       ((uint32)(vtrip_sel3_val) << 3U) |                                               \
       ((uint32)(vtrip_sel4_val) << 4U) |                                               \
       ((uint32)(vtrip_sel5_val) << 5U) |                                               \
       ((uint32)(vtrip_sel6_val) << 6U) |                                               \
       ((uint32)(vtrip_sel7_val) << 7U)                                                 \
     )

/*
 * PORT_SET_CFG_OUT()
 *
 * This macro set a value of setting CFG_OUT Register.
 * The parameters are :
 *     slow0_val            Set SLOW0 field.
 *     slow1_val            Set SLOW1 field.
 *     slow2_val            Set SLOW2 field.
 *     slow3_val            Set SLOW3 field.
 *     slow4_val            Set SLOW4 field.
 *     slow5_val            Set SLOW5 field.
 *     slow6_val            Set SLOW6 field.
 *     slow7_val            Set SLOW7 field.
 *     drive_sel0_val       Set DRIVE_SEL0 field.
 *     drive_sel1_val       Set DRIVE_SEL1 field.
 *     drive_sel2_val       Set DRIVE_SEL2 field.
 *     drive_sel3_val       Set DRIVE_SEL3 field.
 *     drive_sel4_val       Set DRIVE_SEL4 field.
 *     drive_sel5_val       Set DRIVE_SEL5 field.
 *     drive_sel6_val       Set DRIVE_SEL6 field.
 *     drive_sel7_val       Set DRIVE_SEL7 field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 14 */
#define PORT_SET_CFG_OUT(slow0_val, slow1_val, slow2_val, slow3_val,                     \
                         slow4_val, slow5_val, slow6_val, slow7_val,                     \
                         drive_sel0_val, drive_sel1_val, drive_sel2_val, drive_sel3_val, \
                         drive_sel4_val, drive_sel5_val, drive_sel6_val, drive_sel7_val) \
    (uint32)                                                                             \
     ( ((uint32)(slow0_val) << 0U) | ((uint32)(slow1_val) << 1U) |                       \
       ((uint32)(slow2_val) << 2U) | ((uint32)(slow3_val) << 3U) |                       \
       ((uint32)(slow4_val) << 4U) | ((uint32)(slow5_val) << 5U) |                       \
       ((uint32)(slow6_val) << 6U) | ((uint32)(slow7_val) << 7U) |                       \
       ((uint32)(drive_sel0_val) << 16U) | ((uint32)(drive_sel1_val) << 18U) |           \
       ((uint32)(drive_sel2_val) << 20U) | ((uint32)(drive_sel3_val) << 22U) |           \
       ((uint32)(drive_sel4_val) << 24U) | ((uint32)(drive_sel5_val) << 26U) |           \
       ((uint32)(drive_sel6_val) << 28U) | ((uint32)(drive_sel7_val) << 30U)             \
     )

/*
 * PORT_SET_CFG_SIO()
 *
 * This macro set a value of setting CFG_SIO Register.
 * The parameters are :
 *     vreg_en01_val        Set VREG_EN01 field.
 *     ibuf_vtrip01_val     Set IBUF_SEL01 and VTRIP_SEL01 field.
 *     vref_sel01_val       Set VREF_SEL01 field.
 *     voh_sel01_val        Set VOH_SEL01 field.
 *     vreg_en23_val        Set VREG_EN23 field.
 *     ibuf_vtrip23_val     Set IBUF_SEL23 and VTRIP_SEL23 field.
 *     vref_sel23_val       Set VREF_SEL23 field.
 *     voh_sel23_val        Set VOH_SEL23 field.
 *     vreg_en45_val        Set VREG_EN45 field.
 *     ibuf_vtrip45_val     Set IBUF_SEL45 and VTRIP_SEL45 field.
 *     vref_sel45_val       Set VREF_SEL45 field.
 *     voh_sel45_val        Set VOH_SEL45 field.
 *     vreg_en67_val        Set VREG_EN67 field.
 *     ibuf_vtrip67_val     Set IBUF_SEL67 and VTRIP_SEL67 field.
 *     vref_sel67_val       Set VREF_SEL67 field.
 *     voh_sel67_val        Set VOH_SEL67 field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 14 */
#define PORT_SET_CFG_SIO(vreg_en01_val, ibuf_vtrip01_val, vref_sel01_val, voh_sel01_val, \
                         vreg_en23_val, ibuf_vtrip23_val, vref_sel23_val, voh_sel23_val, \
                         vreg_en45_val, ibuf_vtrip45_val, vref_sel45_val, voh_sel45_val, \
                         vreg_en67_val, ibuf_vtrip67_val, vref_sel67_val, voh_sel67_val) \
    (uint32)                                                                             \
      ( ((uint32)(vreg_en01_val) << 0U) | ((uint32)(ibuf_vtrip01_val) << 1U) |           \
        ((uint32)(vref_sel01_val) << 3U) | ((uint32)(voh_sel01_val) << 5U) |             \
        ((uint32)(vreg_en23_val) << 8U) | ((uint32)(ibuf_vtrip23_val) << 9U) |           \
        ((uint32)(vref_sel23_val) << 11U) | ((uint32)(voh_sel23_val) << 13U) |           \
        ((uint32)(vreg_en45_val) << 16U) | ((uint32)(ibuf_vtrip45_val) << 17U) |         \
        ((uint32)(vref_sel45_val) << 19U) | ((uint32)(voh_sel45_val) << 21U) |           \
        ((uint32)(vreg_en67_val) << 24U) | ((uint32)(ibuf_vtrip67_val) << 25U) |         \
        ((uint32)(vref_sel67_val) << 27U) | ((uint32)(voh_sel67_val) << 29U)             \
     )

/*
 * PORT_SET_CTL()
 *
 * This macro set a value of setting CTL Register.
 * The parameters are :
 *     bypass0_val          Set BYPASS[0] field.
 *     bypass1_val          Set BYPASS[1] field.
 *     bypass2_val          Set BYPASS[2] field.
 *     bypass3_val          Set BYPASS[3] field.
 *     bypass4_val          Set BYPASS[4] field.
 *     bypass5_val          Set BYPASS[5] field.
 *     bypass6_val          Set BYPASS[6] field.
 *     bypass7_val          Set BYPASS[7] field.
 *     clock_src_val        Set CLOCK_SRC field.
 *     hld_ovr_val          Set HLD_OVR field.
 *     pipeline_en_val      Set PIPELINE_EN field.
 *     enabled_val          Set ENABLED field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 11 */
#define PORT_SET_CTL(bypass0_val, bypass1_val, bypass2_val, bypass3_val,       \
                     bypass4_val, bypass5_val, bypass6_val, bypass7_val,       \
                     clock_src_val, hld_ovr_val, pipeline_en_val, enabled_val) \
    (uint32)                                                                   \
       ( ((uint32)(bypass0_val) << 0U) | ((uint32)(bypass1_val) << 1U) |       \
         ((uint32)(bypass2_val) << 2U) | ((uint32)(bypass3_val) << 3U) |       \
         ((uint32)(bypass4_val) << 4U) | ((uint32)(bypass5_val) << 5U) |       \
         ((uint32)(bypass6_val) << 6U) | ((uint32)(bypass7_val) << 7U) |       \
         ((uint32)(clock_src_val) << 8U) | ((uint32)(hld_ovr_val) << 24U) |    \
         ((uint32)(pipeline_en_val) << 25U) | ((uint32)(enabled_val) << 31U)   \
     )

/*
 * PORT_SET_DU_CTL()
 *
 * This macro set a value of setting DU_CTL Register.
 * The parameters are :
 *     du_size_val          Set DU_SIZE field.
 *     du_opc_val           Set DU_OPC field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 2 */
#define PORT_SET_DU_CTL(du_size_val, du_opc_val)                              \
    (uint32) ( ((uint32)(du_size_val) << 0U) | ((uint32)(du_opc_val) << 8U) )

/*
 * PORT_SET_DU_SEL()
 *
 * This macro set a value of setting DU_SEL Register.
 * The parameters are :
 *     du_tr0_sel_val       Set DU_TR0_SEL field.
 *     du_tr1_sel_val       Set DU_TR1_SEL field.
 *     du_tr2_sel_val       Set DU_TR2_SEL field.
 *     du_data0_sel_val     Set DU_DATA0_SEL field.
 *     du_data1_sel_val     Set DU_DATA1_SEL field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 6 */
#define PORT_SET_DU_SEL(du_tr0_sel_val, du_tr1_sel_val, du_tr2_sel_val,                                           \
                        du_data0_sel_val, du_data1_sel_val)                                                       \
     (uint32)                                                                                                     \
      ( ((uint32)(du_tr0_sel_val) << 0U) | ((uint32)(du_tr1_sel_val) << 8U) | ((uint32)(du_tr2_sel_val) << 16U) | \
        ((uint32)(du_data0_sel_val) << 24U) | ((uint32)(du_data1_sel_val) << 28U)                                 \
      )

/*
 * PORT_SET_LUT_CTL()
 *
 * This macro set a value of setting LUT_CTL Register.
 * The parameters are :
 *     lut_val              Set LUT field.
 *     lut_opc_val          Set LUT_OPC field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 2 */
#define PORT_SET_LUT_CTL(lut_val, lut_opc_val)                             \
    (uint32) ( ((uint32)(lut_val) << 0U) | ((uint32)(lut_opc_val) << 8U) )

/*
 * PORT_SET_LUT_SEL()
 *
 * This macro set a value of setting LUT_SEL Register.
 * The parameters are :
 *     lut_tr0_sel_val      Set LUT_TR0_SEL field.
 *     lut_tr1_sel_val      Set LUT_TR1_SEL field.
 *     lut_tr2_sel_val      Set LUT_TR2_SEL field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 3 */
#define PORT_SET_LUT_SEL(lut_tr0_sel_val, lut_tr1_sel_val, lut_tr2_sel_val)                                          \
     (uint32)                                                                                                        \
      ( ((uint32)(lut_tr0_sel_val) << 0U) | ((uint32)(lut_tr1_sel_val) << 8U) | ((uint32)(lut_tr2_sel_val) << 16U) )

/*
 * PORT_SET_PORT_SEL()
 *
 * This macro set a value of setting PORT_SEL Register.
 * The parameters are :
 *     io04_sel_val         Set IO0_SEL / IO4_SEL field.
 *     io15_sel_val         Set IO1_SEL / IO5_SEL field.
 *     io26_sel_val         Set IO2_SEL / IO6_SEL field.
 *     io37_sel_val         Set IO3_SEL / IO7_SEL field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 5 */
#define PORT_SET_PORT_SEL(io04_sel_val, io15_sel_val, io26_sel_val, io37_sel_val) \
     (uint32)                                                                     \
       ( ((uint32)(io04_sel_val) <<  0U) | ((uint32)(io15_sel_val) <<  8U) |      \
         ((uint32)(io26_sel_val) << 16U) | ((uint32)(io37_sel_val) << 24U)        \
       )

/*
 * PORT_SET_SYNC_CTL()
 *
 * This macro set a value of setting SYNC_CTL Register.
 * The parameters are :
 *     io_sync_en0_val      Set IO_SYNC_EN[0] field.
 *     io_sync_en1_val      Set IO_SYNC_EN[1] field.
 *     io_sync_en2_val      Set IO_SYNC_EN[2] field.
 *     io_sync_en3_val      Set IO_SYNC_EN[3] field.
 *     io_sync_en4_val      Set IO_SYNC_EN[4] field.
 *     io_sync_en5_val      Set IO_SYNC_EN[5] field.
 *     io_sync_en6_val      Set IO_SYNC_EN[6] field.
 *     io_sync_en7_val      Set IO_SYNC_EN[7] field.
 *     chip_sync_en0_val    Set CHIP_SYNC_EN[0] field.
 *     chip_sync_en1_val    Set CHIP_SYNC_EN[1] field.
 *     chip_sync_en2_val    Set CHIP_SYNC_EN[2] field.
 *     chip_sync_en3_val    Set CHIP_SYNC_EN[3] field.
 *     chip_sync_en4_val    Set CHIP_SYNC_EN[4] field.
 *     chip_sync_en5_val    Set CHIP_SYNC_EN[5] field.
 *     chip_sync_en6_val    Set CHIP_SYNC_EN[6] field.
 *     chip_sync_en7_val    Set CHIP_SYNC_EN[7] field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 14 */
#define PORT_SET_SYNC_CTL(io_sync_en0_val, io_sync_en1_val, io_sync_en2_val, io_sync_en3_val,         \
                          io_sync_en4_val, io_sync_en5_val, io_sync_en6_val, io_sync_en7_val,         \
                          chip_sync_en0_val, chip_sync_en1_val, chip_sync_en2_val, chip_sync_en3_val, \
                          chip_sync_en4_val, chip_sync_en5_val, chip_sync_en6_val, chip_sync_en7_val) \
     (uint32)                                                                                         \
       ( ((uint32)(io_sync_en0_val) << 0U) | ((uint32)(io_sync_en1_val) << 1U) |                      \
         ((uint32)(io_sync_en2_val) << 2U) | ((uint32)(io_sync_en3_val) << 3U) |                      \
         ((uint32)(io_sync_en4_val) << 4U) | ((uint32)(io_sync_en5_val) << 5U) |                      \
         ((uint32)(io_sync_en6_val) << 6U) | ((uint32)(io_sync_en7_val) << 7U) |                      \
         ((uint32)(chip_sync_en0_val) <<  8U) | ((uint32)(chip_sync_en1_val) <<  9U) |                \
         ((uint32)(chip_sync_en2_val) << 10U) | ((uint32)(chip_sync_en3_val) << 11U) |                \
         ((uint32)(chip_sync_en4_val) << 12U) | ((uint32)(chip_sync_en5_val) << 13U) |                \
         ((uint32)(chip_sync_en6_val) << 14U) | ((uint32)(chip_sync_en7_val) << 15U)                  \
       )

/*
 * PORT_SET_DIRECTION_CHANGEABLE()
 *
 * This macro set a value of setting SYNC_CTL Register.
 * The parameters are :
 *     pin0_dir_changeable  Set direction changeable of pin0.
 *     pin1_dir_changeable  Set direction changeable of pin1.
 *     pin2_dir_changeable  Set direction changeable of pin2.
 *     pin3_dir_changeable  Set direction changeable of pin3.
 *     pin4_dir_changeable  Set direction changeable of pin4.
 *     pin5_dir_changeable  Set direction changeable of pin5.
 *     pin6_dir_changeable  Set direction changeable of pin6.
 *     pin7_dir_changeable  Set direction changeable of pin7.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 9 */
#define PORT_SET_DIRECTION_CHANGEABLE(pin0_dir_changeable, pin1_dir_changeable, pin2_dir_changeable,            \
                                      pin3_dir_changeable, pin4_dir_changeable, pin5_dir_changeable,            \
                                      pin6_dir_changeable, pin7_dir_changeable)                                 \
     (uint32)                                                                                                   \
      ( ((((uint32)(pin0_dir_changeable)) * 0xFU) <<  0U) | ((((uint32)(pin1_dir_changeable)) * 0xFU) <<  4U) | \
        ((((uint32)(pin2_dir_changeable)) * 0xFU) <<  8U) | ((((uint32)(pin3_dir_changeable)) * 0xFU) << 12U) | \
        ((((uint32)(pin4_dir_changeable)) * 0xFU) << 16U) | ((((uint32)(pin5_dir_changeable)) * 0xFU) << 20U) | \
        ((((uint32)(pin6_dir_changeable)) * 0xFU) << 24U) | ((((uint32)(pin7_dir_changeable)) * 0xFU) << 28U)   \
      )

/*
 * PORT_SET_CFG_OUT2()
 *
 * This macro set a value of setting CFG_OUT2 Register.
 * The parameters are :
 *     ds_trim0_val            Set DS_TRIM0 field.
 *     ds_trim1_val            Set DS_TRIM1 field.
 *     ds_trim2_val            Set DS_TRIM2 field.
 *     ds_trim3_val            Set DS_TRIM3 field.
 *     ds_trim4_val            Set DS_TRIM4 field.
 *     ds_trim5_val            Set DS_TRIM5 field.
 *     ds_trim6_val            Set DS_TRIM6 field.
 *     ds_trim7_val            Set DS_TRIM7 field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 14 */
#define PORT_SET_CFG_OUT2(ds_trim0_val, ds_trim1_val, ds_trim2_val, ds_trim3_val,        \
                         ds_trim4_val, ds_trim5_val, ds_trim6_val, ds_trim7_val)         \
    (uint32)                                                                             \
     ( ((uint32)(ds_trim0_val) <<  0U) | ((uint32)(ds_trim1_val) <<  3U) |               \
       ((uint32)(ds_trim2_val) <<  6U) | ((uint32)(ds_trim3_val) <<  9U) |               \
       ((uint32)(ds_trim4_val) << 12U) | ((uint32)(ds_trim5_val) << 15U) |               \
       ((uint32)(ds_trim6_val) << 18U) | ((uint32)(ds_trim7_val) << 21U)                 \
     )

/*
 * PORT_SET_CFG_SLEW_EXT()
 *
 * This macro set a value of setting CFG_SLEW_EXT Register.
 * The parameters are :
 *     slew0_val               Set SLEW0 field.
 *     slew1_val               Set SLEW1 field.
 *     slew2_val               Set SLEW2 field.
 *     slew3_val               Set SLEW3 field.
 *     slew4_val               Set SLEW4 field.
 *     slew5_val               Set SLEW5 field.
 *     slew6_val               Set SLEW6 field.
 *     slew7_val               Set SLEW7 field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 14 */
#define PORT_SET_CFG_SLEW_EXT(slew0_val, slew1_val, slew2_val, slew3_val,                \
                              slew4_val, slew5_val, slew6_val, slew7_val)                \
    (uint32)                                                                             \
     ( ((uint32)(slew0_val) <<  0U) | ((uint32)(slew1_val) <<  4U) |                     \
       ((uint32)(slew2_val) <<  8U) | ((uint32)(slew3_val) << 12U) |                     \
       ((uint32)(slew4_val) << 16U) | ((uint32)(slew5_val) << 20U) |                     \
       ((uint32)(slew6_val) << 24U) | ((uint32)(slew7_val) << 28U)                       \
     )

/*
 * PORT_SET_CFG_DRIVE_EXT()
 *
 * This macro set a value of setting CFG_DRIVE_EXT0, CFG_DRIVE_EXT1 Register.
 * The parameters are :
 *     drive_sel_ext04_val     Set DRIVE_SEL_EXT0/DRIVE_SEL_EXT4 field.
 *     drive_sel_ext15_val     Set DRIVE_SEL_EXT1/DRIVE_SEL_EXT5 field.
 *     drive_sel_ext26_val     Set DRIVE_SEL_EXT2/DRIVE_SEL_EXT6 field.
 *     drive_sel_ext37_val     Set DRIVE_SEL_EXT3/DRIVE_SEL_EXT7 field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 14 */
#define PORT_SET_CFG_DRIVE_EXT(drive_sel_ext04_val, drive_sel_ext15_val,                 \
                               drive_sel_ext26_val, drive_sel_ext37_val)                 \
    (uint32)                                                                             \
     ( ((uint32)(drive_sel_ext04_val) <<  0U) | ((uint32)(drive_sel_ext15_val) <<  8U) | \
       ((uint32)(drive_sel_ext26_val) << 16U) | ((uint32)(drive_sel_ext37_val) << 24U)   \
     )

/*
 * PORT_SET_TR_CMD()
 *
 * This macro sets a value of setting TR_CMD Register.
 * The parameters are :
 *     tr_sel_val       Set TR_SEL field.
 *     group_sel_val    Set GROUP_SEL field.
 *     tr_edge_val      Set TR_EDGE field.
 *     out_sel_val      Set OUT_SEL field.
 *     activate_val     Set ACTIVATE field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 8 */
#define PORT_SET_TR_CMD(tr_sel_val, group_sel_val, tr_edge_val, out_sel_val, activate_val) \
     (uint32)                              \
     ( (uint32)(tr_sel_val)              | \
       ((uint32)(group_sel_val) << 8U)   | \
       ((uint32)(tr_edge_val)   << 29U)  | \
       ((uint32)(out_sel_val)   << 30U)  | \
       ((uint32)(activate_val)  << 31U)    \
     )

/*
 * PORT_SET_TR_CTL()
 *
 * This macro sets a value of setting TR_CTL Register.
 * The parameters are :
 *     tr_sel_val           Set TR_SEL field.
 *     tr_inv_val           Set TR_INV field.
 *     tr_edge_val          Set TR_EDGE field.
 *     dbg_freeze_en_val    Set DBG_FREEZE_EN field.
*/
/* Deviation from MISRA-C:2004 rule 19.7, MISRA-C:2012 Dir-4.9
   Justification: Implementation often uses macro like function. */
/* PRQA S 3453 7 */
#define PORT_SET_TR_CTL(tr_sel_val, tr_inv_val, tr_edge_val, dbg_freeze_en_val) \
     (uint32)                                 \
     ( (uint32)(tr_sel_val)                 | \
       ((uint32)(tr_inv_val)        << 8U)  | \
       ((uint32)(tr_edge_val)       << 9U)  | \
       ((uint32)(dbg_freeze_en_val) << 12U)   \
     )

#define PORT_MAX_PORT               128U    /* Max number of port     */
#define PORT_MAX_PIN                1024U   /* Max number of port pin */
#define PORT_MAX_AMUX_SPLIT_CELL    64U     /* Max number of AMUX splitter cell */
#define PORT_MAX_TR_GROUP           32U     /* Max number of trigger group */
#define PORT_MAX_TR_MUX_GROUP       16U     /* Max number of trigger multiplexer group */

/*-----------------[Definition of function Port_GetStatus]-------------------*/
/* common */
#define PORT_PIN_STATUS_FAILURE                 0xFFU

/*--------------------[Definition of register field value]-------------------*/
/* Definition of pin direction */
#define PORT_PIN_IN_DISABLE                     0U
#define PORT_PIN_IN_ENABLE                      1U

/* Definition of port pin mode */
#define PORT_PIN_MODE_GPIO                      0U
#define PORT_PIN_MODE_GPIO_DSI                  1U
#define PORT_PIN_MODE_DSI_DSI                   2U
#define PORT_PIN_MODE_DSI_GPIO                  3U
#define PORT_PIN_MODE_AMUXA                     4U
#define PORT_PIN_MODE_AMUXB                     5U
#define PORT_PIN_MODE_AMUXA_DSI                 6U
#define PORT_PIN_MODE_AMUXB_DSI                 7U

/* Definition of clock ("clk_fabric") and reset ("rst_fabric_n") soure selection */
#define PORT_SMART_CLK_SRC_IO0                  0U
#define PORT_SMART_CLK_SRC_IO1                  1U
#define PORT_SMART_CLK_SRC_IO2                  2U
#define PORT_SMART_CLK_SRC_IO3                  3U
#define PORT_SMART_CLK_SRC_IO4                  4U
#define PORT_SMART_CLK_SRC_IO5                  5U
#define PORT_SMART_CLK_SRC_IO6                  6U
#define PORT_SMART_CLK_SRC_IO7                  7U
#define PORT_SMART_CLK_SRC_CHIP0                8U
#define PORT_SMART_CLK_SRC_CHIP1                9U
#define PORT_SMART_CLK_SRC_CHIP2                10U
#define PORT_SMART_CLK_SRC_CHIP3                11U
#define PORT_SMART_CLK_SRC_CHIP4                12U
#define PORT_SMART_CLK_SRC_CHIP5                13U
#define PORT_SMART_CLK_SRC_CHIP6                14U
#define PORT_SMART_CLK_SRC_CHIP7                15U
#define PORT_SMART_CLK_SRC_CLK_SM_RST_ACT       16U
#define PORT_SMART_CLK_SRC_CLK_SM_RST_DS        17U
#define PORT_SMART_CLK_SRC_CLK_SM_RST_DS_HIB    18U
#define PORT_SMART_CLK_SRC_CLK_LF_RST_LF_DS     19U
#define PORT_SMART_CLK_SRC_CONST0               20U
#define PORT_SMART_CLK_SRC_ASYNC                31U

/* Definition of LUT input signal "tr0_in"/"tr1_in"/"tr2_in" source selection */
#define PORT_SMART_LUT_TR_DU                    0U
#define PORT_SMART_LUT_TR_LUT0                  0U
#define PORT_SMART_LUT_TR_LUT1                  1U
#define PORT_SMART_LUT_TR_LUT2                  2U
#define PORT_SMART_LUT_TR_LUT3                  3U
#define PORT_SMART_LUT_TR_LUT4                  4U
#define PORT_SMART_LUT_TR_LUT5                  5U
#define PORT_SMART_LUT_TR_LUT6                  6U
#define PORT_SMART_LUT_TR_LUT7                  7U
#define PORT_SMART_LUT_TR_CHIP04                8U
#define PORT_SMART_LUT_TR_CHIP15                9U
#define PORT_SMART_LUT_TR_CHIP26                10U
#define PORT_SMART_LUT_TR_CHIP37                11U
#define PORT_SMART_LUT_TR_IO04                  12U
#define PORT_SMART_LUT_TR_IO15                  13U
#define PORT_SMART_LUT_TR_IO26                  14U
#define PORT_SMART_LUT_TR_IO37                  15U

/* Definition of LUT opcode specifies the LUT operation */
#define PORT_SMART_LUT_OPC_COM_OUT_NO_FB        0U
#define PORT_SMART_LUT_OPC_COM_OUT_FB           1U
#define PORT_SMART_LUT_OPC_SEQ_OUT_NO_FB        2U
#define PORT_SMART_LUT_OPC_REG_ASYNC            3U

/* Definition of Data unit input signal "tr0_in"/"tr1_in"/"tr2_in" source selection */
#define PORT_SMART_DU_TR_CONST0                 0U
#define PORT_SMART_DU_TR_CONST1                 1U
#define PORT_SMART_DU_TR_DU                     2U
#define PORT_SMART_DU_TR_LUT0                   3U
#define PORT_SMART_DU_TR_LUT1                   4U
#define PORT_SMART_DU_TR_LUT2                   5U
#define PORT_SMART_DU_TR_LUT3                   6U
#define PORT_SMART_DU_TR_LUT4                   7U
#define PORT_SMART_DU_TR_LUT5                   8U
#define PORT_SMART_DU_TR_LUT6                   9U
#define PORT_SMART_DU_TR_LUT7                   10U

/* Definition of Data unit input data "data0_in"/"data1_in" source selection */
#define PORT_SMART_DU_DATA_CONST0               0U
#define PORT_SMART_DU_DATA_CHIP                 1U
#define PORT_SMART_DU_DATA_IO                   2U
#define PORT_SMART_DU_DATA_DATA_REG             3U

/* Definition of Data unit opcode specifies the data unit operation */
#define PORT_SMART_DU_OPC_INCR                  1U
#define PORT_SMART_DU_OPC_DECR                  2U
#define PORT_SMART_DU_OPC_INCR_WRAP             3U
#define PORT_SMART_DU_OPC_DECR_WRAP             4U
#define PORT_SMART_DU_OPC_INCR_DECR             5U
#define PORT_SMART_DU_OPC_INCR_DECR_WRAP        6U
#define PORT_SMART_DU_OPC_ROR                   7U
#define PORT_SMART_DU_OPC_SHR                   8U
#define PORT_SMART_DU_OPC_AND_OR                9U
#define PORT_SMART_DU_OPC_SHR_MAJ3              10U
#define PORT_SMART_DU_OPC_SHR_EQL               11U

/* Definition of the GPIO drive mode for IO pin */
#define PORT_PIN_OUT_MODE_HIGHZ                 0U
#define PORT_PIN_OUT_MODE_PULLUP                2U
#define PORT_PIN_OUT_MODE_PULLDOWN              3U
#define PORT_PIN_OUT_MODE_OD_LOW                4U
#define PORT_PIN_OUT_MODE_OD_HIGH               5U
#define PORT_PIN_OUT_MODE_STRONG                6U
#define PORT_PIN_OUT_MODE_PULLUP_DOWN           7U

/* Definition of the pin input buffer mode */
#define PORT_PIN_IN_MODE_CMOS                   0U
#define PORT_PIN_IN_MODE_TTL                    1U

/* Definition of the GPIO drive strength for IO pin */
#define PORT_PIN_OUT_STRENGTH_DEFAULT           0U
#define PORT_PIN_OUT_STRENGTH_FULL              1U
#define PORT_PIN_OUT_STRENGTH_1_2               2U
#define PORT_PIN_OUT_STRENGTH_1_4               3U

/* Definition of the input buffer mode for GPIO5V */
#define PORT_PIN_5V_IN_MODE_CMOS_OR_TTL         0U
#define PORT_PIN_5V_IN_MODE_AUTO                1U

/* Definition of the GPIO drive select trim for IO pin */
#define PORT_PIN_OUT_TRIM_DEFAULT               0U
#define PORT_PIN_OUT_TRIM_DS_120OHM             1U
#define PORT_PIN_OUT_TRIM_DS_90OHM              2U
#define PORT_PIN_OUT_TRIM_DS_60OHM              3U
#define PORT_PIN_OUT_TRIM_DS_50OHM              4U
#define PORT_PIN_OUT_TRIM_DS_30OHM              5U
#define PORT_PIN_OUT_TRIM_DS_20OHM              6U
#define PORT_PIN_OUT_TRIM_DS_15OHM              7U

/* Definition of the GPIO extra slew rate for IO pin */
#define PORT_PIN_OUT_SLEW_EXT_FAST              0U
#define PORT_PIN_OUT_SLEW_EXT_SLOW              1U

/* Definition of the GPIO extra drive strength for IO pin */
#define PORT_PIN_OUT_STRENGTH_EXT_0             0U
#define PORT_PIN_OUT_STRENGTH_EXT_1             1U
#define PORT_PIN_OUT_STRENGTH_EXT_2             2U
#define PORT_PIN_OUT_STRENGTH_EXT_3             3U
#define PORT_PIN_OUT_STRENGTH_EXT_4             4U

/* Definition of AMUX T-switch control */
#define PORT_AMUX_SWITCH_OPEN                   0U
#define PORT_AMUX_SWITCH_CLOSED                 1U

/* Definition of initial value of the TR_CMD register */
#define PORT_TR_CMD_INIT_VALUE                  0U

/* Definition of the trigger invert setting */
#define PORT_TR_INV_DISABLE                     0U
#define PORT_TR_INV_ENABLE                      1U

/* Definition of the trigger debug freeze setting */
#define PORT_TR_DBG_FREEZE_DISABLE              0U
#define PORT_TR_DBG_FREEZE_ENABLE               1U

/* Definition of the input type for Trigger 1-to-1 group */
#define PORT_TR_1TO1_IN_CONST0                  0U
#define PORT_TR_1TO1_IN_INPUT                   1U

/* Definition of the input buffer for IO pin in case of PORT_PIN_OUT */
#define PORT_PIN_OUT_DIS_INBUF                  0U
#define PORT_PIN_OUT_EN_INBUF                   8U

/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/
/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* PORT_COMMON_DEFINES_H  */
/*==================[end of file]============================================*/
