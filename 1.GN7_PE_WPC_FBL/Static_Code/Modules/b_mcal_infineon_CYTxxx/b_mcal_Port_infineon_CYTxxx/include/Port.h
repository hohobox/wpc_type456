#ifndef PORT_H
#define PORT_H

/** \brief AUTOSAR Port Port Driver
 **
 ** This file contains or includes all external identifiers of
 ** the AUTOSAR module Port.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL42-DRV
 **
 ** (c) 2017-2022, Cypress Semiconductor Corporation (an Infineon company) or
 ** an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 ** This software, including source code, documentation and related materials
 ** ("Software") is owned by Cypress Semiconductor Corporation or one of
 ** its affiliates ("Cypress") and is protected by and subject to worldwide
 ** patent protection (United States and foreign), United States copyright laws
 ** and international treaty provisions.  Therefore, you may use this Software
 ** only as provided in the license agreement accompanying the software package
 ** from which you obtained this Software ("EULA").
 ** If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 ** non-transferable license to copy, modify,
 ** and compile the Software source code solely for use in connection
 ** with Cypress's integrated circuit products.
 ** Any reproduction, modification, translation, compilation,
 ** or representation of this Software except as specified above is prohibited
 ** without the express written permission of Cypress.
 ** Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 ** EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
 ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ** Cypress reserves the right to make changes to the Software without notice.
 ** Cypress does not assume any liability arising out of the application or
 ** use of the Software or any product or circuit described in the Software.
 ** Cypress does not authorize its products for use in any products
 ** where a malfunction or failure of the Cypress product may reasonably be
 ** expected to result in significant property damage,
 ** injury or death ("High Risk Product"). By including Cypress's product
 ** in a High Risk Product, the manufacturer of such system or application
 ** assumes all risk of such use and in doing so agrees to indemnify Cypress
 ** against all liability.
 */

/*==================[inclusions]=============================================*/
#include <Std_Types.h>           /* AUTOSAR standard types */
#include <Port_Common_Defines.h> /* PORT driver defines of depend on derivate */
#include <Port_Cfg.h>            /* PORT driver configuration sybolic defines */
#include <Port_Common_Types.h>   /* PORT driver types */
#include <Port_Cfg_Der_Internal_Defaults.h> /* PORT driver configuration setting defines */

/*==================[version check]==========================================*/
/*------------------[Check configuration generated macros]-------------------*/
#ifndef PORT_GEN_MODULE_ID
#error "PORT_GEN_MODULE_ID is not defined"
#endif

#ifndef PORT_GEN_VENDOR_ID
#error "PORT_GEN_VENDOR_ID is not defined"
#endif

#ifndef PORT_GEN_AR_RELEASE_MAJOR_VERSION
#error "PORT_GEN_AR_RELEASE_MAJOR_VERSION is not defined"
#endif

#ifndef PORT_GEN_AR_RELEASE_MINOR_VERSION
#error "PORT_GEN_AR_RELEASE_MINOR_VERSION is not defined"
#endif

#ifndef PORT_GEN_AR_RELEASE_REVISION_VERSION
#error "PORT_GEN_AR_RELEASE_REVISION_VERSION is not defined"
#endif

#ifndef PORT_GEN_SW_MAJOR_VERSION
#error "PORT_GEN_SW_MAJOR_VERSION is not defined"
#endif

#ifndef PORT_GEN_SW_MINOR_VERSION
#error "PORT_GEN_SW_MINOR_VERSION is not defined"
#endif

#ifndef PORT_GEN_SW_PATCH_VERSION
#error "PORT_GEN_SW_PATCH_VERSION is not defined"
#endif

/*------------------[AUTOSAR configuration AR version number check]----------*/
#if !PORT_AR_VERSION_CHECK(PORT_GEN_AR_RELEASE_MAJOR_VERSION,PORT_GEN_AR_RELEASE_MINOR_VERSION, \
                           PORT_GEN_AR_RELEASE_REVISION_VERSION)
#error AUTOSAR configuration AR version number mismatch
#endif
/*------------------[AUTOSAR configuration SW version number check]----------*/
#if !PORT_SW_VERSION_CHECK(PORT_GEN_SW_MAJOR_VERSION, PORT_GEN_SW_MINOR_VERSION, PORT_GEN_SW_PATCH_VERSION)
#error AUTOSAR configuration SW version number mismatch
#endif
/*------------------[AUTOSAR configuration additional check]-----------------*/
#if (PORT_GEN_MODULE_ID != PORT_MODULE_ID)
#error "AUTOSAR configuation additional check mismatch (Module ID)"
#endif

#if (PORT_GEN_VENDOR_ID != PORT_VENDOR_ID)
#error "AUTOSAR configuation additional check mismatch (Vendor ID)"
#endif

/*==================[macros]=================================================*/
/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/
#define PORT_START_SEC_CODE_ASIL_B
#include <Port_MemMap.h>

/** \brief Port_Init() Initialization of all Ports
 **
 ** This function initialize all ports with configuration
 ** set in paramter \p ConfigPtr.
 **
 ** \pre \p ConfigPtr shall be a valid pointer
 ** \pre \p ConfigPtr shall point to a configuration set
 ** \pre function is not re-entrant
 **
 ** \param[in]  ConfigPtr Pointer to start address of configuration set */
extern FUNC(void,PORT_CODE) Port_Init
(
    P2CONST(Port_ConfigType,AUTOMATIC,PORT_APPL_CONST) ConfigPtr
);

/** \brief Port_SetPinDirection() Set port pin direction
 **
 ** This function sets the direction of port pin \p Pin to the new
 ** direction of parameter \p Direction.
 **
 ** \pre ports must be initialized before
 ** \pre \p Pin shall be a valid port pin
 ** \pre \p Direction must be changeable for \p Pin
 ** \pre function is re-entrant
 **
 ** \param[in]  Pin         The ID of port pin
 ** \param[in]  Direction   The direction to be set for port pin */
#if (PORT_SET_PIN_DIRECTION_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_SetPinDirection
(
    Port_PinType          Pin,
    Port_PinDirectionType Direction
);
#else
#define Port_SetPinDirection(a,b) Port_SetPinDirection_API_Disabled(a,b)
#endif

/** \brief Port_SetPinMode() Set port pin mode
 **
 ** This function sets the new mode of parameter \p Mode to the mode of port
 ** pin \p Pin. The modes available in the configuration are grouped because 
 ** a runtime check whether the pin supports the special mode can not be 
 ** performed. Therefore the user is responsible to call this function as 
 ** described in the users guide and with the mode group value provided 
 ** in Port_Cfg_Der.h. E.g. PORT_PIN_MODE_POOO_GPIO_0, PORT_PIN_MODE_P001_ALT1,
 ** ... or anything else conform to the HW manual.
 **
 ** \pre ports must be initialized before
 ** \pre \p Pin   shall be a valid port pin
 ** \pre \p Mode  shall be a valid mode
 ** \pre function is re-entrant
 **
 ** \param[in]  Pin         The ID of port pin
 ** \param[in]  Mode        The new mode of the pin */
#if (PORT_SET_PIN_MODE_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_SetPinMode
(
    Port_PinType     Pin,
    Port_PinModeType Mode
);
#else
#define Port_SetPinMode(a,b) Port_SetPinMode_API_Disabled(a,b)
#endif

/** \brief Port_RefreshPortDirection() Refreshs the Port direction
 **
 ** This function refresh the direction of all ports that are configured as
 ** direction not changeable during runtime.
 **
 ** \pre ports must be initialized before
 ** \pre function is not re-entrant */
extern FUNC(void,PORT_CODE) Port_RefreshPortDirection
(
    void
);

/** \brief Port_GetVersionInfo() Get Version Information
 **
 ** Return the version of the Port driver in a Std_VersionInfoType structure.
 ** \param[out] versioninfo Port driver module's version
 **
 ** \return the version of the Port driver in a Std_VersionInfoType structure.
 ** */
#if (PORT_VERSION_INFO_API == STD_ON)
extern FUNC(void, PORT_CODE) Port_GetVersionInfo
(
    P2VAR(Std_VersionInfoType, AUTOMATIC,PORT_APPL_DATA) versioninfo
);
#else
#define Port_GetVersionInfo(a) Port_GetVersionInfo_API_Disabled(a)
#endif

/** \brief Port_GetStatus() Get port pin status
 **
 ** This function returns the configuration information of this module
 ** read out from register.
 **
 ** \pre \p PortStatusInfoPtr is not equal to zero
 ** \pre ports must be initialized before
 ** \pre \p Pin shall be a valid port pin
 ** \pre function is re-entrant
 **
 ** \param[in]  Pin                 The ID of port pin
 ** \param[out] PortStatusInfoPtr   pointer of status of port pins
 ** \return the status of the port pin in a Port_StatusType structure. */
#if (PORT_SAFETY_FUNCTION_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_GetStatus
(
    Port_PinType     Pin,
    P2VAR(Port_StatusType, AUTOMATIC,PORT_APPL_DATA) PortStatusInfoPtr
);

/** \brief Port_GetAmuxSplitCtlStatus() Get Amux splitter cell control status
 **
 ** This function returns the configuration information of
 ** AMUX splitter cell control status from register.
 **
 ** \pre \p AmuxSplitCtlStatusInfoPtr is not equal to zero
 ** \pre cells must be initialized before
 ** \pre \p Cell shall be a valid cell
 ** \pre function is re-entrant
 **
 ** \param[in]  Cell                        The id of AMUX splitter cell
 ** \param[out] AmuxSplitCtlStatusInfoPtr   pointer of status of Amux splitter cell
 ** \return the status of the Amux splitter cell in a Port_AmuxSplitCtlStatusType structure. */
extern FUNC(void,PORT_CODE) Port_GetAmuxSplitCtlStatus
(
    Port_AmuxCellType   Cell,
    P2VAR(Port_AmuxSplitCtlStatusType, AUTOMATIC,PORT_APPL_DATA) AmuxSplitCtlStatusInfoPtr
);
#else
#define Port_GetStatus(a,b) Port_GetStatus_API_Disabled(a,b)
#define Port_GetAmuxSplitCtlStatus(a,b) Port_GetAmuxSplitCtlStatus_API_Disabled(a,b)
#endif

/** \brief Port_SetToDioMode() Set port pin mode to DIO mode
 **
 ** Using an API, it shall be possible to switch a Port Pin
 ** from the configured mode to DIO mode.
 ** Note: If the configured mode of a pin is "Dio", this API has no effect.
 **
 ** \pre ports must be initialized before
 ** \pre function is re-entrant
 **
 ** \param[in]  PortId      The id of port pin */
#if (PORT_SET_DIO_ALTERNATE_MODE_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_SetToDioMode
(
    Port_PinType     PortId
);

/** \brief Port_SetToAlternateMode() Set port pin mode to the configured mode
 **
 ** Using an API, it shall be possible to switch a Port Pin
 ** from DIO mode to the configured mode.
 ** Note: If the configured mode of a pin is "Dio", this API has no effect.
 **
 ** \pre ports must be initialized before
 ** \pre function is re-entrant
 **
 ** \param[in]  PortId      The id of port pin */
extern FUNC(void,PORT_CODE) Port_SetToAlternateMode
(
    Port_PinType     PortId
);
#else
#define Port_SetToDioMode(a) Port_SetToDioMode_API_Disabled(a)
#define Port_SetToAlternateMode(a) Port_SetToAlternateMode_API_Disabled(a)
#endif

/** \brief Port_SetTrigger() Set trigger
 **
 ** Sets the configuration for specified trigger.
 **
 ** \pre \p group_id shall be a valid trigger group ID
 ** \pre \p out_trg shall be a valid output trigger ID
 ** \pre \p in_trg shall be a valid input trigger ID
 ** \pre triggers must be initialized before
 ** \pre function is re-entrant
 **
 ** \param[in]  group_id        Trigger Group ID number
 ** \param[in]  out_trg         Output Trigger ID number
 ** \param[in]  in_trg          Input Trigger ID number
 ** \param[in]  inv_flg         Trigger Invert Flag
 ** \param[in]  sensitive_type  Trigger Sensitive Type
 ** \param[in]  dbg_freeze_flg  Debug Freeze Flag */
#if (PORT_SET_TRIGGER_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_SetTrigger
(
    Port_TriggerGroupIdType     group_id,
    Port_TriggerIdType          out_trg,
    Port_TriggerIdType          in_trg,
    boolean                     inv_flg,
    Port_TriggerSensitiveType   sensitive_type,
    boolean                     dbg_freeze_flg
);
#else
#define Port_SetTrigger(a,b,c,d,e,f) Port_SetTrigger_API_Disabled(a,b,c,d,e,f)
#endif

/** \brief Port_ActTrigger() Set trigger command to activate status
 **
 ** Activate the specified trigger.
 **
 ** \pre \p group_id shall be a valid trigger group ID
 ** \pre \p trg_id shall be a valid trigger ID
 ** \pre triggers must be initialized before
 ** \pre function is not re-entrant
 **
 ** \param[in]  group_id        Trigger Group ID number
 ** \param[in]  trg_id          Trigger ID number
 ** \param[in]  act_type        Trigger activation type
 ** \param[in]  sensitive_type  Trigger Sensitive Type
 ** \return the result of activation trigger. */
#if (PORT_TRIGGER_COMMAND_API == STD_ON)
extern FUNC(boolean,PORT_CODE) Port_ActTrigger
(
    Port_TriggerGroupIdType     group_id,
    Port_TriggerIdType          trg_id,
    Port_TriggerActivationType  act_type,
    Port_TriggerSensitiveType   sensitive_type
);
#else
#define Port_ActTrigger(a,b,c,d) Port_ActTrigger_API_Disabled(a,b,c,d)
#endif

/** \brief Port_DeactTrigger() Set trigger command to deactivate status
 **
 ** Deactivates the trigger activated by Port_ActTrigger.
 ** Modules that use the trigger command shall call the Port_DeactTrigger 
 ** function only if the trigger command is successfully activated with 
 ** the level sensitive.
 **
 ** \pre triggers must be initialized before
 ** \pre function is not re-entrant */
#if (PORT_TRIGGER_COMMAND_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_DeactTrigger
(
    void
);
#else
#define Port_DeactTrigger(void) Port_DeactTrigger_API_Disabled(void)
#endif

/** \brief Port_GetTriggerIdStatus() Get trigger group status
 **
 ** Gets the status of specified trigger.
 **
 ** \pre \p group_id shall be a valid trigger group ID
 ** \pre \p out_trg shall be a valid output trigger ID
 ** \pre \p TrigIdStatusInfoPtr is not equal to zero
 ** \pre triggers must be initialized before
 ** \pre function is re-entrant
 **
 ** \param[in]  group_id            Trigger Group ID number
 ** \param[in]  out_trg             Output Trigger ID number
 ** \param[out] TrigIdStatusInfoPtr Pointer to where to store the trigger status information */
#if (PORT_SAFETY_FUNCTION_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_GetTriggerIdStatus
(
    Port_TriggerGroupIdType  group_id,
    Port_TriggerIdType       out_trg,
    P2VAR(Port_TriggerIdStatusType, AUTOMATIC,PORT_APPL_DATA)  TrigIdStatusInfoPtr
);
#else
#define Port_GetTriggerIdStatus(a,b,c) Port_GetTriggerIdStatus_API_Disabled(a,b,c)
#endif

/** \brief Port_GetTriggerCmdStatus() Get trigger command status
 **
 ** Gets the status of trigger command.
 **
 ** \pre \p TrigCmdStatusInfoPtr is not equal to zero
 ** \pre triggers must be initialized before
 ** \pre function is re-entrant
 **
 ** \param[out] TrigCmdStatusInfoPtr    Pointer to where to store the trigger command status information */
#if (PORT_TRIGGER_COMMAND_API == STD_ON)
extern FUNC(void,PORT_CODE) Port_GetTriggerCmdStatus
(
    P2VAR(Port_TriggerCmdStatusType, AUTOMATIC,PORT_APPL_DATA)  TrigCmdStatusInfoPtr
);
#else
#define Port_GetTriggerCmdStatus(a) Port_GetTriggerCmdStatus_API_Disabled(a)
#endif

#define PORT_STOP_SEC_CODE_ASIL_B
#include <Port_MemMap.h>

/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
#define PORT_START_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Port_MemMap.h>

extern CONST(Port_ConfigType,PORT_APPL_CONST) Port_Config[PORT_PIN_NUMBER_OF_CONFIGSETS];

#define PORT_STOP_SEC_CONST_ASIL_B_UNSPECIFIED
#include <Port_MemMap.h>

/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/
/*==================[external function definitions]==========================*/
/*==================[internal function definitions]==========================*/

#endif /* PORT_H */
/*==================[end of file]============================================*/
